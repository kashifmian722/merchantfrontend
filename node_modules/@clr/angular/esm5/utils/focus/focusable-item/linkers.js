/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var Linkers = /** @class */ (function () {
    function Linkers() {
    }
    /**
     * Links a set of focusable items to a parent along one direction
     */
    Linkers.linkParent = function (items, parent, direction) {
        items.forEach(function (item) { return (item[direction] = parent); });
    };
    /**
     * Double-links a set of focusable items vertically, possibly looping
     */
    Linkers.linkVertical = function (items, loop) {
        if (loop === void 0) { loop = true; }
        items.forEach(function (item, index) {
            if (index > 0) {
                item.up = items[index - 1];
            }
            if (index < items.length - 1) {
                item.down = items[index + 1];
            }
        });
        if (loop && items.length > 1) {
            items[0].up = items[items.length - 1];
            items[items.length - 1].down = items[0];
        }
    };
    return Linkers;
}());
export { Linkers };
// Right now I only need the two linkers above, but we can easily add more linkers. A couple examples:
// export function linkHorizontal(items: FocusableItem[], loop = true);
// export function linkTable(items: FocusableItem[][]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlua2Vycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInV0aWxzL2ZvY3VzL2ZvY3VzYWJsZS1pdGVtL2xpbmtlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRztBQU1IO0lBQUE7SUE2QkEsQ0FBQztJQTVCQzs7T0FFRztJQUNJLGtCQUFVLEdBQWpCLFVBQ0UsS0FBc0IsRUFDdEIsTUFBaUQsRUFDakQsU0FBNEI7UUFFNUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUExQixDQUEwQixDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksb0JBQVksR0FBbkIsVUFBb0IsS0FBc0IsRUFBRSxJQUFXO1FBQVgscUJBQUEsRUFBQSxXQUFXO1FBQ3JELEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSztZQUN4QixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1lBQ0QsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN0QyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3pDO0lBQ0gsQ0FBQztJQUNILGNBQUM7QUFBRCxDQUFDLEFBN0JELElBNkJDOztBQUVELHNHQUFzRztBQUN0Ryx1RUFBdUU7QUFDdkUsdURBQXVEIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBcnJvd0tleURpcmVjdGlvbiB9IGZyb20gJy4uL2Fycm93LWtleS1kaXJlY3Rpb24uZW51bSc7XG5pbXBvcnQgeyBGb2N1c2FibGVJdGVtIH0gZnJvbSAnLi9mb2N1c2FibGUtaXRlbSc7XG5cbmV4cG9ydCBjbGFzcyBMaW5rZXJzIHtcbiAgLyoqXG4gICAqIExpbmtzIGEgc2V0IG9mIGZvY3VzYWJsZSBpdGVtcyB0byBhIHBhcmVudCBhbG9uZyBvbmUgZGlyZWN0aW9uXG4gICAqL1xuICBzdGF0aWMgbGlua1BhcmVudChcbiAgICBpdGVtczogRm9jdXNhYmxlSXRlbVtdLFxuICAgIHBhcmVudDogRm9jdXNhYmxlSXRlbSB8IE9ic2VydmFibGU8Rm9jdXNhYmxlSXRlbT4sXG4gICAgZGlyZWN0aW9uOiBBcnJvd0tleURpcmVjdGlvblxuICApIHtcbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4gKGl0ZW1bZGlyZWN0aW9uXSA9IHBhcmVudCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIERvdWJsZS1saW5rcyBhIHNldCBvZiBmb2N1c2FibGUgaXRlbXMgdmVydGljYWxseSwgcG9zc2libHkgbG9vcGluZ1xuICAgKi9cbiAgc3RhdGljIGxpbmtWZXJ0aWNhbChpdGVtczogRm9jdXNhYmxlSXRlbVtdLCBsb29wID0gdHJ1ZSkge1xuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgIGl0ZW0udXAgPSBpdGVtc1tpbmRleCAtIDFdO1xuICAgICAgfVxuICAgICAgaWYgKGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICBpdGVtLmRvd24gPSBpdGVtc1tpbmRleCArIDFdO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChsb29wICYmIGl0ZW1zLmxlbmd0aCA+IDEpIHtcbiAgICAgIGl0ZW1zWzBdLnVwID0gaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV07XG4gICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS5kb3duID0gaXRlbXNbMF07XG4gICAgfVxuICB9XG59XG5cbi8vIFJpZ2h0IG5vdyBJIG9ubHkgbmVlZCB0aGUgdHdvIGxpbmtlcnMgYWJvdmUsIGJ1dCB3ZSBjYW4gZWFzaWx5IGFkZCBtb3JlIGxpbmtlcnMuIEEgY291cGxlIGV4YW1wbGVzOlxuLy8gZXhwb3J0IGZ1bmN0aW9uIGxpbmtIb3Jpem9udGFsKGl0ZW1zOiBGb2N1c2FibGVJdGVtW10sIGxvb3AgPSB0cnVlKTtcbi8vIGV4cG9ydCBmdW5jdGlvbiBsaW5rVGFibGUoaXRlbXM6IEZvY3VzYWJsZUl0ZW1bXVtdKTtcbiJdfQ==