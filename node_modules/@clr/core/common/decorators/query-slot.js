/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
// Slot Query decorators are similar to the query decorator in lit-element.
// Instead of querying the component template they query the content slot of the component.
const legacyQuery = (descriptor, proto, name) => {
    Object.defineProperty(proto, name, descriptor);
};
const standardQuery = (descriptor, element) => ({
    kind: 'method',
    placement: 'prototype',
    key: element.key,
    descriptor,
});
/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's light DOM Slot.
 *
 * @ExportDecoratedItems
 */
export function querySlot(selector) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                return this.querySelector(selector);
            },
            enumerable: true,
            configurable: true,
        };
        return name !== undefined
            ? legacyQuery(descriptor, protoOrDescriptor, name)
            : standardQuery(descriptor, protoOrDescriptor);
    };
}
/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's light DOM Slot.
 *
 * @ExportDecoratedItems
 */
export function querySlotAll(selector) {
    return (protoOrDescriptor, 
    // tslint:disable-next-line:no-any decorator
    name) => {
        const descriptor = {
            get() {
                return this.querySelectorAll(selector);
            },
            enumerable: true,
            configurable: true,
        };
        return name !== undefined
            ? legacyQuery(descriptor, protoOrDescriptor, name)
            : standardQuery(descriptor, protoOrDescriptor);
    };
}
//# sourceMappingURL=query-slot.js.map