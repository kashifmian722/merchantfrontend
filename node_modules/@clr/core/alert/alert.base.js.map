{"version":3,"file":"alert.base.js","sourceRoot":"","sources":["../../../src/clr-core/alert/alert.base.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport '@clr/core/button';\nimport { CdsButton } from '@clr/core/button';\nimport {\n  CommonStringsService,\n  event,\n  EventEmitter,\n  property,\n  querySlotAll,\n  returnOrFallthrough,\n} from '@clr/core/common';\nimport '@clr/core/icon';\nimport {\n  checkCircleIcon,\n  ClarityIcons,\n  exclamationCircleIcon,\n  exclamationTriangleIcon,\n  infoCircleIcon,\n  timesIcon,\n} from '@clr/core/icon-shapes';\nimport { html, LitElement } from 'lit-element';\n\nClarityIcons.addIcons(checkCircleIcon, infoCircleIcon, exclamationCircleIcon, exclamationTriangleIcon, timesIcon);\n\nconst iconMap = {\n  info: {\n    shape: ClarityIcons.getIconNameFromShape(infoCircleIcon),\n    title: CommonStringsService.keys.info,\n  },\n  success: {\n    shape: ClarityIcons.getIconNameFromShape(checkCircleIcon),\n    title: CommonStringsService.keys.success,\n  },\n  warning: {\n    shape: ClarityIcons.getIconNameFromShape(exclamationTriangleIcon),\n    title: CommonStringsService.keys.warning,\n  },\n  danger: {\n    shape: ClarityIcons.getIconNameFromShape(exclamationCircleIcon),\n    title: CommonStringsService.keys.danger,\n  },\n};\n\n/**\n * Base class for alerts. Contains properties and functions common to all alerts.\n */\n// @dynamic\nexport class CdsBaseAlert extends LitElement {\n  @event() private closedChange: EventEmitter<boolean>;\n\n  /** If false, the alert will not render the close button.  */\n  @property({ type: Boolean })\n  closable = true;\n\n  /** Sets the color of the alert from a predefined list of statuses */\n  @property({ type: String })\n  status: 'info' | 'success' | 'warning' | 'danger';\n\n  /** Sets the icon shape to be used to override the default icon. The application must import the icon shape. */\n  @property({ type: String })\n  iconShape = '';\n\n  /** Sets the title attribute for the icon. This may need to be set especially if the component is using custom icon shape.  */\n  @property({ type: String })\n  iconTitle = '';\n\n  @querySlotAll('cds-button') private buttons: NodeListOf<CdsButton>;\n\n  get alertIconShape() {\n    /* \n     * if the component's icon-shape attribute is set, that value is used.\n     * otherwise, we check for status attribute and set an icon shape that matches.\n     * if neither is supplied we default to info-circle icon.\n     */\n    return returnOrFallthrough(\n      [[this.iconShape, () => this.iconShape], [this.status, () => iconMap[this.status].shape]],\n      () => infoCircleIcon[0]\n    );\n  }\n\n  get alertIconTitle() {\n    /* \n     * if the component's icon-title attribute is set, that value is used.\n     * otherwise, we check for status attribute and set an icon shape that matches.\n     * if neither is supplied we default to string for \"Info\".\n     */\n    return returnOrFallthrough(\n      [\n        [this.iconTitle, () => this.iconTitle],\n        [this.status, () => (iconMap[this.status] ? iconMap[this.status].title : '')],\n      ],\n      () => CommonStringsService.keys.info\n    );\n  }\n\n  updateButtons() {\n    // buttons inside alert (usually app-level) have the style of small inverse buttons\n    this.buttons.forEach(button => {\n      button.status = 'inverse';\n      button.size = 'sm';\n    });\n  }\n\n  render() {\n    return html`\n      <div class=\"alert-wrapper\">\n        <div class=\"alert-item\">\n          <div class=\"alert-icon-wrapper\">\n            <cds-icon class=\"alert-icon\" shape=\"${this.alertIconShape}\" title=\"${this.alertIconTitle}\"></cds-icon>\n          </div>\n          <slot></slot>\n          <slot name=\"actions\" @slotchange=\"${this.updateButtons()}\"></slot>\n        </div>\n      </div>\n      ${\n        this.closable\n          ? html`<button @click=\"${() => this.closeAlert()}\" aria-label=\"${\n              CommonStringsService.keys.alertCloseButtonAriaLabel\n            }\"\n          class=\"close\" action=\"outline\" icon><cds-icon shape=\"times\"></cds-icon></button>`\n          : html``\n      }\n    `;\n  }\n\n  closeAlert() {\n    this.closedChange.emit(true);\n  }\n}\n"]}