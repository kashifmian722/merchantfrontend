import { AfterContentInit, ElementRef, OnDestroy } from '@angular/core';
import { IfActiveService } from '../../utils/conditional/if-active.service';
import { ClrKeyFocus } from '../../utils/focus/key-focus/key-focus';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { TabsLayout } from './enums/tabs-layout.enum';
import { TabsService } from './providers/tabs.service';
import { ClrTabLink } from './tab-link.directive';
import * as ɵngcc0 from '@angular/core';
export declare class ClrTabs implements AfterContentInit, OnDestroy {
    ifActiveService: IfActiveService;
    toggleService: ClrPopoverToggleService;
    tabsService: TabsService;
    tabsId: number;
    commonStrings: ClrCommonStringsService;
    private subscriptions;
    private get overflowPosition();
    private set tabContentViewContainer(value);
    set layout(layout: TabsLayout);
    get layout(): TabsLayout;
    private tabs;
    private _tabLinkDirectives;
    get tabLinkDirectives(): ClrTabLink[];
    tabLinkElements: HTMLElement[];
    keyFocus: ClrKeyFocus;
    constructor(ifActiveService: IfActiveService, toggleService: ClrPopoverToggleService, tabsService: TabsService, tabsId: number, commonStrings: ClrCommonStringsService);
    get activeTabInOverflow(): boolean;
    get activeTabPosition(): number;
    get tabIds(): string;
    get isCurrentInOverflow(): boolean;
    get isVertical(): boolean;
    toggleOverflowOnPosition(position: number): void;
    private _tabOverflowEl;
    set tabOverflowEl(value: ElementRef);
    resetKeyFocusCurrentToActive(event: FocusEvent): void;
    toggleOverflowOnClick(): void;
    _mousedown: boolean;
    openOverflowOnFocus(): void;
    closeOnFocusOut(event: FocusEvent): void;
    closeOnEscapeKey(): void;
    closeOnOutsideClick(event: Event, tabOverflowTrigger: HTMLElement): void;
    private listenForTabLinkChanges;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrTabs>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrTabs, "clr-tabs", never, {
    "layout": "clrLayout";
}, {}, ["tabs"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFicy5kLnRzIiwic291cmNlcyI6WyJ0YWJzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRWxlbWVudFJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZkFjdGl2ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9jb25kaXRpb25hbC9pZi1hY3RpdmUuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJLZXlGb2N1cyB9IGZyb20gJy4uLy4uL3V0aWxzL2ZvY3VzL2tleS1mb2N1cy9rZXktZm9jdXMnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9wb3BvdmVyL3Byb3ZpZGVycy9wb3BvdmVyLXRvZ2dsZS5zZXJ2aWNlJztcbmltcG9ydCB7IFRhYnNMYXlvdXQgfSBmcm9tICcuL2VudW1zL3RhYnMtbGF5b3V0LmVudW0nO1xuaW1wb3J0IHsgVGFic1NlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy90YWJzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyVGFiTGluayB9IGZyb20gJy4vdGFiLWxpbmsuZGlyZWN0aXZlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsclRhYnMgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIGlmQWN0aXZlU2VydmljZTogSWZBY3RpdmVTZXJ2aWNlO1xuICAgIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlO1xuICAgIHRhYnNTZXJ2aWNlOiBUYWJzU2VydmljZTtcbiAgICB0YWJzSWQ6IG51bWJlcjtcbiAgICBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZTtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgcHJpdmF0ZSBnZXQgb3ZlcmZsb3dQb3NpdGlvbigpO1xuICAgIHByaXZhdGUgc2V0IHRhYkNvbnRlbnRWaWV3Q29udGFpbmVyKHZhbHVlKTtcbiAgICBzZXQgbGF5b3V0KGxheW91dDogVGFic0xheW91dCk7XG4gICAgZ2V0IGxheW91dCgpOiBUYWJzTGF5b3V0O1xuICAgIHByaXZhdGUgdGFicztcbiAgICBwcml2YXRlIF90YWJMaW5rRGlyZWN0aXZlcztcbiAgICBnZXQgdGFiTGlua0RpcmVjdGl2ZXMoKTogQ2xyVGFiTGlua1tdO1xuICAgIHRhYkxpbmtFbGVtZW50czogSFRNTEVsZW1lbnRbXTtcbiAgICBrZXlGb2N1czogQ2xyS2V5Rm9jdXM7XG4gICAgY29uc3RydWN0b3IoaWZBY3RpdmVTZXJ2aWNlOiBJZkFjdGl2ZVNlcnZpY2UsIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLCB0YWJzU2VydmljZTogVGFic1NlcnZpY2UsIHRhYnNJZDogbnVtYmVyLCBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSk7XG4gICAgZ2V0IGFjdGl2ZVRhYkluT3ZlcmZsb3coKTogYm9vbGVhbjtcbiAgICBnZXQgYWN0aXZlVGFiUG9zaXRpb24oKTogbnVtYmVyO1xuICAgIGdldCB0YWJJZHMoKTogc3RyaW5nO1xuICAgIGdldCBpc0N1cnJlbnRJbk92ZXJmbG93KCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzVmVydGljYWwoKTogYm9vbGVhbjtcbiAgICB0b2dnbGVPdmVyZmxvd09uUG9zaXRpb24ocG9zaXRpb246IG51bWJlcik6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfdGFiT3ZlcmZsb3dFbDtcbiAgICBzZXQgdGFiT3ZlcmZsb3dFbCh2YWx1ZTogRWxlbWVudFJlZik7XG4gICAgcmVzZXRLZXlGb2N1c0N1cnJlbnRUb0FjdGl2ZShldmVudDogRm9jdXNFdmVudCk6IHZvaWQ7XG4gICAgdG9nZ2xlT3ZlcmZsb3dPbkNsaWNrKCk6IHZvaWQ7XG4gICAgX21vdXNlZG93bjogYm9vbGVhbjtcbiAgICBvcGVuT3ZlcmZsb3dPbkZvY3VzKCk6IHZvaWQ7XG4gICAgY2xvc2VPbkZvY3VzT3V0KGV2ZW50OiBGb2N1c0V2ZW50KTogdm9pZDtcbiAgICBjbG9zZU9uRXNjYXBlS2V5KCk6IHZvaWQ7XG4gICAgY2xvc2VPbk91dHNpZGVDbGljayhldmVudDogRXZlbnQsIHRhYk92ZXJmbG93VHJpZ2dlcjogSFRNTEVsZW1lbnQpOiB2b2lkO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yVGFiTGlua0NoYW5nZXM7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==