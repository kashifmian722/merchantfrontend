import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
let ClrProgressBar = class ClrProgressBar {
    constructor(ariaLiveService) {
        this.ariaLiveService = ariaLiveService;
        this.externalId = '';
        // Progress
        this.max = 100;
        this._value = 0;
    }
    set id(value) {
        this._ID = value;
        this.externalId = null;
    }
    get id() {
        return this._ID;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        if (this.displayAriaLive()) {
            this.ariaLiveService.announce(this.displayValue, this.ariaLive);
        }
    }
    // Styles
    get progressClass() {
        return true;
    }
    get labeledClass() {
        return this._labeled;
    }
    set clrLabeled(value) {
        this._labeled = isBooleanAttributeSet(value);
    }
    get fadeClass() {
        return this._fade;
    }
    set clrFade(value) {
        this._fade = isBooleanAttributeSet(value);
    }
    get loopClass() {
        return this._loop;
    }
    set clrLoop(value) {
        this._loop = isBooleanAttributeSet(value);
    }
    get successClass() {
        return this._success;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrSuccess(value) {
        this._success = isBooleanAttributeSet(value);
    }
    get dangerClass() {
        return this._danger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrDanger(value) {
        this._danger = isBooleanAttributeSet(value);
    }
    get flashClass() {
        return this._flash;
    }
    set clrFlash(value) {
        this._flash = isBooleanAttributeSet(value);
    }
    get flashDangerClass() {
        return this._flashDanger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrFlashDanger(value) {
        this._flashDanger = isBooleanAttributeSet(value);
    }
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     */
    get displayValue() {
        if (this.displayval) {
            return this.displayval;
        }
        return `${this.value}%`;
    }
    /**
     * Display aria-live only when there is value and it's not 0 or equal to the max value
     */
    displayAriaLive() {
        return (this.value !== undefined || this.value !== 0) && this.value !== this.max;
    }
    get ariaLive() {
        if (isBooleanAttributeSet(this.assertive)) {
            return ClrAriaLivePoliteness.assertive;
        }
        if (isBooleanAttributeSet(this.off)) {
            return ClrAriaLivePoliteness.off;
        }
        return ClrAriaLivePoliteness.polite;
    }
};
ClrProgressBar.ctorParameters = () => [
    { type: ClrAriaLiveService }
];
__decorate([
    HostBinding('attr.id')
], ClrProgressBar.prototype, "externalId", void 0);
__decorate([
    Input()
], ClrProgressBar.prototype, "id", null);
__decorate([
    Input('clrMax')
], ClrProgressBar.prototype, "max", void 0);
__decorate([
    Input('clrDisplayval')
], ClrProgressBar.prototype, "displayval", void 0);
__decorate([
    Input('clrValue')
], ClrProgressBar.prototype, "value", null);
__decorate([
    HostBinding('class.progress')
], ClrProgressBar.prototype, "progressClass", null);
__decorate([
    HostBinding('class.labeled')
], ClrProgressBar.prototype, "labeledClass", null);
__decorate([
    Input('clrLabeled')
], ClrProgressBar.prototype, "clrLabeled", null);
__decorate([
    HostBinding('class.progress-fade')
], ClrProgressBar.prototype, "fadeClass", null);
__decorate([
    Input('clrFade')
], ClrProgressBar.prototype, "clrFade", null);
__decorate([
    HostBinding('class.loop')
], ClrProgressBar.prototype, "loopClass", null);
__decorate([
    Input('clrLoop')
], ClrProgressBar.prototype, "clrLoop", null);
__decorate([
    HostBinding('class.success')
], ClrProgressBar.prototype, "successClass", null);
__decorate([
    Input('clrSuccess')
], ClrProgressBar.prototype, "clrSuccess", null);
__decorate([
    HostBinding('class.danger')
], ClrProgressBar.prototype, "dangerClass", null);
__decorate([
    Input('clrDanger')
], ClrProgressBar.prototype, "clrDanger", null);
__decorate([
    HostBinding('class.flash')
], ClrProgressBar.prototype, "flashClass", null);
__decorate([
    Input('clrFlash')
], ClrProgressBar.prototype, "clrFlash", null);
__decorate([
    HostBinding('class.flash-danger')
], ClrProgressBar.prototype, "flashDangerClass", null);
__decorate([
    Input('clrFlashDanger')
], ClrProgressBar.prototype, "clrFlashDanger", null);
__decorate([
    Input('clrAssertive')
], ClrProgressBar.prototype, "assertive", void 0);
__decorate([
    Input('clrOff')
], ClrProgressBar.prototype, "off", void 0);
ClrProgressBar = __decorate([
    Component({
        providers: [ClrAriaLiveService],
        selector: 'clr-progress-bar',
        template: `
    <progress [id]="id" [attr.max]="max" [attr.value]="value" [attr.data-displayval]="displayValue"></progress>
    <span *ngIf="displayAriaLive()">{{ displayValue }}</span>
  `
    })
], ClrProgressBar);
export { ClrProgressBar };
//# sourceMappingURL=data:application/json;base64,