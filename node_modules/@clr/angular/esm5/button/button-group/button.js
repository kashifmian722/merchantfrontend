/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, EventEmitter, Input, Optional, Output, SkipSelf, ViewChild } from '@angular/core';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
var ClrButton = /** @class */ (function () {
    function ClrButton(buttonInGroupService, toggleService) {
        this.buttonInGroupService = buttonInGroupService;
        this.toggleService = toggleService;
        this._enableService = false;
        this._inMenu = false;
        this._classNames = 'btn';
        this._name = null;
        this._type = null;
        this._id = null;
        this._disabled = null;
        this._click = new EventEmitter(false);
    }
    ClrButton_1 = ClrButton;
    Object.defineProperty(ClrButton.prototype, "inMenu", {
        get: function () {
            return this._inMenu;
        },
        set: function (value) {
            value = !!value;
            if (this._inMenu !== value) {
                this._inMenu = value;
                // We check if the service flag is enabled
                // and if the service exists because the service is optional
                if (this._enableService && this.buttonInGroupService) {
                    this.buttonInGroupService.updateButtonGroup(this);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "classNames", {
        get: function () {
            return this._classNames;
        },
        set: function (value) {
            if (typeof value === 'string') {
                var classNames = value.split(' ');
                if (classNames.indexOf('btn') === -1) {
                    classNames.push('btn');
                }
                this._classNames = classNames.join(' ');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (value) {
            if (typeof value === 'string') {
                this._name = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "type", {
        get: function () {
            return this._type;
        },
        set: function (value) {
            if (typeof value === 'string') {
                this._type = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            if (typeof value === 'string') {
                this._id = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrButton.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            if (value !== null && value !== false) {
                this._disabled = '';
            }
            else {
                this._disabled = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrButton.prototype.loadingStateChange = function (state) {
        this.loading = state === ClrLoadingState.LOADING;
    };
    ClrButton.prototype.emitClick = function ($event) {
        if (this.inMenu) {
            this.toggleService.toggleWithEvent($event);
        }
        this._click.emit(true);
    };
    ClrButton.prototype.ngAfterViewInit = function () {
        this._enableService = true;
    };
    var ClrButton_1;
    ClrButton.ctorParameters = function () { return [
        { type: ButtonInGroupService, decorators: [{ type: SkipSelf }, { type: Optional }] },
        { type: ClrPopoverToggleService }
    ]; };
    __decorate([
        ViewChild('buttonProjectedRef', { static: true })
    ], ClrButton.prototype, "templateRef", void 0);
    __decorate([
        Input('clrInMenu')
    ], ClrButton.prototype, "inMenu", null);
    __decorate([
        Input('class')
    ], ClrButton.prototype, "classNames", null);
    __decorate([
        Input('name')
    ], ClrButton.prototype, "name", null);
    __decorate([
        Input('type')
    ], ClrButton.prototype, "type", null);
    __decorate([
        Input('id')
    ], ClrButton.prototype, "id", null);
    __decorate([
        Input('disabled')
    ], ClrButton.prototype, "disabled", null);
    __decorate([
        Output('click')
    ], ClrButton.prototype, "_click", void 0);
    ClrButton = ClrButton_1 = __decorate([
        Component({
            selector: 'clr-button',
            template: "\n        <ng-template #buttonProjectedRef>\n            <button\n                [class]=\"classNames\"\n                (click)=\"emitClick($event)\"\n                [attr.type]=\"type\"\n                [attr.name]=\"name\"\n                [attr.disabled]=\"disabled\"\n                [attr.id]=\"id\">\n                <span class=\"spinner spinner-inline\" *ngIf=\"loading\"></span>\n                <ng-content></ng-content>\n            </button>\n        </ng-template>\n    ",
            providers: [{ provide: LoadingListener, useExisting: ClrButton_1 }]
        }),
        __param(0, SkipSelf()),
        __param(0, Optional())
    ], ClrButton);
    return ClrButton;
}());
export { ClrButton };
//# sourceMappingURL=data:application/json;base64,