/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends, __param } from "tslib";
import { Directive, ViewContainerRef, Injector, Self, Optional, Renderer2, ElementRef, HostListener, AfterContentInit, } from '@angular/core';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrDatalistContainer } from './datalist-container';
import { NgControl } from '@angular/forms';
import { FocusService } from '../common/providers/focus.service';
import { DatalistIdService } from './providers/datalist-id.service';
var ClrDatalistInput = /** @class */ (function (_super) {
    __extends(ClrDatalistInput, _super);
    function ClrDatalistInput(focusService, vcr, injector, control, renderer, el, datalistIdService) {
        var _this = _super.call(this, vcr, ClrDatalistContainer, injector, control, renderer, el) || this;
        _this.focusService = focusService;
        _this.datalistIdService = datalistIdService;
        if (!_this.focusService) {
            throw new Error('clrDatalist requires being wrapped in <clr-datalist-container>');
        }
        return _this;
    }
    ClrDatalistInput.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Subscriptions is inherited from WrappedFormControl, unsubscribe is handled there
        this.subscriptions.push(this.datalistIdService.idChange.subscribe(function (id) { return (_this.listValue = id); }));
    };
    ClrDatalistInput.prototype.triggerFocus = function () {
        if (this.focusService) {
            this.focusService.focused = true;
        }
    };
    ClrDatalistInput.prototype.triggerValidation = function () {
        _super.prototype.triggerValidation.call(this);
        if (this.focusService) {
            this.focusService.focused = false;
        }
    };
    ClrDatalistInput.ctorParameters = function () { return [
        { type: FocusService, decorators: [{ type: Optional }] },
        { type: ViewContainerRef },
        { type: Injector },
        { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
        { type: Renderer2 },
        { type: ElementRef },
        { type: DatalistIdService }
    ]; };
    __decorate([
        HostListener('focus')
    ], ClrDatalistInput.prototype, "triggerFocus", null);
    __decorate([
        HostListener('blur')
    ], ClrDatalistInput.prototype, "triggerValidation", null);
    ClrDatalistInput = __decorate([
        Directive({
            selector: '[clrDatalistInput]',
            host: {
                '[class.clr-input]': 'true',
                '[attr.list]': 'listValue',
            },
        }),
        __param(0, Optional()),
        __param(3, Self()),
        __param(3, Optional())
    ], ClrDatalistInput);
    return ClrDatalistInput;
}(WrappedFormControl));
export { ClrDatalistInput };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWxpc3QtaW5wdXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2xyL2FuZ3VsYXIvIiwic291cmNlcyI6WyJmb3Jtcy9kYXRhbGlzdC9kYXRhbGlzdC1pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHOztBQUVILE9BQU8sRUFDTCxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLFFBQVEsRUFDUixJQUFJLEVBQ0osUUFBUSxFQUNSLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLGdCQUFnQixHQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBU3BFO0lBQXNDLG9DQUF3QztJQUM1RSwwQkFDc0IsWUFBMEIsRUFDOUMsR0FBcUIsRUFDckIsUUFBa0IsRUFHbEIsT0FBa0IsRUFDbEIsUUFBbUIsRUFDbkIsRUFBYyxFQUNOLGlCQUFvQztRQVQ5QyxZQVdFLGtCQUFNLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLENBQUMsU0FLbEU7UUFmcUIsa0JBQVksR0FBWixZQUFZLENBQWM7UUFRdEMsdUJBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUk1QyxJQUFJLENBQUMsS0FBSSxDQUFDLFlBQVksRUFBRTtZQUN0QixNQUFNLElBQUksS0FBSyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7U0FDbkY7O0lBQ0gsQ0FBQztJQUlELDZDQUFrQixHQUFsQjtRQUFBLGlCQUdDO1FBRkMsbUZBQW1GO1FBQ25GLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsQ0FBQyxLQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQyxFQUFyQixDQUFxQixDQUFDLENBQUMsQ0FBQztJQUNsRyxDQUFDO0lBR0QsdUNBQVksR0FBWjtRQUNFLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNyQixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7U0FDbEM7SUFDSCxDQUFDO0lBR0QsNENBQWlCLEdBQWpCO1FBQ0UsaUJBQU0saUJBQWlCLFdBQUUsQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1NBQ25DO0lBQ0gsQ0FBQzs7Z0JBckNtQyxZQUFZLHVCQUE3QyxRQUFRO2dCQUNKLGdCQUFnQjtnQkFDWCxRQUFRO2dCQUdULFNBQVMsdUJBRmpCLElBQUksWUFDSixRQUFRO2dCQUVDLFNBQVM7Z0JBQ2YsVUFBVTtnQkFDYSxpQkFBaUI7O0lBaUI5QztRQURDLFlBQVksQ0FBQyxPQUFPLENBQUM7d0RBS3JCO0lBR0Q7UUFEQyxZQUFZLENBQUMsTUFBTSxDQUFDOzZEQU1wQjtJQXZDVSxnQkFBZ0I7UUFQNUIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLG9CQUFvQjtZQUM5QixJQUFJLEVBQUU7Z0JBQ0osbUJBQW1CLEVBQUUsTUFBTTtnQkFDM0IsYUFBYSxFQUFFLFdBQVc7YUFDM0I7U0FDRixDQUFDO1FBR0csV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUdWLFdBQUEsSUFBSSxFQUFFLENBQUE7UUFDTixXQUFBLFFBQVEsRUFBRSxDQUFBO09BTkYsZ0JBQWdCLENBd0M1QjtJQUFELHVCQUFDO0NBQUEsQUF4Q0QsQ0FBc0Msa0JBQWtCLEdBd0N2RDtTQXhDWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIEluamVjdG9yLFxuICBTZWxmLFxuICBPcHRpb25hbCxcbiAgUmVuZGVyZXIyLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIEFmdGVyQ29udGVudEluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV3JhcHBlZEZvcm1Db250cm9sIH0gZnJvbSAnLi4vY29tbW9uL3dyYXBwZWQtY29udHJvbCc7XG5pbXBvcnQgeyBDbHJEYXRhbGlzdENvbnRhaW5lciB9IGZyb20gJy4vZGF0YWxpc3QtY29udGFpbmVyJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvY3VzU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvZm9jdXMuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhbGlzdElkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGFsaXN0LWlkLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY2xyRGF0YWxpc3RJbnB1dF0nLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItaW5wdXRdJzogJ3RydWUnLFxuICAgICdbYXR0ci5saXN0XSc6ICdsaXN0VmFsdWUnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJEYXRhbGlzdElucHV0IGV4dGVuZHMgV3JhcHBlZEZvcm1Db250cm9sPENsckRhdGFsaXN0Q29udGFpbmVyPiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBAT3B0aW9uYWwoKSBwcml2YXRlIGZvY3VzU2VydmljZTogRm9jdXNTZXJ2aWNlLFxuICAgIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgQFNlbGYoKVxuICAgIEBPcHRpb25hbCgpXG4gICAgY29udHJvbDogTmdDb250cm9sLFxuICAgIHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBkYXRhbGlzdElkU2VydmljZTogRGF0YWxpc3RJZFNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIodmNyLCBDbHJEYXRhbGlzdENvbnRhaW5lciwgaW5qZWN0b3IsIGNvbnRyb2wsIHJlbmRlcmVyLCBlbCk7XG5cbiAgICBpZiAoIXRoaXMuZm9jdXNTZXJ2aWNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsckRhdGFsaXN0IHJlcXVpcmVzIGJlaW5nIHdyYXBwZWQgaW4gPGNsci1kYXRhbGlzdC1jb250YWluZXI+Jyk7XG4gICAgfVxuICB9XG5cbiAgbGlzdFZhbHVlOiBzdHJpbmc7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8vIFN1YnNjcmlwdGlvbnMgaXMgaW5oZXJpdGVkIGZyb20gV3JhcHBlZEZvcm1Db250cm9sLCB1bnN1YnNjcmliZSBpcyBoYW5kbGVkIHRoZXJlXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5kYXRhbGlzdElkU2VydmljZS5pZENoYW5nZS5zdWJzY3JpYmUoaWQgPT4gKHRoaXMubGlzdFZhbHVlID0gaWQpKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdmb2N1cycpXG4gIHRyaWdnZXJGb2N1cygpIHtcbiAgICBpZiAodGhpcy5mb2N1c1NlcnZpY2UpIHtcbiAgICAgIHRoaXMuZm9jdXNTZXJ2aWNlLmZvY3VzZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICB0cmlnZ2VyVmFsaWRhdGlvbigpIHtcbiAgICBzdXBlci50cmlnZ2VyVmFsaWRhdGlvbigpO1xuICAgIGlmICh0aGlzLmZvY3VzU2VydmljZSkge1xuICAgICAgdGhpcy5mb2N1c1NlcnZpY2UuZm9jdXNlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufVxuIl19