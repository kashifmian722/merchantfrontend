var DatagridStringFilter_1;
import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ClrDatagridFilter } from '../../datagrid-filter';
import { CustomFilter } from '../../providers/custom-filter';
import { FiltersProvider, RegisteredFilter } from '../../providers/filters';
import { DomAdapter } from '../../../../utils/dom-adapter/dom-adapter';
import { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';
import { DatagridStringFilterImpl } from './datagrid-string-filter-impl';
import { ClrPopoverToggleService } from '../../../../utils/popover/providers/popover-toggle.service';
let DatagridStringFilter = DatagridStringFilter_1 = class DatagridStringFilter extends DatagridFilterRegistrar {
    constructor(filters, domAdapter, smartToggleService) {
        super(filters);
        this.domAdapter = domAdapter;
        this.smartToggleService = smartToggleService;
        this.subs = [];
        /**
         * Indicates if the filter dropdown is open
         */
        this.open = false;
        this.filterValueChange = new EventEmitter();
    }
    /**
     * Customizable filter logic based on a search text
     */
    set customStringFilter(value) {
        if (value instanceof RegisteredFilter) {
            this.setFilter(value);
        }
        else {
            this.setFilter(new DatagridStringFilterImpl(value));
        }
        if (this.initFilterValue) {
            this.value = this.initFilterValue;
            // This initFilterValue should be used only once after the filter registration
            // So deleting this property value to prevent it from being used again
            // if this customStringFilter property is set again
            delete this.initFilterValue;
        }
    }
    ngAfterViewInit() {
        this.subs.push(this.smartToggleService.openChange.subscribe(openChange => {
            this.open = openChange;
            // The timeout in used because when this executes, the input isn't displayed.
            setTimeout(() => {
                this.domAdapter.focus(this.input.nativeElement);
            });
        }));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.subs.forEach(sub => sub.unsubscribe());
    }
    /**
     * Common setter for the input value
     */
    get value() {
        return this.filter.value;
    }
    set value(value) {
        if (this.filter) {
            if (!value) {
                value = '';
            }
            if (value !== this.filter.value) {
                this.filter.value = value;
                this.filterValueChange.emit(value);
            }
        }
        else {
            this.initFilterValue = value;
        }
    }
};
DatagridStringFilter.ctorParameters = () => [
    { type: FiltersProvider },
    { type: DomAdapter },
    { type: ClrPopoverToggleService }
];
__decorate([
    Input('clrDgStringFilter')
], DatagridStringFilter.prototype, "customStringFilter", null);
__decorate([
    ViewChild('input')
], DatagridStringFilter.prototype, "input", void 0);
__decorate([
    ViewChild(ClrDatagridFilter)
], DatagridStringFilter.prototype, "filterContainer", void 0);
__decorate([
    Input('clrFilterValue')
], DatagridStringFilter.prototype, "value", null);
__decorate([
    Output('clrFilterValueChange')
], DatagridStringFilter.prototype, "filterValueChange", void 0);
DatagridStringFilter = DatagridStringFilter_1 = __decorate([
    Component({
        selector: 'clr-dg-string-filter',
        providers: [{ provide: CustomFilter, useExisting: DatagridStringFilter_1 }],
        template: `
        <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
            <input #input type="text" name="search" [(ngModel)]="value" class="clr-input" />
        </clr-dg-filter>
    `
    })
], DatagridStringFilter);
export { DatagridStringFilter };
//# sourceMappingURL=data:application/json;base64,