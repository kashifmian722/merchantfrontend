/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, ContentChild, ElementRef, Inject, Input, PLATFORM_ID } from '@angular/core';
import { ClrTimelineStepState } from './enums/timeline-step-state.enum';
import { TimelineIconAttributeService } from './providers/timeline-icon-attribute.service';
import { ClrTimelineStepTitle } from './timeline-step-title';
import { isPlatformBrowser } from '@angular/common';
var ClrTimelineStep = /** @class */ (function () {
    function ClrTimelineStep(iconAttributeService, platformId) {
        this.iconAttributeService = iconAttributeService;
        this.platformId = platformId;
        this.state = ClrTimelineStepState.NOT_STARTED;
    }
    ClrTimelineStep.prototype.ngAfterContentInit = function () {
        if (this.stepTitle && isPlatformBrowser(this.platformId)) {
            this.stepTitleText = this.stepTitle.nativeElement.innerText;
        }
    };
    Object.defineProperty(ClrTimelineStep.prototype, "iconAriaCurrent", {
        get: function () {
            return this.state === ClrTimelineStepState.CURRENT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTimelineStep.prototype, "iconAriaLabel", {
        get: function () {
            return this.iconAttributeService.getAriaLabel(this.state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTimelineStep.prototype, "iconShape", {
        get: function () {
            return this.iconAttributeService.getIconShape(this.state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTimelineStep.prototype, "isProcessing", {
        get: function () {
            return this.state === ClrTimelineStepState.PROCESSING;
        },
        enumerable: true,
        configurable: true
    });
    ClrTimelineStep.ctorParameters = function () { return [
        { type: TimelineIconAttributeService },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input('clrState')
    ], ClrTimelineStep.prototype, "state", void 0);
    __decorate([
        ContentChild(ClrTimelineStepTitle, { read: ElementRef })
    ], ClrTimelineStep.prototype, "stepTitle", void 0);
    ClrTimelineStep = __decorate([
        Component({
            selector: 'clr-timeline-step',
            template: "\n        <ng-content select=\"clr-timeline-step-header\"></ng-content>\n        <span class=\"clr-sr-only\">{{stepTitleText}}</span>\n        <ng-container *ngIf=\"!isProcessing; else processing\">\n            <clr-icon\n                    [attr.shape]=\"iconShape\"\n                    [attr.aria-label]=\"iconAriaLabel\"\n                    [attr.aria-current]=\"iconAriaCurrent\">\n            </clr-icon>\n        </ng-container>\n        <div class=\"clr-timeline-step-body\">\n            <ng-content select=\"clr-timeline-step-title\"></ng-content>\n            <ng-content select=\"clr-timeline-step-description\"></ng-content>\n        </div>\n\n        <ng-template #processing>\n            <clr-spinner clrMedium [attr.aria-label]=\"iconAriaLabel\"></clr-spinner>\n        </ng-template>\n    ",
            host: { '[class.clr-timeline-step]': 'true' }
        }),
        __param(1, Inject(PLATFORM_ID))
    ], ClrTimelineStep);
    return ClrTimelineStep;
}());
export { ClrTimelineStep };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtc3RlcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInRpbWVsaW5lL3RpbWVsaW5lLXN0ZXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRzs7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFaEcsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDM0YsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUF5QnBEO0lBT0UseUJBQ1Usb0JBQWtELEVBQzdCLFVBQWtCO1FBRHZDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBOEI7UUFDN0IsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQVI5QixVQUFLLEdBQXlCLG9CQUFvQixDQUFDLFdBQVcsQ0FBQztJQVMvRSxDQUFDO0lBRUosNENBQWtCLEdBQWxCO1FBQ0UsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN4RCxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQztTQUM3RDtJQUNILENBQUM7SUFFRCxzQkFBSSw0Q0FBZTthQUFuQjtZQUNFLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxvQkFBb0IsQ0FBQyxPQUFPLENBQUM7UUFDckQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwwQ0FBYTthQUFqQjtZQUNFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUQsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxzQ0FBUzthQUFiO1lBQ0UsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1RCxDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHlDQUFZO2FBQWhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLG9CQUFvQixDQUFDLFVBQVUsQ0FBQztRQUN4RCxDQUFDOzs7T0FBQTs7Z0JBeEIrQiw0QkFBNEI7Z0JBQ2pCLE1BQU0sdUJBQTlDLE1BQU0sU0FBQyxXQUFXOztJQVJGO1FBQWxCLEtBQUssQ0FBQyxVQUFVLENBQUM7a0RBQWdFO0lBSWxGO1FBREMsWUFBWSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDO3NEQUNuQztJQUxYLGVBQWU7UUF2QjNCLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsUUFBUSxFQUFFLDR5QkFrQlA7WUFDSCxJQUFJLEVBQUUsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLEVBQUU7U0FDOUMsQ0FBQztRQVVHLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO09BVFgsZUFBZSxDQWlDM0I7SUFBRCxzQkFBQztDQUFBLEFBakNELElBaUNDO1NBakNZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDbHJUaW1lbGluZVN0ZXBTdGF0ZSB9IGZyb20gJy4vZW51bXMvdGltZWxpbmUtc3RlcC1zdGF0ZS5lbnVtJztcbmltcG9ydCB7IFRpbWVsaW5lSWNvbkF0dHJpYnV0ZVNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy90aW1lbGluZS1pY29uLWF0dHJpYnV0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENsclRpbWVsaW5lU3RlcFRpdGxlIH0gZnJvbSAnLi90aW1lbGluZS1zdGVwLXRpdGxlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLXRpbWVsaW5lLXN0ZXAnLFxuICB0ZW1wbGF0ZTogYFxuICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJjbHItdGltZWxpbmUtc3RlcC1oZWFkZXJcIj48L25nLWNvbnRlbnQ+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiY2xyLXNyLW9ubHlcIj57e3N0ZXBUaXRsZVRleHR9fTwvc3Bhbj5cbiAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpc1Byb2Nlc3Npbmc7IGVsc2UgcHJvY2Vzc2luZ1wiPlxuICAgICAgICAgICAgPGNsci1pY29uXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLnNoYXBlXT1cImljb25TaGFwZVwiXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmFyaWEtbGFiZWxdPVwiaWNvbkFyaWFMYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmFyaWEtY3VycmVudF09XCJpY29uQXJpYUN1cnJlbnRcIj5cbiAgICAgICAgICAgIDwvY2xyLWljb24+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2xyLXRpbWVsaW5lLXN0ZXAtYm9keVwiPlxuICAgICAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiY2xyLXRpbWVsaW5lLXN0ZXAtdGl0bGVcIj48L25nLWNvbnRlbnQ+XG4gICAgICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJjbHItdGltZWxpbmUtc3RlcC1kZXNjcmlwdGlvblwiPjwvbmctY29udGVudD5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPG5nLXRlbXBsYXRlICNwcm9jZXNzaW5nPlxuICAgICAgICAgICAgPGNsci1zcGlubmVyIGNsck1lZGl1bSBbYXR0ci5hcmlhLWxhYmVsXT1cImljb25BcmlhTGFiZWxcIj48L2Nsci1zcGlubmVyPlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgIGAsXG4gIGhvc3Q6IHsgJ1tjbGFzcy5jbHItdGltZWxpbmUtc3RlcF0nOiAndHJ1ZScgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyVGltZWxpbmVTdGVwIHtcbiAgQElucHV0KCdjbHJTdGF0ZScpIHN0YXRlOiBDbHJUaW1lbGluZVN0ZXBTdGF0ZSA9IENsclRpbWVsaW5lU3RlcFN0YXRlLk5PVF9TVEFSVEVEO1xuXG4gIHB1YmxpYyBzdGVwVGl0bGVUZXh0OiBzdHJpbmc7XG4gIEBDb250ZW50Q2hpbGQoQ2xyVGltZWxpbmVTdGVwVGl0bGUsIHsgcmVhZDogRWxlbWVudFJlZiB9KVxuICBzdGVwVGl0bGU6IEVsZW1lbnRSZWY7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBpY29uQXR0cmlidXRlU2VydmljZTogVGltZWxpbmVJY29uQXR0cmlidXRlU2VydmljZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdFxuICApIHt9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIGlmICh0aGlzLnN0ZXBUaXRsZSAmJiBpc1BsYXRmb3JtQnJvd3Nlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLnN0ZXBUaXRsZVRleHQgPSB0aGlzLnN0ZXBUaXRsZS5uYXRpdmVFbGVtZW50LmlubmVyVGV4dDtcbiAgICB9XG4gIH1cblxuICBnZXQgaWNvbkFyaWFDdXJyZW50KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDbHJUaW1lbGluZVN0ZXBTdGF0ZS5DVVJSRU5UO1xuICB9XG5cbiAgZ2V0IGljb25BcmlhTGFiZWwoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5pY29uQXR0cmlidXRlU2VydmljZS5nZXRBcmlhTGFiZWwodGhpcy5zdGF0ZSk7XG4gIH1cblxuICBnZXQgaWNvblNoYXBlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuaWNvbkF0dHJpYnV0ZVNlcnZpY2UuZ2V0SWNvblNoYXBlKHRoaXMuc3RhdGUpO1xuICB9XG5cbiAgZ2V0IGlzUHJvY2Vzc2luZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ2xyVGltZWxpbmVTdGVwU3RhdGUuUFJPQ0VTU0lORztcbiAgfVxufVxuIl19