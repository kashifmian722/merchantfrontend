import { QueryList } from '@angular/core';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrButton } from './button';
import * as ɵngcc0 from '@angular/core';
export declare class ClrButtonGroup {
    buttonGroupNewService: ButtonInGroupService;
    private toggleService;
    popoverId: string;
    commonStrings: ClrCommonStringsService;
    buttons: QueryList<ClrButton>;
    constructor(buttonGroupNewService: ButtonInGroupService, toggleService: ClrPopoverToggleService, popoverId: string, commonStrings: ClrCommonStringsService);
    popoverPosition: ClrPopoverPosition;
    get open(): boolean;
    inlineButtons: ClrButton[];
    menuButtons: ClrButton[];
    /**
     * 1. Initializes the initial Button Group View
     * 2. Subscribes to changes on the ContentChildren
     *    in case the user content projection changes
     */
    ngAfterContentInit(): void;
    /**
     * Moves the button into the other ViewContainer
     * when an update is received.
     *
     * @param button
     */
    rearrangeButton(button: ClrButton): void;
    /**
     * Author: Eudes
     *
     * Finds the order of a button w.r.t other buttons
     *
     * @param buttonToMove
     * @returns
     */
    getMoveIndex(buttonToMove: ClrButton): number;
    initializeButtons(): void;
    /**
     * Overflow Menu
     *
     */
    private _menuPosition;
    get menuPosition(): string;
    set menuPosition(pos: string);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrButtonGroup>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrButtonGroup, "clr-button-group", never, {
    "menuPosition": "clrMenuPosition";
}, {}, ["buttons"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLWdyb3VwLmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbi1ncm91cC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCdXR0b25Jbkdyb3VwU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9idXR0b24taW4tZ3JvdXAuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyUG9zaXRpb24gfSBmcm9tICcuLi8uLi91dGlscy9wb3BvdmVyL2ludGVyZmFjZXMvcG9wb3Zlci1wb3NpdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9wb3BvdmVyL3Byb3ZpZGVycy9wb3BvdmVyLXRvZ2dsZS5zZXJ2aWNlJztcbmltcG9ydCB7IENsckJ1dHRvbiB9IGZyb20gJy4vYnV0dG9uJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckJ1dHRvbkdyb3VwIHtcbiAgICBidXR0b25Hcm91cE5ld1NlcnZpY2U6IEJ1dHRvbkluR3JvdXBTZXJ2aWNlO1xuICAgIHByaXZhdGUgdG9nZ2xlU2VydmljZTtcbiAgICBwb3BvdmVySWQ6IHN0cmluZztcbiAgICBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZTtcbiAgICBidXR0b25zOiBRdWVyeUxpc3Q8Q2xyQnV0dG9uPjtcbiAgICBjb25zdHJ1Y3RvcihidXR0b25Hcm91cE5ld1NlcnZpY2U6IEJ1dHRvbkluR3JvdXBTZXJ2aWNlLCB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSwgcG9wb3ZlcklkOiBzdHJpbmcsIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlKTtcbiAgICBwb3BvdmVyUG9zaXRpb246IENsclBvcG92ZXJQb3NpdGlvbjtcbiAgICBnZXQgb3BlbigpOiBib29sZWFuO1xuICAgIGlubGluZUJ1dHRvbnM6IENsckJ1dHRvbltdO1xuICAgIG1lbnVCdXR0b25zOiBDbHJCdXR0b25bXTtcbiAgICAvKipcbiAgICAgKiAxLiBJbml0aWFsaXplcyB0aGUgaW5pdGlhbCBCdXR0b24gR3JvdXAgVmlld1xuICAgICAqIDIuIFN1YnNjcmliZXMgdG8gY2hhbmdlcyBvbiB0aGUgQ29udGVudENoaWxkcmVuXG4gICAgICogICAgaW4gY2FzZSB0aGUgdXNlciBjb250ZW50IHByb2plY3Rpb24gY2hhbmdlc1xuICAgICAqL1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE1vdmVzIHRoZSBidXR0b24gaW50byB0aGUgb3RoZXIgVmlld0NvbnRhaW5lclxuICAgICAqIHdoZW4gYW4gdXBkYXRlIGlzIHJlY2VpdmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1dHRvblxuICAgICAqL1xuICAgIHJlYXJyYW5nZUJ1dHRvbihidXR0b246IENsckJ1dHRvbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQXV0aG9yOiBFdWRlc1xuICAgICAqXG4gICAgICogRmluZHMgdGhlIG9yZGVyIG9mIGEgYnV0dG9uIHcuci50IG90aGVyIGJ1dHRvbnNcbiAgICAgKlxuICAgICAqIEBwYXJhbSBidXR0b25Ub01vdmVcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGdldE1vdmVJbmRleChidXR0b25Ub01vdmU6IENsckJ1dHRvbik6IG51bWJlcjtcbiAgICBpbml0aWFsaXplQnV0dG9ucygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIE92ZXJmbG93IE1lbnVcbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgX21lbnVQb3NpdGlvbjtcbiAgICBnZXQgbWVudVBvc2l0aW9uKCk6IHN0cmluZztcbiAgICBzZXQgbWVudVBvc2l0aW9uKHBvczogc3RyaW5nKTtcbn1cbiJdfQ==