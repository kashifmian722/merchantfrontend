import { AfterContentInit, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { ClrAlert } from './alert';
import { MultiAlertService } from './providers/multi-alert.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrAlerts implements AfterContentInit, OnDestroy {
    multiAlertService: MultiAlertService;
    private subscriptions;
    set allAlerts(value: QueryList<ClrAlert>);
    /**
     * Input/Output to support two way binding on current alert index
     */
    set _inputCurrentIndex(index: number);
    currentAlertIndexChange: EventEmitter<number>;
    set currentAlertIndex(index: number);
    get currentAlertIndex(): number;
    /**
     * Input/Output to support two way binding on current alert instance
     */
    set currentAlert(alert: ClrAlert);
    get currentAlert(): ClrAlert;
    currentAlertChange: EventEmitter<ClrAlert>;
    /**
     * Ensure we are only dealing with alerts that have not been closed yet
     */
    get alerts(): ClrAlert[];
    get currentAlertType(): string;
    constructor(multiAlertService: MultiAlertService);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAlerts>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrAlerts, "clr-alerts", never, {
    "_inputCurrentIndex": "clrCurrentAlertIndex";
    "currentAlert": "clrCurrentAlert";
}, {
    "currentAlertIndexChange": "clrCurrentAlertIndexChange";
    "currentAlertChange": "clrCurrentAlertChange";
}, ["allAlerts"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnRzLmQudHMiLCJzb3VyY2VzIjpbImFsZXJ0cy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbHJBbGVydCB9IGZyb20gJy4vYWxlcnQnO1xuaW1wb3J0IHsgTXVsdGlBbGVydFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9tdWx0aS1hbGVydC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckFsZXJ0cyBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgbXVsdGlBbGVydFNlcnZpY2U6IE11bHRpQWxlcnRTZXJ2aWNlO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBzZXQgYWxsQWxlcnRzKHZhbHVlOiBRdWVyeUxpc3Q8Q2xyQWxlcnQ+KTtcbiAgICAvKipcbiAgICAgKiBJbnB1dC9PdXRwdXQgdG8gc3VwcG9ydCB0d28gd2F5IGJpbmRpbmcgb24gY3VycmVudCBhbGVydCBpbmRleFxuICAgICAqL1xuICAgIHNldCBfaW5wdXRDdXJyZW50SW5kZXgoaW5kZXg6IG51bWJlcik7XG4gICAgY3VycmVudEFsZXJ0SW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xuICAgIHNldCBjdXJyZW50QWxlcnRJbmRleChpbmRleDogbnVtYmVyKTtcbiAgICBnZXQgY3VycmVudEFsZXJ0SW5kZXgoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIElucHV0L091dHB1dCB0byBzdXBwb3J0IHR3byB3YXkgYmluZGluZyBvbiBjdXJyZW50IGFsZXJ0IGluc3RhbmNlXG4gICAgICovXG4gICAgc2V0IGN1cnJlbnRBbGVydChhbGVydDogQ2xyQWxlcnQpO1xuICAgIGdldCBjdXJyZW50QWxlcnQoKTogQ2xyQWxlcnQ7XG4gICAgY3VycmVudEFsZXJ0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2xyQWxlcnQ+O1xuICAgIC8qKlxuICAgICAqIEVuc3VyZSB3ZSBhcmUgb25seSBkZWFsaW5nIHdpdGggYWxlcnRzIHRoYXQgaGF2ZSBub3QgYmVlbiBjbG9zZWQgeWV0XG4gICAgICovXG4gICAgZ2V0IGFsZXJ0cygpOiBDbHJBbGVydFtdO1xuICAgIGdldCBjdXJyZW50QWxlcnRUeXBlKCk6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihtdWx0aUFsZXJ0U2VydmljZTogTXVsdGlBbGVydFNlcnZpY2UpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=