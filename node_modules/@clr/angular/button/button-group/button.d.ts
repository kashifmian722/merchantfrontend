import { EventEmitter, TemplateRef } from '@angular/core';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrButton implements LoadingListener {
    buttonInGroupService: ButtonInGroupService;
    private toggleService;
    private _enableService;
    templateRef: TemplateRef<ClrButton>;
    constructor(buttonInGroupService: ButtonInGroupService, toggleService: ClrPopoverToggleService);
    private _inMenu;
    get inMenu(): boolean;
    set inMenu(value: boolean);
    private _classNames;
    get classNames(): string;
    set classNames(value: string);
    private _name;
    get name(): string;
    set name(value: string);
    private _type;
    get type(): string;
    set type(value: string);
    private _id;
    get id(): string;
    set id(value: string);
    private _disabled;
    get disabled(): any;
    set disabled(value: any);
    loading: boolean;
    loadingStateChange(state: ClrLoadingState): void;
    _click: EventEmitter<boolean>;
    emitClick($event: any): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrButton>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrButton, "clr-button", never, {
    "inMenu": "clrInMenu";
    "classNames": "class";
    "name": "name";
    "type": "type";
    "id": "id";
    "disabled": "disabled";
}, {
    "_click": "click";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLmQudHMiLCJzb3VyY2VzIjpbImJ1dHRvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbHJMb2FkaW5nU3RhdGUgfSBmcm9tICcuLi8uLi91dGlscy9sb2FkaW5nL2xvYWRpbmcnO1xuaW1wb3J0IHsgTG9hZGluZ0xpc3RlbmVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvbG9hZGluZy9sb2FkaW5nLWxpc3RlbmVyJztcbmltcG9ydCB7IEJ1dHRvbkluR3JvdXBTZXJ2aWNlIH0gZnJvbSAnLi4vcHJvdmlkZXJzL2J1dHRvbi1pbi1ncm91cC5zZXJ2aWNlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJCdXR0b24gaW1wbGVtZW50cyBMb2FkaW5nTGlzdGVuZXIge1xuICAgIGJ1dHRvbkluR3JvdXBTZXJ2aWNlOiBCdXR0b25Jbkdyb3VwU2VydmljZTtcbiAgICBwcml2YXRlIHRvZ2dsZVNlcnZpY2U7XG4gICAgcHJpdmF0ZSBfZW5hYmxlU2VydmljZTtcbiAgICB0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8Q2xyQnV0dG9uPjtcbiAgICBjb25zdHJ1Y3RvcihidXR0b25Jbkdyb3VwU2VydmljZTogQnV0dG9uSW5Hcm91cFNlcnZpY2UsIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlKTtcbiAgICBwcml2YXRlIF9pbk1lbnU7XG4gICAgZ2V0IGluTWVudSgpOiBib29sZWFuO1xuICAgIHNldCBpbk1lbnUodmFsdWU6IGJvb2xlYW4pO1xuICAgIHByaXZhdGUgX2NsYXNzTmFtZXM7XG4gICAgZ2V0IGNsYXNzTmFtZXMoKTogc3RyaW5nO1xuICAgIHNldCBjbGFzc05hbWVzKHZhbHVlOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgX25hbWU7XG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nO1xuICAgIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgX3R5cGU7XG4gICAgZ2V0IHR5cGUoKTogc3RyaW5nO1xuICAgIHNldCB0eXBlKHZhbHVlOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2lkO1xuICAgIGdldCBpZCgpOiBzdHJpbmc7XG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2Rpc2FibGVkO1xuICAgIGdldCBkaXNhYmxlZCgpOiBhbnk7XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBhbnkpO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgbG9hZGluZ1N0YXRlQ2hhbmdlKHN0YXRlOiBDbHJMb2FkaW5nU3RhdGUpOiB2b2lkO1xuICAgIF9jbGljazogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIGVtaXRDbGljaygkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG59XG4iXX0=