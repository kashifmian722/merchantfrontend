/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, ChangeDetectionStrategy, Input, EventEmitter, Output, Inject, ContentChildren, } from '@angular/core';
import { tap } from 'rxjs/operators';
import { UNIQUE_ID_PROVIDER, UNIQUE_ID } from '../utils/id-generator/id-generator.service';
import { ClrCommonStringsService } from '../utils/i18n/common-strings.service';
import { AccordionService } from './providers/accordion.service';
import { AccordionStatus } from './enums/accordion-status.enum';
import { panelAnimation } from './utils/animation';
import { IfExpandService } from '../utils/conditional/if-expanded.service';
import { ClrAccordionDescription } from './accordion-description';
var ClrAccordionPanel = /** @class */ (function () {
    function ClrAccordionPanel(commonStrings, accordionService, ifExpandService, id) {
        this.commonStrings = commonStrings;
        this.accordionService = accordionService;
        this.ifExpandService = ifExpandService;
        this.id = id;
        this.disabled = false;
        this.panelOpen = false;
        this.panelOpenChange = new EventEmitter();
        this.AccordionStatus = AccordionStatus;
        this.isAccordion = true;
    }
    ClrAccordionPanel.prototype.ngOnInit = function () {
        var _this = this;
        this.panel = this.accordionService.getPanelChanges(this.id).pipe(tap(function (panel) { return _this.emitPanelChange(panel); }));
        this.accordionService.addPanel(this.id, this.panelOpen);
        this.accordionService.togglePanel(this.id, this.panelOpen);
        this.accordionService.disablePanel(this.id, this.disabled);
    };
    ClrAccordionPanel.prototype.ngOnChanges = function (changes) {
        if (this.panel && changes.panelOpen && changes.panelOpen.currentValue !== changes.panelOpen.previousValue) {
            this.accordionService.togglePanel(this.id, changes.panelOpen.currentValue);
        }
        if (this.panel && changes.disabled && changes.disabled.currentValue !== changes.disabled.previousValue) {
            this.accordionService.disablePanel(this.id, changes.disabled.currentValue);
        }
    };
    ClrAccordionPanel.prototype.togglePanel = function () {
        this.accordionService.togglePanel(this.id);
    };
    ClrAccordionPanel.prototype.collapsePanelOnAnimationDone = function (panel) {
        if (!panel.open) {
            this.ifExpandService.expanded = false;
        }
    };
    ClrAccordionPanel.prototype.getPanelStateClasses = function (panel) {
        return "clr-accordion-panel-" + panel.status + " " + (panel.open ? 'clr-accordion-panel-open' : '');
    };
    ClrAccordionPanel.prototype.getAccordionContentId = function (id) {
        return "clr-accordion-content-" + id + "'";
    };
    ClrAccordionPanel.prototype.getAccordionHeaderId = function (id) {
        return "clr-accordion-header-" + id;
    };
    ClrAccordionPanel.prototype.emitPanelChange = function (panel) {
        this.panelOpenChange.emit(panel.open);
        if (panel.open) {
            this.ifExpandService.expanded = true;
        }
    };
    ClrAccordionPanel.ctorParameters = function () { return [
        { type: ClrCommonStringsService },
        { type: AccordionService },
        { type: IfExpandService },
        { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
    ]; };
    __decorate([
        Input('clrAccordionPanelDisabled')
    ], ClrAccordionPanel.prototype, "disabled", void 0);
    __decorate([
        Input('clrAccordionPanelOpen')
    ], ClrAccordionPanel.prototype, "panelOpen", void 0);
    __decorate([
        Output('clrAccordionPanelOpenChange')
    ], ClrAccordionPanel.prototype, "panelOpenChange", void 0);
    __decorate([
        ContentChildren(ClrAccordionDescription)
    ], ClrAccordionPanel.prototype, "accordionDescription", void 0);
    ClrAccordionPanel = __decorate([
        Component({
            selector: 'clr-accordion-panel',
            template: "<ng-container *ngIf=\"panel | async; let panel\">\n  <div *ngIf=\"panel.status !== AccordionStatus.Inactive\" aria-live=\"assertive\" class=\"clr-sr-only\">\n    <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n  </div>\n\n  <div role=\"group\" [ngClass]=\"getPanelStateClasses(panel)\">\n    <div class=\"clr-accordion-header\">\n      <button\n        type=\"button\"\n        class=\"clr-accordion-header-button\"\n        (click)=\"togglePanel()\"\n        [id]=\"getAccordionHeaderId(panel.templateId)\"\n        [disabled]=\"isAccordion && panel.disabled\"\n        [attr.aria-disabled]=\"!isAccordion && panel.disabled\"\n        [attr.aria-controls]=\"getAccordionContentId(panel.templateId)\"\n        [attr.aria-expanded]=\"panel.open\"\n        [class.clr-accordion-header-has-description]=\"(accordionDescription.changes | async)?.length || accordionDescription.length\"\n        #headerButton\n      >\n        <span class=\"clr-sr-only\">\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Complete\">{{commonStrings.keys.success}}</ng-container>\n        </span>\n        <span class=\"clr-accordion-status\">\n          <clr-icon shape=\"angle\" dir=\"right\" class=\"clr-accordion-angle\"></clr-icon>\n          <span class=\"clr-accordion-number\"></span>\n          <clr-icon shape=\"exclamation-circle\" class=\"clr-accordion-error-icon\"></clr-icon>\n          <clr-icon shape=\"check-circle\" class=\"clr-accordion-complete-icon\"></clr-icon>\n        </span>\n        <ng-content select=\"clr-accordion-title, clr-step-title\"></ng-content>\n        <ng-content select=\"clr-accordion-description, clr-step-description\"></ng-content>\n      </button>\n    </div>\n    <div\n      @skipInitialRender\n      role=\"region\"\n      [id]=\"getAccordionContentId(panel.templateId)\"\n      [attr.aria-hidden]=\"!panel.open\"\n      [attr.aria-labelledby]=\"getAccordionHeaderId(panel.templateId)\"\n    >\n      <div\n        *ngIf=\"panel.open\"\n        @toggle\n        (@toggle.done)=\"collapsePanelOnAnimationDone(panel)\"\n        class=\"clr-accordion-content\">\n        <div class=\"clr-accordion-inner-content\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n",
            host: { '[class.clr-accordion-panel]': 'true' },
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: panelAnimation,
            providers: [IfExpandService, UNIQUE_ID_PROVIDER]
        }),
        __param(3, Inject(UNIQUE_ID))
    ], ClrAccordionPanel);
    return ClrAccordionPanel;
}());
export { ClrAccordionPanel };
//# sourceMappingURL=data:application/json;base64,