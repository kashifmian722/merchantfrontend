import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { FiltersProvider } from './filters';
import { Items } from './items';
import { SelectionType } from '../enums/selection-type';
import * as ɵngcc0 from '@angular/core';
export declare class Selection<T = any> {
    private _items;
    private _filters;
    private _zone;
    id: string;
    preserveSelection: boolean;
    private prevSelectionRefs;
    private prevSingleSelectionRef;
    private lockedRefs;
    constructor(_items: Items<T>, _filters: FiltersProvider<T>, _zone: NgZone);
    clearSelection(): void;
    private _selectionType;
    get selectionType(): SelectionType;
    set selectionType(value: SelectionType);
    /** @deprecated since 2.0, remove in 3.0 */
    rowSelectionMode: boolean;
    private get _selectable();
    /**
     * Ignore items changes in the same change detection cycle.
     */
    private debounce;
    /**
     * Subscriptions to the other providers changes.
     */
    private subscriptions;
    /**
     * Cleans up our subscriptions to other providers
     */
    destroy(): void;
    /**
     * The current selection in single selection type
     */
    private _currentSingle;
    get currentSingle(): T;
    set currentSingle(value: T);
    /**
     * The current selection
     */
    private _current;
    get current(): T[];
    set current(value: T[]);
    private _valueCollector;
    updateCurrent(value: T[], emit: boolean): void;
    /**
     * The Observable that lets other classes subscribe to selection changes
     */
    private _change;
    private emitChange;
    get change(): Observable<T[] | T>;
    /**
     * Checks if an item is currently selected
     */
    isSelected(item: T): boolean;
    /**
     * Selects an item
     */
    private selectItem;
    /**
     * Deselects an item
     */
    private deselectItem;
    /**
     * Selects or deselects an item
     */
    setSelected(item: T, selected: boolean): void;
    /**
     * Checks if all currently displayed items are selected
     */
    isAllSelected(): boolean;
    /**
     * Make sure that it could be locked
     *
     * @remark
     * Check also is items.all an array, if not there is no nothing to lock or compare to
     *
     */
    private canItBeLocked;
    /**
     * Lock and unlock item
     */
    lockItem(item: T, lock: boolean): void;
    /**
     * Check is item locked or not by searcing into lockedRefs for entry
     */
    isLocked(item: T): boolean;
    /**
     * Selects or deselects all currently displayed items
     */
    toggleAll(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Selection<any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Selection<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0aW9uLmQudHMiLCJzb3VyY2VzIjpbInNlbGVjdGlvbi5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbHRlcnNQcm92aWRlciB9IGZyb20gJy4vZmlsdGVycyc7XG5pbXBvcnQgeyBJdGVtcyB9IGZyb20gJy4vaXRlbXMnO1xuaW1wb3J0IHsgU2VsZWN0aW9uVHlwZSB9IGZyb20gJy4uL2VudW1zL3NlbGVjdGlvbi10eXBlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFNlbGVjdGlvbjxUID0gYW55PiB7XG4gICAgcHJpdmF0ZSBfaXRlbXM7XG4gICAgcHJpdmF0ZSBfZmlsdGVycztcbiAgICBwcml2YXRlIF96b25lO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcHJlc2VydmVTZWxlY3Rpb246IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBwcmV2U2VsZWN0aW9uUmVmcztcbiAgICBwcml2YXRlIHByZXZTaW5nbGVTZWxlY3Rpb25SZWY7XG4gICAgcHJpdmF0ZSBsb2NrZWRSZWZzO1xuICAgIGNvbnN0cnVjdG9yKF9pdGVtczogSXRlbXM8VD4sIF9maWx0ZXJzOiBGaWx0ZXJzUHJvdmlkZXI8VD4sIF96b25lOiBOZ1pvbmUpO1xuICAgIGNsZWFyU2VsZWN0aW9uKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfc2VsZWN0aW9uVHlwZTtcbiAgICBnZXQgc2VsZWN0aW9uVHlwZSgpOiBTZWxlY3Rpb25UeXBlO1xuICAgIHNldCBzZWxlY3Rpb25UeXBlKHZhbHVlOiBTZWxlY3Rpb25UeXBlKTtcbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMi4wLCByZW1vdmUgaW4gMy4wICovXG4gICAgcm93U2VsZWN0aW9uTW9kZTogYm9vbGVhbjtcbiAgICBwcml2YXRlIGdldCBfc2VsZWN0YWJsZSgpO1xuICAgIC8qKlxuICAgICAqIElnbm9yZSBpdGVtcyBjaGFuZ2VzIGluIHRoZSBzYW1lIGNoYW5nZSBkZXRlY3Rpb24gY3ljbGUuXG4gICAgICovXG4gICAgcHJpdmF0ZSBkZWJvdW5jZTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpcHRpb25zIHRvIHRoZSBvdGhlciBwcm92aWRlcnMgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIG91ciBzdWJzY3JpcHRpb25zIHRvIG90aGVyIHByb3ZpZGVyc1xuICAgICAqL1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBzZWxlY3Rpb24gaW4gc2luZ2xlIHNlbGVjdGlvbiB0eXBlXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY3VycmVudFNpbmdsZTtcbiAgICBnZXQgY3VycmVudFNpbmdsZSgpOiBUO1xuICAgIHNldCBjdXJyZW50U2luZ2xlKHZhbHVlOiBUKTtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBzZWxlY3Rpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIF9jdXJyZW50O1xuICAgIGdldCBjdXJyZW50KCk6IFRbXTtcbiAgICBzZXQgY3VycmVudCh2YWx1ZTogVFtdKTtcbiAgICBwcml2YXRlIF92YWx1ZUNvbGxlY3RvcjtcbiAgICB1cGRhdGVDdXJyZW50KHZhbHVlOiBUW10sIGVtaXQ6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRoZSBPYnNlcnZhYmxlIHRoYXQgbGV0cyBvdGhlciBjbGFzc2VzIHN1YnNjcmliZSB0byBzZWxlY3Rpb24gY2hhbmdlc1xuICAgICAqL1xuICAgIHByaXZhdGUgX2NoYW5nZTtcbiAgICBwcml2YXRlIGVtaXRDaGFuZ2U7XG4gICAgZ2V0IGNoYW5nZSgpOiBPYnNlcnZhYmxlPFRbXSB8IFQ+O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbiBpdGVtIGlzIGN1cnJlbnRseSBzZWxlY3RlZFxuICAgICAqL1xuICAgIGlzU2VsZWN0ZWQoaXRlbTogVCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2VsZWN0cyBhbiBpdGVtXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZWxlY3RJdGVtO1xuICAgIC8qKlxuICAgICAqIERlc2VsZWN0cyBhbiBpdGVtXG4gICAgICovXG4gICAgcHJpdmF0ZSBkZXNlbGVjdEl0ZW07XG4gICAgLyoqXG4gICAgICogU2VsZWN0cyBvciBkZXNlbGVjdHMgYW4gaXRlbVxuICAgICAqL1xuICAgIHNldFNlbGVjdGVkKGl0ZW06IFQsIHNlbGVjdGVkOiBib29sZWFuKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYWxsIGN1cnJlbnRseSBkaXNwbGF5ZWQgaXRlbXMgYXJlIHNlbGVjdGVkXG4gICAgICovXG4gICAgaXNBbGxTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE1ha2Ugc3VyZSB0aGF0IGl0IGNvdWxkIGJlIGxvY2tlZFxuICAgICAqXG4gICAgICogQHJlbWFya1xuICAgICAqIENoZWNrIGFsc28gaXMgaXRlbXMuYWxsIGFuIGFycmF5LCBpZiBub3QgdGhlcmUgaXMgbm8gbm90aGluZyB0byBsb2NrIG9yIGNvbXBhcmUgdG9cbiAgICAgKlxuICAgICAqL1xuICAgIHByaXZhdGUgY2FuSXRCZUxvY2tlZDtcbiAgICAvKipcbiAgICAgKiBMb2NrIGFuZCB1bmxvY2sgaXRlbVxuICAgICAqL1xuICAgIGxvY2tJdGVtKGl0ZW06IFQsIGxvY2s6IGJvb2xlYW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlzIGl0ZW0gbG9ja2VkIG9yIG5vdCBieSBzZWFyY2luZyBpbnRvIGxvY2tlZFJlZnMgZm9yIGVudHJ5XG4gICAgICovXG4gICAgaXNMb2NrZWQoaXRlbTogVCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogU2VsZWN0cyBvciBkZXNlbGVjdHMgYWxsIGN1cnJlbnRseSBkaXNwbGF5ZWQgaXRlbXNcbiAgICAgKi9cbiAgICB0b2dnbGVBbGwoKTogdm9pZDtcbn1cbiJdfQ==