/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { InjectionToken, Injector, OnInit, Type, ViewContainerRef, Renderer2, ElementRef, OnDestroy } from '@angular/core';
import { Subscription } from 'rxjs';
import { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';
import { ControlIdService } from './providers/control-id.service';
import { NgControlService } from './providers/ng-control.service';
import { NgControl } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class WrappedFormControl<W extends DynamicWrapper> implements OnInit, OnDestroy {
    protected vcr: ViewContainerRef;
    protected wrapperType: Type<W>;
    private ngControl;
    protected ngControlService: NgControlService;
    private ifErrorService;
    private controlClassService;
    private markControlService;
    protected renderer: Renderer2;
    protected el: ElementRef<any>;
    protected subscriptions: Subscription[];
    protected index: number;
    protected controlIdService: ControlIdService;
    _id: string;
    constructor(vcr: ViewContainerRef, wrapperType: Type<W>, injector: Injector, ngControl: NgControl, renderer: Renderer2, el: ElementRef);
    get id(): string;
    set id(value: string);
    triggerValidation(): void;
    private _containerInjector;
    protected getProviderFromContainer<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T): T;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private listenForErrorStateChanges;
    private setAriaDescribedBy;
    private getAriaDescribedById;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WrappedFormControl<any>>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<WrappedFormControl<any>, never, never, {
    "id": "id";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlZC1jb250cm9sLmQudHMiLCJzb3VyY2VzIjpbIndyYXBwZWQtY29udHJvbC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIEluamVjdG9yLCBPbkluaXQsIFR5cGUsIFZpZXdDb250YWluZXJSZWYsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IER5bmFtaWNXcmFwcGVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvaG9zdC13cmFwcGluZy9keW5hbWljLXdyYXBwZXInO1xuaW1wb3J0IHsgQ29udHJvbElkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbnRyb2wtaWQuc2VydmljZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvbmctY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFdyYXBwZWRGb3JtQ29udHJvbDxXIGV4dGVuZHMgRHluYW1pY1dyYXBwZXI+IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCB2Y3I6IFZpZXdDb250YWluZXJSZWY7XG4gICAgcHJvdGVjdGVkIHdyYXBwZXJUeXBlOiBUeXBlPFc+O1xuICAgIHByaXZhdGUgbmdDb250cm9sO1xuICAgIHByb3RlY3RlZCBuZ0NvbnRyb2xTZXJ2aWNlOiBOZ0NvbnRyb2xTZXJ2aWNlO1xuICAgIHByaXZhdGUgaWZFcnJvclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjb250cm9sQ2xhc3NTZXJ2aWNlO1xuICAgIHByaXZhdGUgbWFya0NvbnRyb2xTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCBlbDogRWxlbWVudFJlZjxhbnk+O1xuICAgIHByb3RlY3RlZCBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXTtcbiAgICBwcm90ZWN0ZWQgaW5kZXg6IG51bWJlcjtcbiAgICBwcm90ZWN0ZWQgY29udHJvbElkU2VydmljZTogQ29udHJvbElkU2VydmljZTtcbiAgICBfaWQ6IHN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcih2Y3I6IFZpZXdDb250YWluZXJSZWYsIHdyYXBwZXJUeXBlOiBUeXBlPFc+LCBpbmplY3RvcjogSW5qZWN0b3IsIG5nQ29udHJvbDogTmdDb250cm9sLCByZW5kZXJlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZik7XG4gICAgZ2V0IGlkKCk6IHN0cmluZztcbiAgICBzZXQgaWQodmFsdWU6IHN0cmluZyk7XG4gICAgdHJpZ2dlclZhbGlkYXRpb24oKTogdm9pZDtcbiAgICBwcml2YXRlIF9jb250YWluZXJJbmplY3RvcjtcbiAgICBwcm90ZWN0ZWQgZ2V0UHJvdmlkZXJGcm9tQ29udGFpbmVyPFQ+KHRva2VuOiBUeXBlPFQ+IHwgSW5qZWN0aW9uVG9rZW48VD4sIG5vdEZvdW5kVmFsdWU/OiBUKTogVDtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JFcnJvclN0YXRlQ2hhbmdlcztcbiAgICBwcml2YXRlIHNldEFyaWFEZXNjcmliZWRCeTtcbiAgICBwcml2YXRlIGdldEFyaWFEZXNjcmliZWRCeUlkO1xufVxuIl19