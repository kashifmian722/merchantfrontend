import { OnDestroy, AfterViewInit, ElementRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { DynamicWrapper } from '../../utils/host-wrapping/dynamic-wrapper';
import { IfErrorService } from '../common/if-error/if-error.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { FocusService } from '../common/providers/focus.service';
import { LayoutService } from '../common/providers/layout.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { ClrLabel } from '../common/label';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverPosition } from '../../utils/popover/interfaces/popover-position.interface';
import { ViewManagerService } from './providers/view-manager.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDateContainer implements DynamicWrapper, OnDestroy, AfterViewInit {
    private toggleService;
    private dateNavigationService;
    private datepickerEnabledService;
    private dateFormControlService;
    commonStrings: ClrCommonStringsService;
    private ifErrorService;
    private focusService;
    private viewManagerService;
    private controlClassService;
    private layoutService;
    private ngControlService;
    _dynamic: boolean;
    invalid: boolean;
    focus: boolean;
    control: NgControl;
    label: ClrLabel;
    set clrPosition(position: string);
    get popoverPosition(): ClrPopoverPosition;
    get open(): boolean;
    private toggleButton;
    set actionButton(button: ElementRef);
    private subscriptions;
    constructor(toggleService: ClrPopoverToggleService, dateNavigationService: DateNavigationService, datepickerEnabledService: DatepickerEnabledService, dateFormControlService: DateFormControlService, commonStrings: ClrCommonStringsService, ifErrorService: IfErrorService, focusService: FocusService, viewManagerService: ViewManagerService, controlClassService: ControlClassService, layoutService: LayoutService, ngControlService: NgControlService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /**
     * Returns the classes to apply to the control
     */
    controlClass(): string;
    /**
     * Determines if the control needs to add grid classes
     */
    addGrid(): boolean;
    /**
     * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.
     */
    get isEnabled(): boolean;
    /**
     * Return if Datepicker is diabled or not as Form Control
     */
    get isInputDateDisabled(): boolean;
    /**
     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.
     */
    private initializeCalendar;
    /**
     * Unsubscribe from subscriptions.
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDateContainer>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDateContainer, "clr-date-container", never, {
    "clrPosition": "clrPosition";
}, {}, ["label"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jb250YWluZXIuZC50cyIsInNvdXJjZXMiOlsiZGF0ZS1jb250YWluZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHluYW1pY1dyYXBwZXIgfSBmcm9tICcuLi8uLi91dGlscy9ob3N0LXdyYXBwaW5nL2R5bmFtaWMtd3JhcHBlcic7XG5pbXBvcnQgeyBJZkVycm9yU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9pZi1lcnJvci9pZi1lcnJvci5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRyb2xDbGFzc1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vcHJvdmlkZXJzL2NvbnRyb2wtY2xhc3Muc2VydmljZSc7XG5pbXBvcnQgeyBGb2N1c1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vcHJvdmlkZXJzL2ZvY3VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTGF5b3V0U2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvbGF5b3V0LnNlcnZpY2UnO1xuaW1wb3J0IHsgTmdDb250cm9sU2VydmljZSB9IGZyb20gJy4uL2NvbW1vbi9wcm92aWRlcnMvbmctY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IENsckxhYmVsIH0gZnJvbSAnLi4vY29tbW9uL2xhYmVsJztcbmltcG9ydCB7IERhdGVGb3JtQ29udHJvbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRlLWZvcm0tY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVOYXZpZ2F0aW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGUtbmF2aWdhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IERhdGVwaWNrZXJFbmFibGVkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGVwaWNrZXItZW5hYmxlZC5zZXJ2aWNlJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IENsclBvcG92ZXJQb3NpdGlvbiB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvaW50ZXJmYWNlcy9wb3BvdmVyLXBvc2l0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBWaWV3TWFuYWdlclNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy92aWV3LW1hbmFnZXIuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJEYXRlQ29udGFpbmVyIGltcGxlbWVudHMgRHluYW1pY1dyYXBwZXIsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSB0b2dnbGVTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0ZU5hdmlnYXRpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0ZXBpY2tlckVuYWJsZWRTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGF0ZUZvcm1Db250cm9sU2VydmljZTtcbiAgICBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZTtcbiAgICBwcml2YXRlIGlmRXJyb3JTZXJ2aWNlO1xuICAgIHByaXZhdGUgZm9jdXNTZXJ2aWNlO1xuICAgIHByaXZhdGUgdmlld01hbmFnZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgY29udHJvbENsYXNzU2VydmljZTtcbiAgICBwcml2YXRlIGxheW91dFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBuZ0NvbnRyb2xTZXJ2aWNlO1xuICAgIF9keW5hbWljOiBib29sZWFuO1xuICAgIGludmFsaWQ6IGJvb2xlYW47XG4gICAgZm9jdXM6IGJvb2xlYW47XG4gICAgY29udHJvbDogTmdDb250cm9sO1xuICAgIGxhYmVsOiBDbHJMYWJlbDtcbiAgICBzZXQgY2xyUG9zaXRpb24ocG9zaXRpb246IHN0cmluZyk7XG4gICAgZ2V0IHBvcG92ZXJQb3NpdGlvbigpOiBDbHJQb3BvdmVyUG9zaXRpb247XG4gICAgZ2V0IG9wZW4oKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIHRvZ2dsZUJ1dHRvbjtcbiAgICBzZXQgYWN0aW9uQnV0dG9uKGJ1dHRvbjogRWxlbWVudFJlZik7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zO1xuICAgIGNvbnN0cnVjdG9yKHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLCBkYXRlTmF2aWdhdGlvblNlcnZpY2U6IERhdGVOYXZpZ2F0aW9uU2VydmljZSwgZGF0ZXBpY2tlckVuYWJsZWRTZXJ2aWNlOiBEYXRlcGlja2VyRW5hYmxlZFNlcnZpY2UsIGRhdGVGb3JtQ29udHJvbFNlcnZpY2U6IERhdGVGb3JtQ29udHJvbFNlcnZpY2UsIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlLCBpZkVycm9yU2VydmljZTogSWZFcnJvclNlcnZpY2UsIGZvY3VzU2VydmljZTogRm9jdXNTZXJ2aWNlLCB2aWV3TWFuYWdlclNlcnZpY2U6IFZpZXdNYW5hZ2VyU2VydmljZSwgY29udHJvbENsYXNzU2VydmljZTogQ29udHJvbENsYXNzU2VydmljZSwgbGF5b3V0U2VydmljZTogTGF5b3V0U2VydmljZSwgbmdDb250cm9sU2VydmljZTogTmdDb250cm9sU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjbGFzc2VzIHRvIGFwcGx5IHRvIHRoZSBjb250cm9sXG4gICAgICovXG4gICAgY29udHJvbENsYXNzKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBjb250cm9sIG5lZWRzIHRvIGFkZCBncmlkIGNsYXNzZXNcbiAgICAgKi9cbiAgICBhZGRHcmlkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpZiB0aGUgRGF0ZXBpY2tlciBpcyBlbmFibGVkIG9yIG5vdC4gSWYgZGlzYWJsZWQsIGhpZGVzIHRoZSBkYXRlcGlja2VyIHRyaWdnZXIuXG4gICAgICovXG4gICAgZ2V0IGlzRW5hYmxlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFJldHVybiBpZiBEYXRlcGlja2VyIGlzIGRpYWJsZWQgb3Igbm90IGFzIEZvcm0gQ29udHJvbFxuICAgICAqL1xuICAgIGdldCBpc0lucHV0RGF0ZURpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIHRoZSB1c2VyIGlucHV0IGFuZCBJbml0aWFsaXplcyB0aGUgQ2FsZW5kYXIgZXZlcnl0aW1lIHRoZSBkYXRlcGlja2VyIHBvcG92ZXIgaXMgb3Blbi5cbiAgICAgKi9cbiAgICBwcml2YXRlIGluaXRpYWxpemVDYWxlbmRhcjtcbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZSBmcm9tIHN1YnNjcmlwdGlvbnMuXG4gICAgICovXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==