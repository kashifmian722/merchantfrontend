import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ChangeDetectorRef, ElementRef, Component, EventEmitter, Input, Optional, Output, AfterViewInit, ContentChildren, QueryList, OnInit, OnDestroy, } from '@angular/core';
// providers
import { AlertIconAndTypesService } from './providers/icon-and-types.service';
import { MultiAlertService } from './providers/multi-alert.service';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import { ClrAlertText } from './alert-text';
let ClrAlert = class ClrAlert {
    constructor(iconService, cdr, multiAlertService, commonStrings, ariaLiveService) {
        this.iconService = iconService;
        this.cdr = cdr;
        this.multiAlertService = multiAlertService;
        this.commonStrings = commonStrings;
        this.ariaLiveService = ariaLiveService;
        this.subscriptions = [];
        this.isSmall = false;
        this.closable = true;
        this.isAppLevel = false;
        // Aria
        this.clrCloseButtonAriaLabel = this.commonStrings.keys.alertCloseButtonAriaLabel;
        this._closed = false;
        this._closedChanged = new EventEmitter(false);
        /**
         * clrPolite is not used in the code. Is here just to provide
         * code complition and also mark component what type AriaLive
         * will be used.
         */
        /** @deprecated since 3.0, remove in 4.0 */
        this.polite = true;
    }
    ngOnInit() {
        if (this.multiAlertService) {
            this.subscriptions.push(this.multiAlertService.changes.subscribe(() => {
                this.hidden = this.multiAlertService.currentAlert !== this;
            }));
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    ngAfterViewInit() {
        // Announce the first time the alert is render if it is not hidden
        this.announceAriaLiveMessage();
    }
    set alertType(val) {
        this.iconService.alertType = val;
    }
    get alertType() {
        return this.iconService.alertType;
    }
    /**
     * There is an order on how the attributes will take effect.
     * Assertive, Off, Polite.
     *
     * Polite is default if non is passed.
     *
     * In the case of setting all of them to true. Assertive will be used.
     *
     */
    get ariaLive() {
        if (isBooleanAttributeSet(this.assertive)) {
            return ClrAriaLivePoliteness.assertive;
        }
        if (isBooleanAttributeSet(this.off)) {
            return ClrAriaLivePoliteness.off;
        }
        return ClrAriaLivePoliteness.polite;
    }
    set alertIconShape(value) {
        this.iconService.alertIconShape = value;
    }
    get alertClass() {
        return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;
    }
    /**
     * This handle the find what content to be annonced withing the aria-live container
     * alerts that are hidden will be ignored.
     *
     * @remark
     * We depend on the ClrAlertText Directive to find and parse the alert messages.
     * Also this require the HTML markup for the alert to be
     * ```html
     * <div class="alert" role="alert">
     *    <div class="alert-items">
     *        <div class="alert-item static">
     *            <span class="alert-text">
     *                 ...
     *            </span>
     *        </div>
     *    </div>
     * </div>
     * ```
     */
    announceAriaLiveMessage() {
        if (!this.hidden && this.alertTexts.length) {
            const message = this.alertTexts.map(alertText => alertText.nativeElement.textContent).join(' ');
            // Don't call announce when there is nothing to say
            if (message) {
                this.ariaLiveService.announce(message, this.ariaLive);
            }
        }
    }
    set hidden(value) {
        if (value !== this._hidden) {
            this._hidden = value;
            this.cdr.detectChanges();
        }
    }
    get hidden() {
        return this._hidden;
    }
    close() {
        if (!this.closable) {
            return;
        }
        this._closed = true;
        if (this.multiAlertService) {
            this.multiAlertService.close();
        }
        this._closedChanged.emit(true);
    }
    open() {
        this._closed = false;
        this._closedChanged.emit(false);
    }
};
ClrAlert.ctorParameters = () => [
    { type: AlertIconAndTypesService },
    { type: ChangeDetectorRef },
    { type: MultiAlertService, decorators: [{ type: Optional }] },
    { type: ClrCommonStringsService },
    { type: ClrAriaLiveService }
];
__decorate([
    Input('clrAlertSizeSmall')
], ClrAlert.prototype, "isSmall", void 0);
__decorate([
    Input('clrAlertClosable')
], ClrAlert.prototype, "closable", void 0);
__decorate([
    Input('clrAlertAppLevel')
], ClrAlert.prototype, "isAppLevel", void 0);
__decorate([
    Input()
], ClrAlert.prototype, "clrCloseButtonAriaLabel", void 0);
__decorate([
    Input('clrAlertClosed')
], ClrAlert.prototype, "_closed", void 0);
__decorate([
    Output('clrAlertClosedChange')
], ClrAlert.prototype, "_closedChanged", void 0);
__decorate([
    Input('clrAlertType')
], ClrAlert.prototype, "alertType", null);
__decorate([
    Input('clrPolite')
], ClrAlert.prototype, "polite", void 0);
__decorate([
    Input('clrAssertive')
], ClrAlert.prototype, "assertive", void 0);
__decorate([
    Input('clrOff')
], ClrAlert.prototype, "off", void 0);
__decorate([
    Input('clrAlertIcon')
], ClrAlert.prototype, "alertIconShape", null);
__decorate([
    ContentChildren(ClrAlertText, { descendants: true, read: ElementRef })
], ClrAlert.prototype, "alertTexts", void 0);
ClrAlert = __decorate([
    Component({
        selector: 'clr-alert',
        providers: [AlertIconAndTypesService, ClrAriaLiveService],
        template: "<!--\n  ~ Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n    *ngIf=\"!_closed\"\n    class=\"alert\"\n    [ngClass]=\"alertClass\"\n    [class.alert-hidden]=\"hidden\"\n    [class.alert-sm]=\"isSmall\"\n    [class.alert-app-level]=\"isAppLevel\">\n    <div class=\"alert-items\">\n        <ng-content></ng-content>\n    </div>\n    <button\n        type=\"button\"\n        class=\"close\"\n        *ngIf=\"closable\"\n        (click)=\"close()\"\n        [attr.aria-label]=\"clrCloseButtonAriaLabel\"\n        >\n        <clr-icon shape=\"close\"></clr-icon>\n    </button>\n</div>\n",
        styles: [':host { display: block; }']
    }),
    __param(2, Optional())
], ClrAlert);
export { ClrAlert };
//# sourceMappingURL=data:application/json;base64,