import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Optional, ContentChild, ViewChild, Input, } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { IfErrorService } from '../common/if-error/if-error.service';
import { ControlClassService } from '../common/providers/control-class.service';
import { ControlIdService } from '../common/providers/control-id.service';
import { FocusService } from '../common/providers/focus.service';
import { LayoutService } from '../common/providers/layout.service';
import { NgControlService } from '../common/providers/ng-control.service';
import { ClrLabel } from '../common/label';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { LocaleHelperService } from './providers/locale-helper.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrPopoverPositions } from '../../utils/popover/enums/positions.enum';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ViewManagerService } from './providers/view-manager.service';
var ClrDateContainer = /** @class */ (function () {
    function ClrDateContainer(toggleService, dateNavigationService, datepickerEnabledService, dateFormControlService, commonStrings, ifErrorService, focusService, viewManagerService, controlClassService, layoutService, ngControlService) {
        var _this = this;
        this.toggleService = toggleService;
        this.dateNavigationService = dateNavigationService;
        this.datepickerEnabledService = datepickerEnabledService;
        this.dateFormControlService = dateFormControlService;
        this.commonStrings = commonStrings;
        this.ifErrorService = ifErrorService;
        this.focusService = focusService;
        this.viewManagerService = viewManagerService;
        this.controlClassService = controlClassService;
        this.layoutService = layoutService;
        this.ngControlService = ngControlService;
        this._dynamic = false;
        this.invalid = false;
        this.focus = false;
        this.subscriptions = [];
        this.subscriptions.push(this.focusService.focusChange.subscribe(function (state) {
            _this.focus = state;
        }), this.ngControlService.controlChanges.subscribe(function (control) {
            _this.control = control;
        }), this.toggleService.openChange.subscribe(function (state) {
            _this.dateFormControlService.markAsTouched();
        }));
    }
    Object.defineProperty(ClrDateContainer.prototype, "clrPosition", {
        set: function (position) {
            if (position && ClrPopoverPositions[position]) {
                this.viewManagerService.position = ClrPopoverPositions[position];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "popoverPosition", {
        get: function () {
            return this.viewManagerService.position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "open", {
        get: function () {
            return this.toggleService.open;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "actionButton", {
        set: function (button) {
            this.toggleButton = button;
        },
        enumerable: true,
        configurable: true
    });
    ClrDateContainer.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.push(this.ifErrorService.statusChanges.subscribe(function (invalid) {
            _this.invalid = invalid;
        }));
    };
    ClrDateContainer.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.subscriptions.push(this.toggleService.openChange.subscribe(function (open) {
            if (open) {
                _this.initializeCalendar();
            }
            else {
                _this.toggleButton.nativeElement.focus();
            }
        }));
    };
    /**
     * Returns the classes to apply to the control
     */
    ClrDateContainer.prototype.controlClass = function () {
        return this.controlClassService.controlClass(this.invalid, this.addGrid());
    };
    /**
     * Determines if the control needs to add grid classes
     */
    ClrDateContainer.prototype.addGrid = function () {
        return this.layoutService && !this.layoutService.isVertical();
    };
    Object.defineProperty(ClrDateContainer.prototype, "isEnabled", {
        /**
         * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.
         */
        get: function () {
            return this.datepickerEnabledService.isEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDateContainer.prototype, "isInputDateDisabled", {
        /**
         * Return if Datepicker is diabled or not as Form Control
         */
        get: function () {
            /* clrForm wrapper or without clrForm */
            return ((this.control && this.control.disabled) || (this.dateFormControlService && this.dateFormControlService.disabled));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.
     */
    ClrDateContainer.prototype.initializeCalendar = function () {
        this.dateNavigationService.initializeCalendar();
    };
    /**
     * Unsubscribe from subscriptions.
     */
    ClrDateContainer.prototype.ngOnDestroy = function () {
        this.subscriptions.map(function (sub) { return sub.unsubscribe(); });
    };
    ClrDateContainer.ctorParameters = function () { return [
        { type: ClrPopoverToggleService },
        { type: DateNavigationService },
        { type: DatepickerEnabledService },
        { type: DateFormControlService },
        { type: ClrCommonStringsService },
        { type: IfErrorService },
        { type: FocusService },
        { type: ViewManagerService },
        { type: ControlClassService },
        { type: LayoutService, decorators: [{ type: Optional }] },
        { type: NgControlService }
    ]; };
    __decorate([
        ContentChild(ClrLabel)
    ], ClrDateContainer.prototype, "label", void 0);
    __decorate([
        Input('clrPosition')
    ], ClrDateContainer.prototype, "clrPosition", null);
    __decorate([
        ViewChild('actionButton')
    ], ClrDateContainer.prototype, "actionButton", null);
    ClrDateContainer = __decorate([
        Component({
            selector: 'clr-date-container',
            template: "\n      <ng-content select=\"label\"></ng-content>\n      <label *ngIf=\"!label && addGrid()\"></label>\n      <div class=\"clr-control-container\" [ngClass]=\"controlClass()\">\n        <div class=\"clr-input-wrapper\" clrPopoverAnchor>\n          <div class=\"clr-input-group\" [class.clr-focus]=\"focus\">\n            <ng-content select=\"[clrDate]\"></ng-content>\n            <button #actionButton\n                    type=\"button\"\n                    clrPopoverOpenCloseButton\n                    class=\"clr-input-group-icon-action\"\n                    [attr.title]=\"commonStrings.keys.datepickerToggle\"\n                    [attr.aria-label]=\"commonStrings.keys.datepickerToggle\"\n                    [disabled]=\"isInputDateDisabled\"\n                    *ngIf=\"isEnabled\">\n              <clr-icon shape=\"calendar\"></clr-icon>\n            </button>\n            <clr-datepicker-view-manager *clrPopoverContent=\"open at popoverPosition; outsideClickToClose: true; scrollToClose: true\" clrFocusTrap></clr-datepicker-view-manager>\n          </div>\n          <clr-icon class=\"clr-validate-icon\" shape=\"exclamation-circle\"></clr-icon>\n        </div>\n        <ng-content select=\"clr-control-helper\" *ngIf=\"!invalid\"></ng-content>\n        <ng-content select=\"clr-control-error\" *ngIf=\"invalid\"></ng-content>\n      </div>\n    ",
            providers: [
                ControlIdService,
                ClrPopoverToggleService,
                ClrPopoverEventsService,
                ClrPopoverPositionService,
                LocaleHelperService,
                IfErrorService,
                ControlClassService,
                FocusService,
                NgControlService,
                DateIOService,
                DateNavigationService,
                DatepickerEnabledService,
                DateFormControlService,
                ViewManagerService,
            ],
            host: {
                '[class.clr-form-control-disabled]': 'isInputDateDisabled',
                '[class.clr-form-control]': 'true',
                '[class.clr-row]': 'addGrid()',
            }
        }),
        __param(9, Optional())
    ], ClrDateContainer);
    return ClrDateContainer;
}());
export { ClrDateContainer };
//# sourceMappingURL=data:application/json;base64,