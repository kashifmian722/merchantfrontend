import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Page } from './providers/page';
import { ClrDatagridPageSize } from './datagrid-page-size';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridPagination implements OnDestroy, OnInit {
    page: Page;
    commonStrings: ClrCommonStringsService;
    detailService: DetailService;
    _pageSizeComponent: ClrDatagridPageSize;
    currentPageInputRef: ElementRef;
    constructor(page: Page, commonStrings: ClrCommonStringsService, detailService: DetailService);
    /**********
     * Subscription to the Page service for page changes.
     * Note: this only emits after the datagrid is initialized/stabalized and the page changes.
     */
    ngOnInit(): void;
    /**
     * Subscription to the page service changes
     */
    private _pageSubscription;
    ngOnDestroy(): void;
    /**
     * Page size
     */
    get pageSize(): number;
    disableCurrentPageInput: boolean;
    set pageSize(size: number);
    /**
     * Total items (needed to guess the last page)
     */
    get totalItems(): number;
    set totalItems(total: number);
    /**
     * Last page
     */
    get lastPage(): number;
    set lastPage(last: number);
    /**
     * Current page
     */
    get currentPage(): number;
    set currentPage(page: number);
    currentChanged: EventEmitter<number>;
    /**
     * Moves to the previous page if it exists
     */
    previous(): void;
    /**
     * Moves to the next page if it exists
     */
    next(): void;
    /**
     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed
     */
    get firstItem(): number;
    /**
     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed
     */
    get lastItem(): number;
    /**
     * Conditionally adds page numbers before and after the current page
     */
    get middlePages(): number[];
    /**
     * We only update the pagination's current page on blur of the input field, or
     * when they press enter.
     */
    updateCurrentPage(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridPagination>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridPagination, "clr-dg-pagination", never, {
    "pageSize": "clrDgPageSize";
    "totalItems": "clrDgTotalItems";
    "lastPage": "clrDgLastPage";
    "currentPage": "clrDgPage";
    "disableCurrentPageInput": "clrDgPageInputDisabled";
}, {
    "currentChanged": "clrDgPageChange";
}, ["_pageSizeComponent"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcGFnaW5hdGlvbi5kLnRzIiwic291cmNlcyI6WyJkYXRhZ3JpZC1wYWdpbmF0aW9uLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICcuL3Byb3ZpZGVycy9wYWdlJztcbmltcG9ydCB7IENsckRhdGFncmlkUGFnZVNpemUgfSBmcm9tICcuL2RhdGFncmlkLXBhZ2Utc2l6ZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBEZXRhaWxTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGV0YWlsLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyRGF0YWdyaWRQYWdpbmF0aW9uIGltcGxlbWVudHMgT25EZXN0cm95LCBPbkluaXQge1xuICAgIHBhZ2U6IFBhZ2U7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgZGV0YWlsU2VydmljZTogRGV0YWlsU2VydmljZTtcbiAgICBfcGFnZVNpemVDb21wb25lbnQ6IENsckRhdGFncmlkUGFnZVNpemU7XG4gICAgY3VycmVudFBhZ2VJbnB1dFJlZjogRWxlbWVudFJlZjtcbiAgICBjb25zdHJ1Y3RvcihwYWdlOiBQYWdlLCBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSwgZGV0YWlsU2VydmljZTogRGV0YWlsU2VydmljZSk7XG4gICAgLyoqKioqKioqKipcbiAgICAgKiBTdWJzY3JpcHRpb24gdG8gdGhlIFBhZ2Ugc2VydmljZSBmb3IgcGFnZSBjaGFuZ2VzLlxuICAgICAqIE5vdGU6IHRoaXMgb25seSBlbWl0cyBhZnRlciB0aGUgZGF0YWdyaWQgaXMgaW5pdGlhbGl6ZWQvc3RhYmFsaXplZCBhbmQgdGhlIHBhZ2UgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmlwdGlvbiB0byB0aGUgcGFnZSBzZXJ2aWNlIGNoYW5nZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIF9wYWdlU3Vic2NyaXB0aW9uO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUGFnZSBzaXplXG4gICAgICovXG4gICAgZ2V0IHBhZ2VTaXplKCk6IG51bWJlcjtcbiAgICBkaXNhYmxlQ3VycmVudFBhZ2VJbnB1dDogYm9vbGVhbjtcbiAgICBzZXQgcGFnZVNpemUoc2l6ZTogbnVtYmVyKTtcbiAgICAvKipcbiAgICAgKiBUb3RhbCBpdGVtcyAobmVlZGVkIHRvIGd1ZXNzIHRoZSBsYXN0IHBhZ2UpXG4gICAgICovXG4gICAgZ2V0IHRvdGFsSXRlbXMoKTogbnVtYmVyO1xuICAgIHNldCB0b3RhbEl0ZW1zKHRvdGFsOiBudW1iZXIpO1xuICAgIC8qKlxuICAgICAqIExhc3QgcGFnZVxuICAgICAqL1xuICAgIGdldCBsYXN0UGFnZSgpOiBudW1iZXI7XG4gICAgc2V0IGxhc3RQYWdlKGxhc3Q6IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBwYWdlXG4gICAgICovXG4gICAgZ2V0IGN1cnJlbnRQYWdlKCk6IG51bWJlcjtcbiAgICBzZXQgY3VycmVudFBhZ2UocGFnZTogbnVtYmVyKTtcbiAgICBjdXJyZW50Q2hhbmdlZDogRXZlbnRFbWl0dGVyPG51bWJlcj47XG4gICAgLyoqXG4gICAgICogTW92ZXMgdG8gdGhlIHByZXZpb3VzIHBhZ2UgaWYgaXQgZXhpc3RzXG4gICAgICovXG4gICAgcHJldmlvdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0byB0aGUgbmV4dCBwYWdlIGlmIGl0IGV4aXN0c1xuICAgICAqL1xuICAgIG5leHQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbmRleCBvZiB0aGUgZmlyc3QgaXRlbSBkaXNwbGF5ZWQgb24gdGhlIGN1cnJlbnQgcGFnZSwgc3RhcnRpbmcgYXQgMCwgLTEgaWYgbm9uZSBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICBnZXQgZmlyc3RJdGVtKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJbmRleCBvZiB0aGUgbGFzdCBpdGVtIGRpc3BsYXllZCBvbiB0aGUgY3VycmVudCBwYWdlLCBzdGFydGluZyBhdCAwLCAtMSBpZiBub25lIGRpc3BsYXllZFxuICAgICAqL1xuICAgIGdldCBsYXN0SXRlbSgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogQ29uZGl0aW9uYWxseSBhZGRzIHBhZ2UgbnVtYmVycyBiZWZvcmUgYW5kIGFmdGVyIHRoZSBjdXJyZW50IHBhZ2VcbiAgICAgKi9cbiAgICBnZXQgbWlkZGxlUGFnZXMoKTogbnVtYmVyW107XG4gICAgLyoqXG4gICAgICogV2Ugb25seSB1cGRhdGUgdGhlIHBhZ2luYXRpb24ncyBjdXJyZW50IHBhZ2Ugb24gYmx1ciBvZiB0aGUgaW5wdXQgZmllbGQsIG9yXG4gICAgICogd2hlbiB0aGV5IHByZXNzIGVudGVyLlxuICAgICAqL1xuICAgIHVwZGF0ZUN1cnJlbnRQYWdlKGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuIl19