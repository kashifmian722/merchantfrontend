import { ElementRef, AfterViewInit } from '@angular/core';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrSpinner implements AfterViewInit {
    private el;
    private ariaLiveService;
    constructor(el: ElementRef, ariaLiveService: ClrAriaLiveService);
    ngAfterViewInit(): void;
    /**
     * Default class for all spinners. This class is always true
     */
    get spinnerClass(): boolean;
    private _inline;
    get inlineClass(): boolean;
    set clrInline(value: boolean | string);
    private _inverse;
    get inverseClass(): boolean;
    set clrInverse(value: boolean | string);
    /**
     * By default all spinners are Large. (spinner-lg)
     * To change the size you need to use set clrSmall or clrMedium to TRUE/
     */
    /**
     * Small
     */
    private _small;
    get smallClass(): boolean;
    set clrSmall(value: boolean | string);
    /**
     * When clrSmall & clrMedium are set both to true.
     * The CSS with high priority will be small - so medium size will be ignored.
     *
     * For this reason if clrSmall is set we won't add clrMedium class.
     *
     * NOTE: This is dictated by the CSS rules.
     * DON'T USE clrSmall & clrMedium to toggle classes. This could change without notice.
     *
     * Also there is no logical need to have both of them set to TRUE or FALSE.
     */
    private _medium;
    get mediumClass(): boolean;
    set clrMedium(value: boolean | string);
    /**
     * By default aria-live will be set to `polite` .
     * To change is it you need to set clrAssertive or clrOff to TRUE
     *
     * There is priority:
     *   Default: polite
     *   Asertive
     *   Off
     *
     * In case when for some reason you have clrAssertive=TRUE and clrOff=TRUE,
     * we gonna set `assertive` as value of aria-live.
     *
     */
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    get ariaLive(): ClrAriaLivePoliteness;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrSpinner>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrSpinner, "clr-spinner", never, {
    "clrInline": "clrInline";
    "clrInverse": "clrInverse";
    "clrSmall": "clrSmall";
    "clrMedium": "clrMedium";
    "assertive": "clrAssertive";
    "off": "clrOff";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5kLnRzIiwic291cmNlcyI6WyJzcGlubmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsckFyaWFMaXZlU2VydmljZSwgQ2xyQXJpYUxpdmVQb2xpdGVuZXNzIH0gZnJvbSAnLi4vLi4vdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJTcGlubmVyIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIGFyaWFMaXZlU2VydmljZTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgYXJpYUxpdmVTZXJ2aWNlOiBDbHJBcmlhTGl2ZVNlcnZpY2UpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIERlZmF1bHQgY2xhc3MgZm9yIGFsbCBzcGlubmVycy4gVGhpcyBjbGFzcyBpcyBhbHdheXMgdHJ1ZVxuICAgICAqL1xuICAgIGdldCBzcGlubmVyQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9pbmxpbmU7XG4gICAgZ2V0IGlubGluZUNsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNscklubGluZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfaW52ZXJzZTtcbiAgICBnZXQgaW52ZXJzZUNsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsckludmVyc2UodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQgYWxsIHNwaW5uZXJzIGFyZSBMYXJnZS4gKHNwaW5uZXItbGcpXG4gICAgICogVG8gY2hhbmdlIHRoZSBzaXplIHlvdSBuZWVkIHRvIHVzZSBzZXQgY2xyU21hbGwgb3IgY2xyTWVkaXVtIHRvIFRSVUUvXG4gICAgICovXG4gICAgLyoqXG4gICAgICogU21hbGxcbiAgICAgKi9cbiAgICBwcml2YXRlIF9zbWFsbDtcbiAgICBnZXQgc21hbGxDbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJTbWFsbCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogV2hlbiBjbHJTbWFsbCAmIGNsck1lZGl1bSBhcmUgc2V0IGJvdGggdG8gdHJ1ZS5cbiAgICAgKiBUaGUgQ1NTIHdpdGggaGlnaCBwcmlvcml0eSB3aWxsIGJlIHNtYWxsIC0gc28gbWVkaXVtIHNpemUgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogRm9yIHRoaXMgcmVhc29uIGlmIGNsclNtYWxsIGlzIHNldCB3ZSB3b24ndCBhZGQgY2xyTWVkaXVtIGNsYXNzLlxuICAgICAqXG4gICAgICogTk9URTogVGhpcyBpcyBkaWN0YXRlZCBieSB0aGUgQ1NTIHJ1bGVzLlxuICAgICAqIERPTidUIFVTRSBjbHJTbWFsbCAmIGNsck1lZGl1bSB0byB0b2dnbGUgY2xhc3Nlcy4gVGhpcyBjb3VsZCBjaGFuZ2Ugd2l0aG91dCBub3RpY2UuXG4gICAgICpcbiAgICAgKiBBbHNvIHRoZXJlIGlzIG5vIGxvZ2ljYWwgbmVlZCB0byBoYXZlIGJvdGggb2YgdGhlbSBzZXQgdG8gVFJVRSBvciBGQUxTRS5cbiAgICAgKi9cbiAgICBwcml2YXRlIF9tZWRpdW07XG4gICAgZ2V0IG1lZGl1bUNsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsck1lZGl1bSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogQnkgZGVmYXVsdCBhcmlhLWxpdmUgd2lsbCBiZSBzZXQgdG8gYHBvbGl0ZWAgLlxuICAgICAqIFRvIGNoYW5nZSBpcyBpdCB5b3UgbmVlZCB0byBzZXQgY2xyQXNzZXJ0aXZlIG9yIGNsck9mZiB0byBUUlVFXG4gICAgICpcbiAgICAgKiBUaGVyZSBpcyBwcmlvcml0eTpcbiAgICAgKiAgIERlZmF1bHQ6IHBvbGl0ZVxuICAgICAqICAgQXNlcnRpdmVcbiAgICAgKiAgIE9mZlxuICAgICAqXG4gICAgICogSW4gY2FzZSB3aGVuIGZvciBzb21lIHJlYXNvbiB5b3UgaGF2ZSBjbHJBc3NlcnRpdmU9VFJVRSBhbmQgY2xyT2ZmPVRSVUUsXG4gICAgICogd2UgZ29ubmEgc2V0IGBhc3NlcnRpdmVgIGFzIHZhbHVlIG9mIGFyaWEtbGl2ZS5cbiAgICAgKlxuICAgICAqL1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBhc3NlcnRpdmU6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIG9mZjogYm9vbGVhbjtcbiAgICBnZXQgYXJpYUxpdmUoKTogQ2xyQXJpYUxpdmVQb2xpdGVuZXNzO1xufVxuIl19