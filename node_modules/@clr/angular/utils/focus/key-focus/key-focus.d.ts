import { ElementRef } from '@angular/core';
import { ClrFocusDirection } from './enums/focus-direction.enum';
import { FocusableItem } from './interfaces';
import * as ɵngcc0 from '@angular/core';
export declare class ClrKeyFocus {
    private elementRef;
    constructor(elementRef: ElementRef);
    direction: ClrFocusDirection;
    focusOnLoad: boolean;
    private focusChange;
    private clrKeyFocusItems;
    private _focusableItems;
    set focusableItems(elements: Array<FocusableItem>);
    get nativeElement(): HTMLElement;
    get focusableItems(): Array<FocusableItem>;
    private _current;
    get current(): number;
    set current(value: number);
    get currentItem(): FocusableItem;
    get currentItemElement(): HTMLElement;
    focusCurrent(): void;
    moveTo(position: number): void;
    private subscriptions;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    handleKeyboardEvent(event: KeyboardEvent): void;
    setClickedItemCurrent(event: any): void;
    private getItemPosition;
    private positionInRange;
    private currentFocusIsNotFirstItem;
    private currentFocusIsNotLastItem;
    private initializeFocus;
    private listenForItemUpdates;
    private nextKeyPressed;
    private prevKeyPressed;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrKeyFocus>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrKeyFocus, "[clrKeyFocus]", never, {
    "direction": "clrDirection";
    "focusOnLoad": "clrFocusOnLoad";
    "focusableItems": "clrKeyFocus";
}, {
    "focusChange": "clrFocusChange";
}, ["clrKeyFocusItems"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5LWZvY3VzLmQudHMiLCJzb3VyY2VzIjpbImtleS1mb2N1cy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDbHJGb2N1c0RpcmVjdGlvbiB9IGZyb20gJy4vZW51bXMvZm9jdXMtZGlyZWN0aW9uLmVudW0nO1xuaW1wb3J0IHsgRm9jdXNhYmxlSXRlbSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJLZXlGb2N1cyB7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpO1xuICAgIGRpcmVjdGlvbjogQ2xyRm9jdXNEaXJlY3Rpb247XG4gICAgZm9jdXNPbkxvYWQ6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBmb2N1c0NoYW5nZTtcbiAgICBwcml2YXRlIGNscktleUZvY3VzSXRlbXM7XG4gICAgcHJpdmF0ZSBfZm9jdXNhYmxlSXRlbXM7XG4gICAgc2V0IGZvY3VzYWJsZUl0ZW1zKGVsZW1lbnRzOiBBcnJheTxGb2N1c2FibGVJdGVtPik7XG4gICAgZ2V0IG5hdGl2ZUVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG4gICAgZ2V0IGZvY3VzYWJsZUl0ZW1zKCk6IEFycmF5PEZvY3VzYWJsZUl0ZW0+O1xuICAgIHByaXZhdGUgX2N1cnJlbnQ7XG4gICAgZ2V0IGN1cnJlbnQoKTogbnVtYmVyO1xuICAgIHNldCBjdXJyZW50KHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBjdXJyZW50SXRlbSgpOiBGb2N1c2FibGVJdGVtO1xuICAgIGdldCBjdXJyZW50SXRlbUVsZW1lbnQoKTogSFRNTEVsZW1lbnQ7XG4gICAgZm9jdXNDdXJyZW50KCk6IHZvaWQ7XG4gICAgbW92ZVRvKHBvc2l0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGhhbmRsZUtleWJvYXJkRXZlbnQoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkO1xuICAgIHNldENsaWNrZWRJdGVtQ3VycmVudChldmVudDogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGdldEl0ZW1Qb3NpdGlvbjtcbiAgICBwcml2YXRlIHBvc2l0aW9uSW5SYW5nZTtcbiAgICBwcml2YXRlIGN1cnJlbnRGb2N1c0lzTm90Rmlyc3RJdGVtO1xuICAgIHByaXZhdGUgY3VycmVudEZvY3VzSXNOb3RMYXN0SXRlbTtcbiAgICBwcml2YXRlIGluaXRpYWxpemVGb2N1cztcbiAgICBwcml2YXRlIGxpc3RlbkZvckl0ZW1VcGRhdGVzO1xuICAgIHByaXZhdGUgbmV4dEtleVByZXNzZWQ7XG4gICAgcHJpdmF0ZSBwcmV2S2V5UHJlc3NlZDtcbn1cbiJdfQ==