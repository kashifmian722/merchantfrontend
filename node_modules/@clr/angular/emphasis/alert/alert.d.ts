import { ChangeDetectorRef, ElementRef, EventEmitter, AfterViewInit, QueryList, OnInit, OnDestroy } from '@angular/core';
import { AlertIconAndTypesService } from './providers/icon-and-types.service';
import { MultiAlertService } from './providers/multi-alert.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrAlert implements OnInit, OnDestroy, AfterViewInit {
    private iconService;
    private cdr;
    private multiAlertService;
    private commonStrings;
    private ariaLiveService;
    private subscriptions;
    constructor(iconService: AlertIconAndTypesService, cdr: ChangeDetectorRef, multiAlertService: MultiAlertService, commonStrings: ClrCommonStringsService, ariaLiveService: ClrAriaLiveService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    isSmall: boolean;
    closable: boolean;
    isAppLevel: boolean;
    clrCloseButtonAriaLabel: string;
    _closed: boolean;
    _closedChanged: EventEmitter<boolean>;
    set alertType(val: string);
    get alertType(): string;
    /**
     * clrPolite is not used in the code. Is here just to provide
     * code complition and also mark component what type AriaLive
     * will be used.
     */
    /** @deprecated since 3.0, remove in 4.0 */
    polite: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    /**
     * There is an order on how the attributes will take effect.
     * Assertive, Off, Polite.
     *
     * Polite is default if non is passed.
     *
     * In the case of setting all of them to true. Assertive will be used.
     *
     */
    get ariaLive(): ClrAriaLivePoliteness;
    set alertIconShape(value: string);
    get alertClass(): string;
    alertTexts: QueryList<ElementRef>;
    /**
     * This handle the find what content to be annonced withing the aria-live container
     * alerts that are hidden will be ignored.
     *
     * @remark
     * We depend on the ClrAlertText Directive to find and parse the alert messages.
     * Also this require the HTML markup for the alert to be
     * ```html
     * <div class="alert" role="alert">
     *    <div class="alert-items">
     *        <div class="alert-item static">
     *            <span class="alert-text">
     *                 ...
     *            </span>
     *        </div>
     *    </div>
     * </div>
     * ```
     */
    private announceAriaLiveMessage;
    private _hidden;
    set hidden(value: boolean);
    get hidden(): boolean;
    close(): void;
    open(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAlert>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrAlert, "clr-alert", never, {
    "isSmall": "clrAlertSizeSmall";
    "closable": "clrAlertClosable";
    "isAppLevel": "clrAlertAppLevel";
    "clrCloseButtonAriaLabel": "clrCloseButtonAriaLabel";
    "_closed": "clrAlertClosed";
    "polite": "clrPolite";
    "alertType": "clrAlertType";
    "alertIconShape": "clrAlertIcon";
    "assertive": "clrAssertive";
    "off": "clrOff";
}, {
    "_closedChanged": "clrAlertClosedChange";
}, ["alertTexts"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuZC50cyIsInNvdXJjZXMiOlsiYWxlcnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEFmdGVyVmlld0luaXQsIFF1ZXJ5TGlzdCwgT25Jbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZXJ0SWNvbkFuZFR5cGVzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2ljb24tYW5kLXR5cGVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTXVsdGlBbGVydFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9tdWx0aS1hbGVydC5zZXJ2aWNlJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IENsckFyaWFMaXZlU2VydmljZSwgQ2xyQXJpYUxpdmVQb2xpdGVuZXNzIH0gZnJvbSAnLi4vLi4vdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJBbGVydCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGljb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgY2RyO1xuICAgIHByaXZhdGUgbXVsdGlBbGVydFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjb21tb25TdHJpbmdzO1xuICAgIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlO1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihpY29uU2VydmljZTogQWxlcnRJY29uQW5kVHlwZXNTZXJ2aWNlLCBjZHI6IENoYW5nZURldGVjdG9yUmVmLCBtdWx0aUFsZXJ0U2VydmljZTogTXVsdGlBbGVydFNlcnZpY2UsIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlLCBhcmlhTGl2ZVNlcnZpY2U6IENsckFyaWFMaXZlU2VydmljZSk7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIGlzU21hbGw6IGJvb2xlYW47XG4gICAgY2xvc2FibGU6IGJvb2xlYW47XG4gICAgaXNBcHBMZXZlbDogYm9vbGVhbjtcbiAgICBjbHJDbG9zZUJ1dHRvbkFyaWFMYWJlbDogc3RyaW5nO1xuICAgIF9jbG9zZWQ6IGJvb2xlYW47XG4gICAgX2Nsb3NlZENoYW5nZWQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBzZXQgYWxlcnRUeXBlKHZhbDogc3RyaW5nKTtcbiAgICBnZXQgYWxlcnRUeXBlKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBjbHJQb2xpdGUgaXMgbm90IHVzZWQgaW4gdGhlIGNvZGUuIElzIGhlcmUganVzdCB0byBwcm92aWRlXG4gICAgICogY29kZSBjb21wbGl0aW9uIGFuZCBhbHNvIG1hcmsgY29tcG9uZW50IHdoYXQgdHlwZSBBcmlhTGl2ZVxuICAgICAqIHdpbGwgYmUgdXNlZC5cbiAgICAgKi9cbiAgICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gICAgcG9saXRlOiBib29sZWFuO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBhc3NlcnRpdmU6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIG9mZjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBUaGVyZSBpcyBhbiBvcmRlciBvbiBob3cgdGhlIGF0dHJpYnV0ZXMgd2lsbCB0YWtlIGVmZmVjdC5cbiAgICAgKiBBc3NlcnRpdmUsIE9mZiwgUG9saXRlLlxuICAgICAqXG4gICAgICogUG9saXRlIGlzIGRlZmF1bHQgaWYgbm9uIGlzIHBhc3NlZC5cbiAgICAgKlxuICAgICAqIEluIHRoZSBjYXNlIG9mIHNldHRpbmcgYWxsIG9mIHRoZW0gdG8gdHJ1ZS4gQXNzZXJ0aXZlIHdpbGwgYmUgdXNlZC5cbiAgICAgKlxuICAgICAqL1xuICAgIGdldCBhcmlhTGl2ZSgpOiBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3M7XG4gICAgc2V0IGFsZXJ0SWNvblNoYXBlKHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCBhbGVydENsYXNzKCk6IHN0cmluZztcbiAgICBhbGVydFRleHRzOiBRdWVyeUxpc3Q8RWxlbWVudFJlZj47XG4gICAgLyoqXG4gICAgICogVGhpcyBoYW5kbGUgdGhlIGZpbmQgd2hhdCBjb250ZW50IHRvIGJlIGFubm9uY2VkIHdpdGhpbmcgdGhlIGFyaWEtbGl2ZSBjb250YWluZXJcbiAgICAgKiBhbGVydHMgdGhhdCBhcmUgaGlkZGVuIHdpbGwgYmUgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEByZW1hcmtcbiAgICAgKiBXZSBkZXBlbmQgb24gdGhlIENsckFsZXJ0VGV4dCBEaXJlY3RpdmUgdG8gZmluZCBhbmQgcGFyc2UgdGhlIGFsZXJ0IG1lc3NhZ2VzLlxuICAgICAqIEFsc28gdGhpcyByZXF1aXJlIHRoZSBIVE1MIG1hcmt1cCBmb3IgdGhlIGFsZXJ0IHRvIGJlXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydFwiIHJvbGU9XCJhbGVydFwiPlxuICAgICAqICAgIDxkaXYgY2xhc3M9XCJhbGVydC1pdGVtc1wiPlxuICAgICAqICAgICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQtaXRlbSBzdGF0aWNcIj5cbiAgICAgKiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiYWxlcnQtdGV4dFwiPlxuICAgICAqICAgICAgICAgICAgICAgICAuLi5cbiAgICAgKiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgKiAgICAgICAgPC9kaXY+XG4gICAgICogICAgPC9kaXY+XG4gICAgICogPC9kaXY+XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHJpdmF0ZSBhbm5vdW5jZUFyaWFMaXZlTWVzc2FnZTtcbiAgICBwcml2YXRlIF9oaWRkZW47XG4gICAgc2V0IGhpZGRlbih2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGhpZGRlbigpOiBib29sZWFuO1xuICAgIGNsb3NlKCk6IHZvaWQ7XG4gICAgb3BlbigpOiB2b2lkO1xufVxuIl19