/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, Optional, ElementRef, AfterViewInit } from '@angular/core';
import { ControlIdService } from './providers/control-id.service';
import { ClrAriaLiveService } from '../../utils/a11y/aria-live.service';
import { ControlClassService } from './providers/control-class.service';
let ClrControlError = class ClrControlError {
    constructor(controlIdService, controlClassService, ariaLiveService, el) {
        this.controlIdService = controlIdService;
        this.controlClassService = controlClassService;
        this.ariaLiveService = ariaLiveService;
        this.el = el;
    }
    /** @deprecated since 3.0, remove in 4.0 - ariaLiveService */
    ngAfterViewInit() {
        /**
         * The way we render elements inside the `clr-control-container make this
         * component announce itself without been visible on the screen.
         *
         * The check below try to guess is clr-controll-error used in some of the
         * cases mention above and prevent us from announcing without the need of that.
         *
         * This change won't create breaking change - but will make aria live announcment
         * work only when the component is used outside forms or some of the components.
         *
         * This is temporary solution - until better is found.
         *
         */
        if (this.controlClassService === null) {
            this.ariaLiveService.announce(this.el.nativeElement);
        }
    }
};
ClrControlError.ctorParameters = () => [
    { type: ControlIdService, decorators: [{ type: Optional }] },
    { type: ControlClassService, decorators: [{ type: Optional }] },
    { type: ClrAriaLiveService },
    { type: ElementRef }
];
ClrControlError = __decorate([
    Component({
        providers: [ClrAriaLiveService],
        selector: 'clr-control-error',
        template: `
    <ng-content></ng-content>
    `,
        host: {
            '[class.clr-subtext]': 'true',
            '[id]': 'controlIdService?.id + "-error"',
        }
    }),
    __param(0, Optional()),
    __param(1, Optional())
], ClrControlError);
export { ClrControlError };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2xyL2FuZ3VsYXIvIiwic291cmNlcyI6WyJmb3Jtcy9jb21tb24vZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRzs7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBYXhFLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFDMUIsWUFDcUIsZ0JBQWtDLEVBQ2xDLG1CQUF3QyxFQUNuRCxlQUFtQyxFQUNuQyxFQUFjO1FBSEgscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBQ25ELG9CQUFlLEdBQWYsZUFBZSxDQUFvQjtRQUNuQyxPQUFFLEdBQUYsRUFBRSxDQUFZO0lBQ3JCLENBQUM7SUFFSiw2REFBNkQ7SUFDN0QsZUFBZTtRQUNiOzs7Ozs7Ozs7Ozs7V0FZRztRQUNILElBQUksSUFBSSxDQUFDLG1CQUFtQixLQUFLLElBQUksRUFBRTtZQUNyQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ3REO0lBQ0gsQ0FBQztDQUNGLENBQUE7O1lBekJ3QyxnQkFBZ0IsdUJBQXBELFFBQVE7WUFDK0IsbUJBQW1CLHVCQUExRCxRQUFRO1lBQ2dCLGtCQUFrQjtZQUMvQixVQUFVOztBQUxiLGVBQWU7SUFYM0IsU0FBUyxDQUFDO1FBQ1QsU0FBUyxFQUFFLENBQUMsa0JBQWtCLENBQUM7UUFDL0IsUUFBUSxFQUFFLG1CQUFtQjtRQUM3QixRQUFRLEVBQUU7O0tBRVA7UUFDSCxJQUFJLEVBQUU7WUFDSixxQkFBcUIsRUFBRSxNQUFNO1lBQzdCLE1BQU0sRUFBRSxpQ0FBaUM7U0FDMUM7S0FDRixDQUFDO0lBR0csV0FBQSxRQUFRLEVBQUUsQ0FBQTtJQUNWLFdBQUEsUUFBUSxFQUFFLENBQUE7R0FIRixlQUFlLENBMkIzQjtTQTNCWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBPcHRpb25hbCwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbElkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbnRyb2wtaWQuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJBcmlhTGl2ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcbmltcG9ydCB7IENvbnRyb2xDbGFzc1NlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9jb250cm9sLWNsYXNzLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgcHJvdmlkZXJzOiBbQ2xyQXJpYUxpdmVTZXJ2aWNlXSxcbiAgc2VsZWN0b3I6ICdjbHItY29udHJvbC1lcnJvcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIGAsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmNsci1zdWJ0ZXh0XSc6ICd0cnVlJyxcbiAgICAnW2lkXSc6ICdjb250cm9sSWRTZXJ2aWNlPy5pZCArIFwiLWVycm9yXCInLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJDb250cm9sRXJyb3IgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHVibGljIGNvbnRyb2xJZFNlcnZpY2U6IENvbnRyb2xJZFNlcnZpY2UsXG4gICAgQE9wdGlvbmFsKCkgcHVibGljIGNvbnRyb2xDbGFzc1NlcnZpY2U6IENvbnRyb2xDbGFzc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBhcmlhTGl2ZVNlcnZpY2U6IENsckFyaWFMaXZlU2VydmljZSxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmXG4gICkge31cblxuICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wIC0gYXJpYUxpdmVTZXJ2aWNlICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgd2F5IHdlIHJlbmRlciBlbGVtZW50cyBpbnNpZGUgdGhlIGBjbHItY29udHJvbC1jb250YWluZXIgbWFrZSB0aGlzXG4gICAgICogY29tcG9uZW50IGFubm91bmNlIGl0c2VsZiB3aXRob3V0IGJlZW4gdmlzaWJsZSBvbiB0aGUgc2NyZWVuLlxuICAgICAqXG4gICAgICogVGhlIGNoZWNrIGJlbG93IHRyeSB0byBndWVzcyBpcyBjbHItY29udHJvbGwtZXJyb3IgdXNlZCBpbiBzb21lIG9mIHRoZVxuICAgICAqIGNhc2VzIG1lbnRpb24gYWJvdmUgYW5kIHByZXZlbnQgdXMgZnJvbSBhbm5vdW5jaW5nIHdpdGhvdXQgdGhlIG5lZWQgb2YgdGhhdC5cbiAgICAgKlxuICAgICAqIFRoaXMgY2hhbmdlIHdvbid0IGNyZWF0ZSBicmVha2luZyBjaGFuZ2UgLSBidXQgd2lsbCBtYWtlIGFyaWEgbGl2ZSBhbm5vdW5jbWVudFxuICAgICAqIHdvcmsgb25seSB3aGVuIHRoZSBjb21wb25lbnQgaXMgdXNlZCBvdXRzaWRlIGZvcm1zIG9yIHNvbWUgb2YgdGhlIGNvbXBvbmVudHMuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHRlbXBvcmFyeSBzb2x1dGlvbiAtIHVudGlsIGJldHRlciBpcyBmb3VuZC5cbiAgICAgKlxuICAgICAqL1xuICAgIGlmICh0aGlzLmNvbnRyb2xDbGFzc1NlcnZpY2UgPT09IG51bGwpIHtcbiAgICAgIHRoaXMuYXJpYUxpdmVTZXJ2aWNlLmFubm91bmNlKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuICB9XG59XG4iXX0=