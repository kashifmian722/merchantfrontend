/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 * /*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.

 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./vertical-nav.module";
import * as i2 from "@angular/common";
import * as i3 from "../../icon/icon.module";
import * as i4 from "../../utils/conditional/conditional.module";
import * as i5 from "../../utils/focus/focus-on-view-init/focus-on-view-init.module";
import * as i6 from "../../utils/focus/focus-on-view-init/focus-on-view-init.provider";
var ClrVerticalNavModuleNgFactory = i0.ɵcmf(i1.ClrVerticalNavModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.ClrIconModule, i3.ClrIconModule, []), i0.ɵmpd(1073742336, i4.ClrConditionalModule, i4.ClrConditionalModule, []), i0.ɵmpd(1073742336, i5.ClrFocusOnViewInitModule, i5.ClrFocusOnViewInitModule, []), i0.ɵmpd(1073742336, i1.ClrVerticalNavModule, i1.ClrVerticalNavModule, []), i0.ɵmpd(256, i6.FOCUS_ON_VIEW_INIT, true, [])]); });
export { ClrVerticalNavModuleNgFactory as ClrVerticalNavModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVydGljYWwtbmF2Lm1vZHVsZS5uZ2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2xyL2FuZ3VsYXIvIiwic291cmNlcyI6WyJsYXlvdXQvdmVydGljYWwtbmF2L3ZlcnRpY2FsLW5hdi5tb2R1bGUubmdmYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpMCBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGkxIGZyb20gJy4vdmVydGljYWwtbmF2Lm1vZHVsZSc7XG5pbXBvcnQgKiBhcyBpMiBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0ICogYXMgaTMgZnJvbSAnLi4vLi4vaWNvbi9pY29uJztcbmltcG9ydCAqIGFzIGk0IGZyb20gJy4uLy4uL3V0aWxzL2NvbmRpdGlvbmFsL2lmLWFjdGl2ZS5kaXJlY3RpdmUnO1xuaW1wb3J0ICogYXMgaTUgZnJvbSAnLi4vLi4vdXRpbHMvY29uZGl0aW9uYWwvaWYtb3Blbi5kaXJlY3RpdmUnO1xuaW1wb3J0ICogYXMgaTYgZnJvbSAnLi4vLi4vdXRpbHMvY29uZGl0aW9uYWwvaWYtZXhwYW5kZWQuZGlyZWN0aXZlJztcbmltcG9ydCAqIGFzIGk3IGZyb20gJy4uLy4uL3V0aWxzL2ZvY3VzL2ZvY3VzLW9uLXZpZXctaW5pdC9mb2N1cy1vbi12aWV3LWluaXQnO1xuaW1wb3J0ICogYXMgaTggZnJvbSAnLi92ZXJ0aWNhbC1uYXYnO1xuaW1wb3J0ICogYXMgaTkgZnJvbSAnLi92ZXJ0aWNhbC1uYXYtbGluayc7XG5pbXBvcnQgKiBhcyBpMTAgZnJvbSAnLi92ZXJ0aWNhbC1uYXYtZ3JvdXAnO1xuaW1wb3J0ICogYXMgaTExIGZyb20gJy4vdmVydGljYWwtbmF2LWdyb3VwLWNoaWxkcmVuJztcbmltcG9ydCAqIGFzIGkxMiBmcm9tICcuL3ZlcnRpY2FsLW5hdi1pY29uJztcbmltcG9ydCAqIGFzIGkxMyBmcm9tICcuLi8uLi9pY29uL2ljb24ubW9kdWxlJztcbmltcG9ydCAqIGFzIGkxNCBmcm9tICcuLi8uLi91dGlscy9jb25kaXRpb25hbC9jb25kaXRpb25hbC5tb2R1bGUnO1xuaW1wb3J0ICogYXMgaTE1IGZyb20gJy4uLy4uL3V0aWxzL2ZvY3VzL2ZvY3VzLW9uLXZpZXctaW5pdC9mb2N1cy1vbi12aWV3LWluaXQubW9kdWxlJztcbmV4cG9ydCBjb25zdCBDbHJWZXJ0aWNhbE5hdk1vZHVsZU5nRmFjdG9yeTppMC5OZ01vZHVsZUZhY3Rvcnk8aTEuQ2xyVmVydGljYWxOYXZNb2R1bGU+ID0gKG51bGwgYXMgYW55KTtcbnZhciBfZGVjbDBfMDppMi5OZ0NsYXNzID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzE6aTIuTmdDb21wb25lbnRPdXRsZXQgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMjppMi5OZ0Zvck9mPGFueSxhbnk+ID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzM6aTIuTmdJZjxhbnk+ID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzQ6aTIuTmdUZW1wbGF0ZU91dGxldCA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF81OmkyLk5nU3R5bGUgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfNjppMi5OZ1N3aXRjaCA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF83OmkyLk5nU3dpdGNoQ2FzZSA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF84OmkyLk5nU3dpdGNoRGVmYXVsdCA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF85OmkyLk5nUGx1cmFsID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzEwOmkyLk5nUGx1cmFsQ2FzZSA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF8xMTppMy5DbHJJY29uQ3VzdG9tVGFnID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzEyOmk0LkNscklmQWN0aXZlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzEzOmk1LkNscklmT3BlbiA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF8xNDppNi5DbHJJZkV4cGFuZGVkID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzE1Omk3LkNsckZvY3VzT25WaWV3SW5pdCA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF8xNjppOC5DbHJWZXJ0aWNhbE5hdiA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF8xNzppOS5DbHJWZXJ0aWNhbE5hdkxpbmsgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMTg6aTEwLkNsclZlcnRpY2FsTmF2R3JvdXAgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMTk6aTExLkNsclZlcnRpY2FsTmF2R3JvdXBDaGlsZHJlbiA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF8yMDppMTIuQ2xyVmVydGljYWxOYXZJY29uID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzIxOmkyLkFzeW5jUGlwZSA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF8yMjppMi5VcHBlckNhc2VQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzIzOmkyLkxvd2VyQ2FzZVBpcGUgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMjQ6aTIuSnNvblBpcGUgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMjU6aTIuU2xpY2VQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzI2OmkyLkRlY2ltYWxQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzI3OmkyLlBlcmNlbnRQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzI4OmkyLlRpdGxlQ2FzZVBpcGUgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMjk6aTIuQ3VycmVuY3lQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzMwOmkyLkRhdGVQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzMxOmkyLkkxOG5QbHVyYWxQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzMyOmkyLkkxOG5TZWxlY3RQaXBlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzMzOmkyLktleVZhbHVlUGlwZSA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF8zNDppMi5Db21tb25Nb2R1bGUgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMzk6aTEzLkNsckljb25Nb2R1bGUgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfMzg6aTE0LkNsckNvbmRpdGlvbmFsTW9kdWxlID0gKDxhbnk+KG51bGwgYXMgYW55KSk7XG52YXIgX2RlY2wwXzQwOmkxNS5DbHJGb2N1c09uVmlld0luaXRNb2R1bGUgPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbnZhciBfZGVjbDBfNDE6aTAuVGVtcGxhdGVSZWY8YW55PiA9ICg8YW55PihudWxsIGFzIGFueSkpO1xudmFyIF9kZWNsMF80MjppMC5FbGVtZW50UmVmPGFueT4gPSAoPGFueT4obnVsbCBhcyBhbnkpKTtcbmZ1bmN0aW9uIF9WaWV3X0NsclZlcnRpY2FsTmF2X0hvc3RfMV8wKCk6dm9pZCB7XG4gIHZhciBfYW55OmFueSA9IChudWxsIGFzIGFueSk7XG4gIGNvbnN0IGN1cnJWYWxfMDphbnkgPSBfZGVjbDBfMTYuY29sbGFwc2VkO1xuICBjdXJyVmFsXzA7XG4gIGNvbnN0IGN1cnJWYWxfMTphbnkgPSBfZGVjbDBfMTYuaGFzTmF2R3JvdXBzO1xuICBjdXJyVmFsXzE7XG4gIGNvbnN0IGN1cnJWYWxfMjphbnkgPSBfZGVjbDBfMTYuaGFzSWNvbnM7XG4gIGN1cnJWYWxfMjtcbn1cbmZ1bmN0aW9uIF9WaWV3X0NsclZlcnRpY2FsTmF2XzFfMSgpOnZvaWQge1xuICBpZiAoX2RlY2wwXzE2LmNvbGxhcHNpYmxlKSB7XG4gICAgdmFyIF9hbnk6YW55ID0gKG51bGwgYXMgYW55KTtcbiAgICBjb25zdCBjdXJyVmFsXzA6YW55ID0gX2RlY2wwXzE2LmNvbGxhcHNlZDtcbiAgICBjdXJyVmFsXzA7XG4gICAgY29uc3QgY3VyclZhbF8xOmFueSA9IF9kZWNsMF8xNi5hcmlhRXhwYW5kZWQ7XG4gICAgY3VyclZhbF8xO1xuICAgIGNvbnN0IGN1cnJWYWxfMjphbnkgPSBfZGVjbDBfMTYuY29tbW9uU3RyaW5ncy5rZXlzLnZlcnRpY2FsTmF2VG9nZ2xlO1xuICAgIGN1cnJWYWxfMjtcbiAgICBjb25zdCBjdXJyVmFsXzM6YW55ID0gKF9kZWNsMF8xNi5jb2xsYXBzZWQ/ICdyaWdodCc6ICdsZWZ0Jyk7XG4gICAgY3VyclZhbF8zO1xuICAgIGNvbnN0IGN1cnJWYWxfNDphbnkgPSAoX2RlY2wwXzE2LmNvbGxhcHNlZD8gX2RlY2wwXzE2LmNvbW1vblN0cmluZ3Mua2V5cy5leHBhbmQ6IF9kZWNsMF8xNi5jb21tb25TdHJpbmdzLmtleXMuY29sbGFwc2UpO1xuICAgIGN1cnJWYWxfNDtcbiAgICBjb25zdCBwZF81OmFueSA9ICgoPGFueT5fZGVjbDBfMTYudG9nZ2xlQnlCdXR0b24oKSkgIT09IGZhbHNlKTtcbiAgfVxufVxuZnVuY3Rpb24gX1ZpZXdfQ2xyVmVydGljYWxOYXZfMV8yKCk6dm9pZCB7XG4gIGlmICgoX2RlY2wwXzE2LmNvbGxhcHNpYmxlICYmIF9kZWNsMF8xNi5jb2xsYXBzZWQpKSB7XG4gICAgdmFyIF9hbnk6YW55ID0gKG51bGwgYXMgYW55KTtcbiAgICBjb25zdCBjdXJyVmFsXzA6YW55ID0gX2RlY2wwXzE2LmNvbW1vblN0cmluZ3Mua2V5cy52ZXJ0aWNhbE5hdlRvZ2dsZTtcbiAgICBjdXJyVmFsXzA7XG4gICAgY29uc3QgcGRfMTphbnkgPSAoKDxhbnk+KF9kZWNsMF8xNi5jb2xsYXBzZWQgPSBmYWxzZSkpICE9PSBmYWxzZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIF9WaWV3X0NsclZlcnRpY2FsTmF2XzFfMCgpOnZvaWQge1xuICB2YXIgX2FueTphbnkgPSAobnVsbCBhcyBhbnkpO1xuICBjb25zdCBjdXJyVmFsXzA6YW55ID0gX2RlY2wwXzE2LmNvbGxhcHNpYmxlO1xuICBjdXJyVmFsXzA7XG4gIGNvbnN0IGN1cnJWYWxfMTphbnkgPSAoX2RlY2wwXzE2LmNvbGxhcHNpYmxlICYmIF9kZWNsMF8xNi5jb2xsYXBzZWQpO1xuICBjdXJyVmFsXzE7XG59XG5mdW5jdGlvbiBfVmlld19DbHJWZXJ0aWNhbE5hdkxpbmtfSG9zdF8yXzAoKTp2b2lkIHtcbiAgdmFyIF9hbnk6YW55ID0gKG51bGwgYXMgYW55KTtcbiAgY29uc3QgcGRfMDphbnkgPSAoKDxhbnk+X2RlY2wwXzE3LmV4cGFuZFBhcmVudE5hdkdyb3VwKCkpICE9PSBmYWxzZSk7XG59XG5mdW5jdGlvbiBfVmlld19DbHJWZXJ0aWNhbE5hdkxpbmtfMl8wKCk6dm9pZCB7XG4gIHZhciBfYW55OmFueSA9IChudWxsIGFzIGFueSk7XG59XG5mdW5jdGlvbiBfVmlld19DbHJWZXJ0aWNhbE5hdkdyb3VwX0hvc3RfM18wKCk6dm9pZCB7XG4gIHZhciBfYW55OmFueSA9IChudWxsIGFzIGFueSk7XG4gIGNvbnN0IGN1cnJWYWxfMDphbnkgPSBfZGVjbDBfMTguZXhwYW5kZWQ7XG4gIGN1cnJWYWxfMDtcbn1cbmZ1bmN0aW9uIF9WaWV3X0NsclZlcnRpY2FsTmF2R3JvdXBfM18wKCk6dm9pZCB7XG4gIHZhciBfYW55OmFueSA9IChudWxsIGFzIGFueSk7XG4gIGNvbnN0IGN1cnJWYWxfMDphbnkgPSBfZGVjbDBfMTguZXhwYW5kZWQ7XG4gIGN1cnJWYWxfMDtcbiAgY29uc3QgY3VyclZhbF8xOmFueSA9IF9kZWNsMF8xOC5jb21tb25TdHJpbmdzLmtleXMudmVydGljYWxOYXZHcm91cFRvZ2dsZTtcbiAgY3VyclZhbF8xO1xuICBjb25zdCBjdXJyVmFsXzI6YW55ID0gKF9kZWNsMF8xOC5leHBhbmRlZD8gJ2Rvd24nOiAncmlnaHQnKTtcbiAgY3VyclZhbF8yO1xuICBjb25zdCBjdXJyVmFsXzM6YW55ID0gKF9kZWNsMF8xOC5leHBhbmRlZD8gX2RlY2wwXzE4LmNvbW1vblN0cmluZ3Mua2V5cy5jb2xsYXBzZTogX2RlY2wwXzE4LmNvbW1vblN0cmluZ3Mua2V5cy5leHBhbmQpO1xuICBjdXJyVmFsXzM7XG4gIGNvbnN0IGN1cnJWYWxfNDphbnkgPSBfZGVjbDBfMTguZXhwYW5kQW5pbWF0aW9uU3RhdGU7XG4gIGN1cnJWYWxfNDtcbiAgY29uc3QgcGRfNTphbnkgPSAoKDxhbnk+X2RlY2wwXzE4LnRvZ2dsZUV4cGFuZCgpKSAhPT0gZmFsc2UpO1xuICBjb25zdCBwZF82OmFueSA9ICgoPGFueT5fZGVjbDBfMTguZXhwYW5kQW5pbWF0aW9uRG9uZShfYW55KSkgIT09IGZhbHNlKTtcbn1cbmZ1bmN0aW9uIF9WaWV3X0NsclZlcnRpY2FsTmF2R3JvdXBDaGlsZHJlbl9Ib3N0XzRfMCgpOnZvaWQge1xuICB2YXIgX2FueTphbnkgPSAobnVsbCBhcyBhbnkpO1xufVxuZnVuY3Rpb24gX1ZpZXdfQ2xyVmVydGljYWxOYXZHcm91cENoaWxkcmVuXzRfMCgpOnZvaWQge1xuICB2YXIgX2FueTphbnkgPSAobnVsbCBhcyBhbnkpO1xufVxuIl19