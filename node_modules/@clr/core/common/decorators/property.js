/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
// tslint:disable-next-line
import { property as prop } from 'lit-element';
import { camelCaseToKebabCase } from '../utils/string';
/**
 * lit-element @property decorator with custom defaults.
 * https://lit-element.polymer-project.org/guide/properties#property-options
 *
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A PropertyDeclaration may optionally be
 * supplied to configure property features.
 */
export function property(options) {
    return (protoOrDescriptor, name) => prop(getDefaultOptions(name, options))(protoOrDescriptor, name);
}
/**
 * https://developers.google.com/web/fundamentals/web-components/best-practices
 */
export function getDefaultOptions(propertyKey, options) {
    const type = options ? options.type : options;
    switch (type) {
        case Array:
            return Object.assign({ reflect: false }, options);
        case Object:
            return Object.assign({ reflect: false }, options);
        case String:
            return Object.assign({ reflect: true, attribute: camelCaseToKebabCase(propertyKey), converter: {
                    toAttribute: (value) => (!!value ? value : null),
                } }, options);
        case Number:
            return Object.assign({ reflect: true, attribute: camelCaseToKebabCase(propertyKey) }, options);
        case Boolean:
            return Object.assign({ reflect: true, attribute: camelCaseToKebabCase(propertyKey), converter: {
                    // Mimic standard HTML boolean attributes + support "false" attribute values
                    // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes
                    fromAttribute: (value) => value !== 'false',
                } }, options);
        case Date: {
            return Object.assign({ 
                // Parse date strings from attributes but do not reflect back into attribute
                reflect: false, converter: {
                    fromAttribute: (value) => new Date(value),
                } }, options);
        }
        default:
            return options;
    }
}
//# sourceMappingURL=property.js.map