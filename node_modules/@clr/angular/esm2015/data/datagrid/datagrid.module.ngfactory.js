/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 * /*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.

 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./datagrid.module";
import * as i2 from "../../forms/common/control-container.ngfactory";
import * as i3 from "../../utils/host-wrapping/empty-anchor.ngfactory";
import * as i4 from "../../forms/checkbox/checkbox-wrapper.ngfactory";
import * as i5 from "../../forms/datepicker/date-container.ngfactory";
import * as i6 from "../../forms/input/input-container.ngfactory";
import * as i7 from "../../forms/password/password-container.ngfactory";
import * as i8 from "../../forms/radio/radio-wrapper.ngfactory";
import * as i9 from "../../forms/select/select-container.ngfactory";
import * as i10 from "../../forms/textarea/textarea-container.ngfactory";
import * as i11 from "../../forms/range/range-container.ngfactory";
import * as i12 from "../../utils/drag-and-drop/draggable-ghost.ngfactory";
import * as i13 from "./wrapped-cell.ngfactory";
import * as i14 from "./wrapped-column.ngfactory";
import * as i15 from "./wrapped-row.ngfactory";
import * as i16 from "@angular/common";
import * as i17 from "@angular/forms";
import * as i18 from "../../icon/icon.module";
import * as i19 from "../../forms/common/common.module";
import * as i20 from "../../utils/host-wrapping/host-wrapping.module";
import * as i21 from "../../forms/checkbox/checkbox.module";
import * as i22 from "../../utils/conditional/conditional.module";
import * as i23 from "../../utils/popover/popover.module";
import * as i24 from "../../utils/focus-trap/focus-trap.module";
import * as i25 from "../../forms/datepicker/datepicker.module";
import * as i26 from "../../forms/input/input.module";
import * as i27 from "../../forms/password/password.module";
import * as i28 from "../../forms/radio/radio.module";
import * as i29 from "../../forms/select/select.module";
import * as i30 from "../../forms/textarea/textarea.module";
import * as i31 from "../../forms/range/range.module";
import * as i32 from "../../forms/datalist/datalist.module";
import * as i33 from "../../forms/forms.module";
import * as i34 from "../../utils/loading/loading.module";
import * as i35 from "../../utils/outside-click/outside-click.module";
import * as i36 from "../../utils/animations/expandable-animation/expandable-animation.module";
import * as i37 from "../../utils/drag-and-drop/drag-and-drop.module";
import * as i38 from "../../progress/spinner/spinner.module";
import * as i39 from "../../utils/focus/focus-on-view-init/focus-on-view-init.module";
import * as i40 from "../../utils/focus/focus-on-view-init/focus-on-view-init.provider";
var ClrDatagridModuleNgFactory = i0.ɵcmf(i1.ClrDatagridModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.ClrControlContainerNgFactory, i3.EmptyAnchorNgFactory, i4.ClrCheckboxWrapperNgFactory, i5.ClrDateContainerNgFactory, i6.ClrInputContainerNgFactory, i7.ClrPasswordContainerNgFactory, i8.ClrRadioWrapperNgFactory, i9.ClrSelectContainerNgFactory, i10.ClrTextareaContainerNgFactory, i11.ClrRangeContainerNgFactory, i12.ClrDraggableGhostNgFactory, i13.WrappedCellNgFactory, i14.WrappedColumnNgFactory, i15.WrappedRowNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i16.NgLocalization, i16.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(4608, i17.ɵangular_packages_forms_forms_n, i17.ɵangular_packages_forms_forms_n, []), i0.ɵmpd(1073742336, i16.CommonModule, i16.CommonModule, []), i0.ɵmpd(1073742336, i18.ClrIconModule, i18.ClrIconModule, []), i0.ɵmpd(1073742336, i19.ClrCommonFormsModule, i19.ClrCommonFormsModule, []), i0.ɵmpd(1073742336, i20.ClrHostWrappingModule, i20.ClrHostWrappingModule, []), i0.ɵmpd(1073742336, i21.ClrCheckboxModule, i21.ClrCheckboxModule, []), i0.ɵmpd(1073742336, i22.ClrConditionalModule, i22.ClrConditionalModule, []), i0.ɵmpd(1073742336, i23.ClrPopoverModuleNext, i23.ClrPopoverModuleNext, []), i0.ɵmpd(1073742336, i24.ClrFocusTrapModule, i24.ClrFocusTrapModule, []), i0.ɵmpd(1073742336, i25.ClrDatepickerModule, i25.ClrDatepickerModule, []), i0.ɵmpd(1073742336, i17.ɵangular_packages_forms_forms_d, i17.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i17.FormsModule, i17.FormsModule, []), i0.ɵmpd(1073742336, i26.ClrInputModule, i26.ClrInputModule, []), i0.ɵmpd(1073742336, i27.ClrPasswordModule, i27.ClrPasswordModule, []), i0.ɵmpd(1073742336, i28.ClrRadioModule, i28.ClrRadioModule, []), i0.ɵmpd(1073742336, i29.ClrSelectModule, i29.ClrSelectModule, []), i0.ɵmpd(1073742336, i30.ClrTextareaModule, i30.ClrTextareaModule, []), i0.ɵmpd(1073742336, i31.ClrRangeModule, i31.ClrRangeModule, []), i0.ɵmpd(1073742336, i32.ClrDatalistModule, i32.ClrDatalistModule, []), i0.ɵmpd(1073742336, i33.ClrFormsModule, i33.ClrFormsModule, []), i0.ɵmpd(1073742336, i34.ClrLoadingModule, i34.ClrLoadingModule, []), i0.ɵmpd(1073742336, i35.ClrOutsideClickModule, i35.ClrOutsideClickModule, []), i0.ɵmpd(1073742336, i36.ClrExpandableAnimationModule, i36.ClrExpandableAnimationModule, []), i0.ɵmpd(1073742336, i37.ClrDragAndDropModule, i37.ClrDragAndDropModule, []), i0.ɵmpd(1073742336, i38.ClrSpinnerModule, i38.ClrSpinnerModule, []), i0.ɵmpd(1073742336, i39.ClrFocusOnViewInitModule, i39.ClrFocusOnViewInitModule, []), i0.ɵmpd(1073742336, i1.ClrDatagridModule, i1.ClrDatagridModule, []), i0.ɵmpd(256, i40.FOCUS_ON_VIEW_INIT, true, [])]); });
export { ClrDatagridModuleNgFactory as ClrDatagridModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,