/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __metadata } from "tslib";
import { baseStyles, property, registerElementSafely } from '@clr/core/common';
import { CdsBaseButton, getElementWidth } from '@clr/core/common';
import { html, query } from 'lit-element';
import { styles } from './button.element.css';
export var ClrLoadingState;
(function (ClrLoadingState) {
    ClrLoadingState["DEFAULT"] = "default";
    ClrLoadingState["LOADING"] = "loading";
    ClrLoadingState["SUCCESS"] = "success";
    ClrLoadingState["ERROR"] = "error";
})(ClrLoadingState || (ClrLoadingState = {}));
// TODO: replace with circular progress bar when complete
const iconSpinnerCheck = html `<span class="spinner spinner-inline spinner-check"></span>`;
const iconSpinner = html `<span class="spinner spinner-inline"></span>`;
/**
 * Buttons allow an application to communicate action and direct user intent.
 *
 * ```typescript
 * import '@clr/core/button';
 * ```
 *
 * ```html
 * <cds-button>submit</cds-button>
 * ```
 *
 * @element cds-button
 * @slot default - Content slot for inside the button
 * @cssprop --box-shadow-color
 * @cssprop --border-radius
 * @cssprop --border-width
 * @cssprop --border-color
 * @cssprop --color
 * @cssprop --background
 */
// @dynamic
export class CdsButton extends CdsBaseButton {
    constructor() {
        super(...arguments);
        /**
         * Changes the button content based on the value passed.
         *
         * - `default`: shows the content of the button
         * - `loading`: disables the button and shows a spinner inside the button
         * - `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms
         * - `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)
         */
        this.loadingState = ClrLoadingState.DEFAULT;
    }
    firstUpdated(props) {
        super.firstUpdated(props);
        if (this.loadingState !== ClrLoadingState.DEFAULT) {
            this.updateLoadingState();
        }
    }
    update(props) {
        if (this.privateHost && props.has('loadingState')) {
            this.updateLoadingState();
        }
        super.update(props);
    }
    render() {
        return html `
    <div class="private-host">
      ${this.loadingState === ClrLoadingState.LOADING ? iconSpinner : ''}
      ${this.loadingState === ClrLoadingState.SUCCESS ? iconSpinnerCheck : ''}
      ${this.loadingState === ClrLoadingState.DEFAULT ? html `<slot></slot>` : ''}
      ${this.hiddenButtonTemplate}
    </div>
    `;
    }
    static get styles() {
        return [baseStyles, styles];
    }
    updateLoadingState() {
        if (this.loadingState === ClrLoadingState.LOADING) {
            this.disableButton();
        }
        else if (this.loadingState === ClrLoadingState.SUCCESS) {
            this.disableButton();
            setTimeout(() => this.enableButton(), 1000);
        }
        else {
            this.enableButton();
        }
    }
    disableButton() {
        this.privateHost.style.width = getElementWidth(this.privateHost);
        this.disabled = true;
    }
    enableButton() {
        this.loadingState = ClrLoadingState.DEFAULT;
        this.privateHost.style.removeProperty('width');
        this.disabled = false;
    }
}
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], CdsButton.prototype, "action", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], CdsButton.prototype, "status", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], CdsButton.prototype, "size", void 0);
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Boolean)
], CdsButton.prototype, "block", void 0);
__decorate([
    query('.private-host'),
    __metadata("design:type", HTMLElement)
], CdsButton.prototype, "privateHost", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], CdsButton.prototype, "loadingState", void 0);
registerElementSafely('cds-button', CdsButton);
//# sourceMappingURL=button.element.js.map