import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
var ClrProgressBar = /** @class */ (function () {
    function ClrProgressBar(ariaLiveService) {
        this.ariaLiveService = ariaLiveService;
        this.externalId = '';
        // Progress
        this.max = 100;
        this._value = 0;
    }
    Object.defineProperty(ClrProgressBar.prototype, "id", {
        get: function () {
            return this._ID;
        },
        set: function (value) {
            this._ID = value;
            this.externalId = null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            this._value = value;
            if (this.displayAriaLive()) {
                this.ariaLiveService.announce(this.displayValue, this.ariaLive);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "progressClass", {
        // Styles
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "labeledClass", {
        get: function () {
            return this._labeled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "clrLabeled", {
        set: function (value) {
            this._labeled = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "fadeClass", {
        get: function () {
            return this._fade;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "clrFade", {
        set: function (value) {
            this._fade = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "loopClass", {
        get: function () {
            return this._loop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "clrLoop", {
        set: function (value) {
            this._loop = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "successClass", {
        get: function () {
            return this._success;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "clrSuccess", {
        /** @deprecated since 2.0, remove in 4.0 */
        set: function (value) {
            this._success = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "dangerClass", {
        get: function () {
            return this._danger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "clrDanger", {
        /** @deprecated since 2.0, remove in 4.0 */
        set: function (value) {
            this._danger = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "flashClass", {
        get: function () {
            return this._flash;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "clrFlash", {
        set: function (value) {
            this._flash = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "flashDangerClass", {
        get: function () {
            return this._flashDanger;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "clrFlashDanger", {
        /** @deprecated since 2.0, remove in 4.0 */
        set: function (value) {
            this._flashDanger = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrProgressBar.prototype, "displayValue", {
        /**
         * Make sure that we always will have something that is readable
         * for the screen reader
         */
        get: function () {
            if (this.displayval) {
                return this.displayval;
            }
            return this.value + "%";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Display aria-live only when there is value and it's not 0 or equal to the max value
     */
    ClrProgressBar.prototype.displayAriaLive = function () {
        return (this.value !== undefined || this.value !== 0) && this.value !== this.max;
    };
    Object.defineProperty(ClrProgressBar.prototype, "ariaLive", {
        get: function () {
            if (isBooleanAttributeSet(this.assertive)) {
                return ClrAriaLivePoliteness.assertive;
            }
            if (isBooleanAttributeSet(this.off)) {
                return ClrAriaLivePoliteness.off;
            }
            return ClrAriaLivePoliteness.polite;
        },
        enumerable: true,
        configurable: true
    });
    ClrProgressBar.ctorParameters = function () { return [
        { type: ClrAriaLiveService }
    ]; };
    __decorate([
        HostBinding('attr.id')
    ], ClrProgressBar.prototype, "externalId", void 0);
    __decorate([
        Input()
    ], ClrProgressBar.prototype, "id", null);
    __decorate([
        Input('clrMax')
    ], ClrProgressBar.prototype, "max", void 0);
    __decorate([
        Input('clrDisplayval')
    ], ClrProgressBar.prototype, "displayval", void 0);
    __decorate([
        Input('clrValue')
    ], ClrProgressBar.prototype, "value", null);
    __decorate([
        HostBinding('class.progress')
    ], ClrProgressBar.prototype, "progressClass", null);
    __decorate([
        HostBinding('class.labeled')
    ], ClrProgressBar.prototype, "labeledClass", null);
    __decorate([
        Input('clrLabeled')
    ], ClrProgressBar.prototype, "clrLabeled", null);
    __decorate([
        HostBinding('class.progress-fade')
    ], ClrProgressBar.prototype, "fadeClass", null);
    __decorate([
        Input('clrFade')
    ], ClrProgressBar.prototype, "clrFade", null);
    __decorate([
        HostBinding('class.loop')
    ], ClrProgressBar.prototype, "loopClass", null);
    __decorate([
        Input('clrLoop')
    ], ClrProgressBar.prototype, "clrLoop", null);
    __decorate([
        HostBinding('class.success')
    ], ClrProgressBar.prototype, "successClass", null);
    __decorate([
        Input('clrSuccess')
    ], ClrProgressBar.prototype, "clrSuccess", null);
    __decorate([
        HostBinding('class.danger')
    ], ClrProgressBar.prototype, "dangerClass", null);
    __decorate([
        Input('clrDanger')
    ], ClrProgressBar.prototype, "clrDanger", null);
    __decorate([
        HostBinding('class.flash')
    ], ClrProgressBar.prototype, "flashClass", null);
    __decorate([
        Input('clrFlash')
    ], ClrProgressBar.prototype, "clrFlash", null);
    __decorate([
        HostBinding('class.flash-danger')
    ], ClrProgressBar.prototype, "flashDangerClass", null);
    __decorate([
        Input('clrFlashDanger')
    ], ClrProgressBar.prototype, "clrFlashDanger", null);
    __decorate([
        Input('clrAssertive')
    ], ClrProgressBar.prototype, "assertive", void 0);
    __decorate([
        Input('clrOff')
    ], ClrProgressBar.prototype, "off", void 0);
    ClrProgressBar = __decorate([
        Component({
            providers: [ClrAriaLiveService],
            selector: 'clr-progress-bar',
            template: "\n    <progress [id]=\"id\" [attr.max]=\"max\" [attr.value]=\"value\" [attr.data-displayval]=\"displayValue\"></progress>\n    <span *ngIf=\"displayAriaLive()\">{{ displayValue }}</span>\n  "
        })
    ], ClrProgressBar);
    return ClrProgressBar;
}());
export { ClrProgressBar };
//# sourceMappingURL=data:application/json;base64,