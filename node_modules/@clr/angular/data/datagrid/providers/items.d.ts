import { TrackByFunction } from '@angular/core';
import { Observable } from 'rxjs';
import { FiltersProvider } from './filters';
import { Page } from './page';
import { Sort } from './sort';
import * as ɵngcc0 from '@angular/core';
export declare class Items<T = any> {
    private _filters;
    private _sort;
    private _page;
    constructor(_filters: FiltersProvider<T>, _sort: Sort<T>, _page: Page);
    /**
     * Indicates if the data is currently loading
     */
    loading: boolean;
    /**
     * Tracking function to identify objects. Default is reference equality.
     */
    trackBy: TrackByFunction<T>;
    /**
     * Subscriptions to the other providers changes.
     */
    private _filtersSub;
    private _sortSub;
    private _pageSub;
    /**
     * Cleans up our subscriptions to other providers
     */
    destroy(): void;
    /**
     * Whether we should use smart items for this datagrid or let the user handle
     * everything.
     */
    private _smart;
    get smart(): boolean;
    smartenUp(): void;
    /**
     * List of all items in the datagrid
     */
    private _all;
    get all(): T[];
    set all(items: T[]);
    /**
     * Manually recompute the list of displayed items
     */
    refresh(): void;
    /**
     * Internal temporary step, which we preserve to avoid re-filtering or re-sorting if not necessary
     */
    private _filtered;
    /**
     * List of items currently displayed
     */
    private _displayed;
    get displayed(): T[];
    /**
     * The Observable that lets other classes subscribe to items changes
     */
    private _change;
    private emitChange;
    get change(): Observable<T[]>;
    private _allChanges;
    private emitAllChanges;
    get allChanges(): Observable<T[]>;
    /**
     * Checks if we don't have data to process yet, to abort early operations
     */
    private get uninitialized();
    /**
     * FiltersProvider items from the raw list
     */
    private _filterItems;
    /**
     * Sorts items in the filtered list
     */
    private _sortItems;
    /**
     * Extracts the current page from the sorted list
     */
    private _changePage;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Items<any>>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Items<any>>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMuZC50cyIsInNvdXJjZXMiOlsiaXRlbXMuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhY2tCeUZ1bmN0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBGaWx0ZXJzUHJvdmlkZXIgfSBmcm9tICcuL2ZpbHRlcnMnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJy4vcGFnZSc7XG5pbXBvcnQgeyBTb3J0IH0gZnJvbSAnLi9zb3J0JztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEl0ZW1zPFQgPSBhbnk+IHtcbiAgICBwcml2YXRlIF9maWx0ZXJzO1xuICAgIHByaXZhdGUgX3NvcnQ7XG4gICAgcHJpdmF0ZSBfcGFnZTtcbiAgICBjb25zdHJ1Y3RvcihfZmlsdGVyczogRmlsdGVyc1Byb3ZpZGVyPFQ+LCBfc29ydDogU29ydDxUPiwgX3BhZ2U6IFBhZ2UpO1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiB0aGUgZGF0YSBpcyBjdXJyZW50bHkgbG9hZGluZ1xuICAgICAqL1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogVHJhY2tpbmcgZnVuY3Rpb24gdG8gaWRlbnRpZnkgb2JqZWN0cy4gRGVmYXVsdCBpcyByZWZlcmVuY2UgZXF1YWxpdHkuXG4gICAgICovXG4gICAgdHJhY2tCeTogVHJhY2tCeUZ1bmN0aW9uPFQ+O1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmlwdGlvbnMgdG8gdGhlIG90aGVyIHByb3ZpZGVycyBjaGFuZ2VzLlxuICAgICAqL1xuICAgIHByaXZhdGUgX2ZpbHRlcnNTdWI7XG4gICAgcHJpdmF0ZSBfc29ydFN1YjtcbiAgICBwcml2YXRlIF9wYWdlU3ViO1xuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBvdXIgc3Vic2NyaXB0aW9ucyB0byBvdGhlciBwcm92aWRlcnNcbiAgICAgKi9cbiAgICBkZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogV2hldGhlciB3ZSBzaG91bGQgdXNlIHNtYXJ0IGl0ZW1zIGZvciB0aGlzIGRhdGFncmlkIG9yIGxldCB0aGUgdXNlciBoYW5kbGVcbiAgICAgKiBldmVyeXRoaW5nLlxuICAgICAqL1xuICAgIHByaXZhdGUgX3NtYXJ0O1xuICAgIGdldCBzbWFydCgpOiBib29sZWFuO1xuICAgIHNtYXJ0ZW5VcCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIExpc3Qgb2YgYWxsIGl0ZW1zIGluIHRoZSBkYXRhZ3JpZFxuICAgICAqL1xuICAgIHByaXZhdGUgX2FsbDtcbiAgICBnZXQgYWxsKCk6IFRbXTtcbiAgICBzZXQgYWxsKGl0ZW1zOiBUW10pO1xuICAgIC8qKlxuICAgICAqIE1hbnVhbGx5IHJlY29tcHV0ZSB0aGUgbGlzdCBvZiBkaXNwbGF5ZWQgaXRlbXNcbiAgICAgKi9cbiAgICByZWZyZXNoKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogSW50ZXJuYWwgdGVtcG9yYXJ5IHN0ZXAsIHdoaWNoIHdlIHByZXNlcnZlIHRvIGF2b2lkIHJlLWZpbHRlcmluZyBvciByZS1zb3J0aW5nIGlmIG5vdCBuZWNlc3NhcnlcbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJlZDtcbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIGl0ZW1zIGN1cnJlbnRseSBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICBwcml2YXRlIF9kaXNwbGF5ZWQ7XG4gICAgZ2V0IGRpc3BsYXllZCgpOiBUW107XG4gICAgLyoqXG4gICAgICogVGhlIE9ic2VydmFibGUgdGhhdCBsZXRzIG90aGVyIGNsYXNzZXMgc3Vic2NyaWJlIHRvIGl0ZW1zIGNoYW5nZXNcbiAgICAgKi9cbiAgICBwcml2YXRlIF9jaGFuZ2U7XG4gICAgcHJpdmF0ZSBlbWl0Q2hhbmdlO1xuICAgIGdldCBjaGFuZ2UoKTogT2JzZXJ2YWJsZTxUW10+O1xuICAgIHByaXZhdGUgX2FsbENoYW5nZXM7XG4gICAgcHJpdmF0ZSBlbWl0QWxsQ2hhbmdlcztcbiAgICBnZXQgYWxsQ2hhbmdlcygpOiBPYnNlcnZhYmxlPFRbXT47XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHdlIGRvbid0IGhhdmUgZGF0YSB0byBwcm9jZXNzIHlldCwgdG8gYWJvcnQgZWFybHkgb3BlcmF0aW9uc1xuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0IHVuaW5pdGlhbGl6ZWQoKTtcbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzUHJvdmlkZXIgaXRlbXMgZnJvbSB0aGUgcmF3IGxpc3RcbiAgICAgKi9cbiAgICBwcml2YXRlIF9maWx0ZXJJdGVtcztcbiAgICAvKipcbiAgICAgKiBTb3J0cyBpdGVtcyBpbiB0aGUgZmlsdGVyZWQgbGlzdFxuICAgICAqL1xuICAgIHByaXZhdGUgX3NvcnRJdGVtcztcbiAgICAvKipcbiAgICAgKiBFeHRyYWN0cyB0aGUgY3VycmVudCBwYWdlIGZyb20gdGhlIHNvcnRlZCBsaXN0XG4gICAgICovXG4gICAgcHJpdmF0ZSBfY2hhbmdlUGFnZTtcbn1cbiJdfQ==