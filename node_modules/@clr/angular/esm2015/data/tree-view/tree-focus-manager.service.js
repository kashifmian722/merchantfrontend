import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
let TreeFocusManagerService = class TreeFocusManagerService {
    constructor() {
        this._focusRequest = new Subject();
        this._focusChange = new Subject();
    }
    get focusRequest() {
        return this._focusRequest.asObservable();
    }
    get focusChange() {
        return this._focusChange.asObservable();
    }
    findSiblings(model) {
        // the method will return not only sibling models but also itself among them
        if (model.parent) {
            return model.parent.children;
        }
        else {
            return this.rootNodeModels;
        }
    }
    findLastVisibleInNode(model) {
        // the method will traverse through until it finds the last visible node from the given node
        if (!model) {
            return;
        }
        if (model.expanded && model.children.length > 0) {
            const children = model.children;
            const lastChild = children[children.length - 1];
            return this.findLastVisibleInNode(lastChild);
        }
        else {
            return model;
        }
    }
    findNextFocusable(model) {
        if (!model) {
            return;
        }
        const siblings = this.findSiblings(model);
        const selfIndex = siblings.indexOf(model);
        if (selfIndex < siblings.length - 1) {
            return siblings[selfIndex + 1];
        }
        else if (selfIndex === siblings.length - 1) {
            return this.findNextFocusable(model.parent);
        }
    }
    findLastVisibleInTree() {
        const lastRootNode = this.rootNodeModels && this.rootNodeModels.length && this.rootNodeModels[this.rootNodeModels.length - 1];
        return this.findLastVisibleInNode(lastRootNode);
    }
    findNodeAbove(model) {
        if (!model) {
            return;
        }
        const siblings = this.findSiblings(model);
        const selfIndex = siblings.indexOf(model);
        if (selfIndex === 0) {
            return model.parent;
        }
        else if (selfIndex > 0) {
            return this.findLastVisibleInNode(siblings[selfIndex - 1]);
        }
    }
    findNodeBelow(model) {
        if (!model) {
            return;
        }
        if (model.expanded && model.children.length > 0) {
            return model.children[0];
        }
        else {
            return this.findNextFocusable(model);
        }
    }
    focusNode(model) {
        if (model) {
            this._focusRequest.next(model.nodeId);
        }
    }
    broadcastFocusedNode(nodeId) {
        if (this.focusedNodeId !== nodeId) {
            this.focusedNodeId = nodeId;
            this._focusChange.next(nodeId);
        }
    }
    focusParent(model) {
        if (model) {
            this.focusNode(model.parent);
        }
    }
    focusFirstVisibleNode() {
        const focusModel = this.rootNodeModels && this.rootNodeModels[0];
        this.focusNode(focusModel);
    }
    focusLastVisibleNode() {
        this.focusNode(this.findLastVisibleInTree());
    }
    focusNodeAbove(model) {
        this.focusNode(this.findNodeAbove(model));
    }
    focusNodeBelow(model) {
        this.focusNode(this.findNodeBelow(model));
    }
};
TreeFocusManagerService = __decorate([
    Injectable()
], TreeFocusManagerService);
export { TreeFocusManagerService };
//# sourceMappingURL=data:application/json;base64,