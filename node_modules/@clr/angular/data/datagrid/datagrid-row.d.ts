import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { ClrDatagridCell } from './datagrid-cell';
import { DisplayModeService } from './providers/display-mode.service';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrExpandableAnimation } from '../../utils/animations/expandable-animation/expandable-animation';
import { DetailService } from './providers/detail.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridRow<T = any> implements AfterContentInit, AfterViewInit {
    selection: Selection<T>;
    rowActionService: RowActionService;
    globalExpandable: ExpandableRowsCount;
    expand: DatagridIfExpandService;
    detailService: DetailService;
    private displayMode;
    private vcr;
    private renderer;
    private el;
    commonStrings: ClrCommonStringsService;
    id: string;
    radioId: string;
    checkboxId: string;
    expandableId: string;
    SELECTION_TYPE: typeof SelectionType;
    expandAnimation: ClrExpandableAnimation;
    /**
     * Model of the row, to use for selection
     */
    item: T;
    replaced: any;
    expandAnimationTrigger: boolean;
    constructor(selection: Selection<T>, rowActionService: RowActionService, globalExpandable: ExpandableRowsCount, expand: DatagridIfExpandService, detailService: DetailService, displayMode: DisplayModeService, vcr: ViewContainerRef, renderer: Renderer2, el: ElementRef, commonStrings: ClrCommonStringsService);
    private _selected;
    /**
     * Indicates if the row is selected
     */
    get selected(): boolean;
    set selected(value: boolean);
    set clrDgSelectable(value: boolean);
    get clrDgSelectable(): boolean;
    selectedChanged: EventEmitter<boolean>;
    toggle(selected?: boolean): void;
    get expanded(): boolean;
    set expanded(value: boolean);
    expandedChange: EventEmitter<boolean>;
    toggleExpand(): void;
    detailButton: any;
    private _detailOpenLabel;
    set clrDgDetailOpenLabel(label: string);
    get clrDgDetailOpenLabel(): string;
    private _detailCloseLabel;
    set clrDgDetailCloseLabel(label: string);
    get clrDgDetailCloseLabel(): string;
    /*****
     * property dgCells
     *
     * @description
     * A Query List of the ClrDatagrid cells in this row.
     *
     */
    dgCells: QueryList<ClrDatagridCell>;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    private subscriptions;
    ngOnDestroy(): void;
    displayCells: boolean;
    _stickyCells: ViewContainerRef;
    _scrollableCells: ViewContainerRef;
    _calculatedCells: ViewContainerRef;
    private wrappedInjector;
    ngOnInit(): void;
    get _view(): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridRow<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridRow<any>, "clr-dg-row", never, {
    "selected": "clrDgSelected";
    "clrDgSelectable": "clrDgSelectable";
    "expanded": "clrDgExpanded";
    "clrDgDetailOpenLabel": "clrDgDetailOpenLabel";
    "clrDgDetailCloseLabel": "clrDgDetailCloseLabel";
    "item": "clrDgItem";
}, {
    "selectedChanged": "clrDgSelectedChange";
    "expandedChange": "clrDgExpandedChange";
}, ["dgCells"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LmQudHMiLCJzb3VyY2VzIjpbImRhdGFncmlkLXJvdy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBSZW5kZXJlcjIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsckRhdGFncmlkQ2VsbCB9IGZyb20gJy4vZGF0YWdyaWQtY2VsbCc7XG5pbXBvcnQgeyBEaXNwbGF5TW9kZVNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kaXNwbGF5LW1vZGUuc2VydmljZSc7XG5pbXBvcnQgeyBFeHBhbmRhYmxlUm93c0NvdW50IH0gZnJvbSAnLi9wcm92aWRlcnMvZ2xvYmFsLWV4cGFuZGFibGUtcm93cyc7XG5pbXBvcnQgeyBSb3dBY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvcm93LWFjdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7IFNlbGVjdGlvbiB9IGZyb20gJy4vcHJvdmlkZXJzL3NlbGVjdGlvbic7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBTZWxlY3Rpb25UeXBlIH0gZnJvbSAnLi9lbnVtcy9zZWxlY3Rpb24tdHlwZSc7XG5pbXBvcnQgeyBEYXRhZ3JpZElmRXhwYW5kU2VydmljZSB9IGZyb20gJy4vZGF0YWdyaWQtaWYtZXhwYW5kZWQuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJFeHBhbmRhYmxlQW5pbWF0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbHMvYW5pbWF0aW9ucy9leHBhbmRhYmxlLWFuaW1hdGlvbi9leHBhbmRhYmxlLWFuaW1hdGlvbic7XG5pbXBvcnQgeyBEZXRhaWxTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGV0YWlsLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyRGF0YWdyaWRSb3c8VCA9IGFueT4gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBBZnRlclZpZXdJbml0IHtcbiAgICBzZWxlY3Rpb246IFNlbGVjdGlvbjxUPjtcbiAgICByb3dBY3Rpb25TZXJ2aWNlOiBSb3dBY3Rpb25TZXJ2aWNlO1xuICAgIGdsb2JhbEV4cGFuZGFibGU6IEV4cGFuZGFibGVSb3dzQ291bnQ7XG4gICAgZXhwYW5kOiBEYXRhZ3JpZElmRXhwYW5kU2VydmljZTtcbiAgICBkZXRhaWxTZXJ2aWNlOiBEZXRhaWxTZXJ2aWNlO1xuICAgIHByaXZhdGUgZGlzcGxheU1vZGU7XG4gICAgcHJpdmF0ZSB2Y3I7XG4gICAgcHJpdmF0ZSByZW5kZXJlcjtcbiAgICBwcml2YXRlIGVsO1xuICAgIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgcmFkaW9JZDogc3RyaW5nO1xuICAgIGNoZWNrYm94SWQ6IHN0cmluZztcbiAgICBleHBhbmRhYmxlSWQ6IHN0cmluZztcbiAgICBTRUxFQ1RJT05fVFlQRTogdHlwZW9mIFNlbGVjdGlvblR5cGU7XG4gICAgZXhwYW5kQW5pbWF0aW9uOiBDbHJFeHBhbmRhYmxlQW5pbWF0aW9uO1xuICAgIC8qKlxuICAgICAqIE1vZGVsIG9mIHRoZSByb3csIHRvIHVzZSBmb3Igc2VsZWN0aW9uXG4gICAgICovXG4gICAgaXRlbTogVDtcbiAgICByZXBsYWNlZDogYW55O1xuICAgIGV4cGFuZEFuaW1hdGlvblRyaWdnZXI6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0aW9uOiBTZWxlY3Rpb248VD4sIHJvd0FjdGlvblNlcnZpY2U6IFJvd0FjdGlvblNlcnZpY2UsIGdsb2JhbEV4cGFuZGFibGU6IEV4cGFuZGFibGVSb3dzQ291bnQsIGV4cGFuZDogRGF0YWdyaWRJZkV4cGFuZFNlcnZpY2UsIGRldGFpbFNlcnZpY2U6IERldGFpbFNlcnZpY2UsIGRpc3BsYXlNb2RlOiBEaXNwbGF5TW9kZVNlcnZpY2UsIHZjcjogVmlld0NvbnRhaW5lclJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlKTtcbiAgICBwcml2YXRlIF9zZWxlY3RlZDtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHJvdyBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgc2V0IGNsckRnU2VsZWN0YWJsZSh2YWx1ZTogYm9vbGVhbik7XG4gICAgZ2V0IGNsckRnU2VsZWN0YWJsZSgpOiBib29sZWFuO1xuICAgIHNlbGVjdGVkQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHRvZ2dsZShzZWxlY3RlZD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIGdldCBleHBhbmRlZCgpOiBib29sZWFuO1xuICAgIHNldCBleHBhbmRlZCh2YWx1ZTogYm9vbGVhbik7XG4gICAgZXhwYW5kZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICB0b2dnbGVFeHBhbmQoKTogdm9pZDtcbiAgICBkZXRhaWxCdXR0b246IGFueTtcbiAgICBwcml2YXRlIF9kZXRhaWxPcGVuTGFiZWw7XG4gICAgc2V0IGNsckRnRGV0YWlsT3BlbkxhYmVsKGxhYmVsOiBzdHJpbmcpO1xuICAgIGdldCBjbHJEZ0RldGFpbE9wZW5MYWJlbCgpOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfZGV0YWlsQ2xvc2VMYWJlbDtcbiAgICBzZXQgY2xyRGdEZXRhaWxDbG9zZUxhYmVsKGxhYmVsOiBzdHJpbmcpO1xuICAgIGdldCBjbHJEZ0RldGFpbENsb3NlTGFiZWwoKTogc3RyaW5nO1xuICAgIC8qKioqKlxuICAgICAqIHByb3BlcnR5IGRnQ2VsbHNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgUXVlcnkgTGlzdCBvZiB0aGUgQ2xyRGF0YWdyaWQgY2VsbHMgaW4gdGhpcyByb3cuXG4gICAgICpcbiAgICAgKi9cbiAgICBkZ0NlbGxzOiBRdWVyeUxpc3Q8Q2xyRGF0YWdyaWRDZWxsPjtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBkaXNwbGF5Q2VsbHM6IGJvb2xlYW47XG4gICAgX3N0aWNreUNlbGxzOiBWaWV3Q29udGFpbmVyUmVmO1xuICAgIF9zY3JvbGxhYmxlQ2VsbHM6IFZpZXdDb250YWluZXJSZWY7XG4gICAgX2NhbGN1bGF0ZWRDZWxsczogVmlld0NvbnRhaW5lclJlZjtcbiAgICBwcml2YXRlIHdyYXBwZWRJbmplY3RvcjtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIGdldCBfdmlldygpOiBhbnk7XG59XG4iXX0=