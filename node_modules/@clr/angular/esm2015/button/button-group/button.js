/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var ClrButton_1;
import { __decorate, __param } from "tslib";
import { Component, EventEmitter, Input, Optional, Output, SkipSelf, ViewChild } from '@angular/core';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
let ClrButton = ClrButton_1 = class ClrButton {
    constructor(buttonInGroupService, toggleService) {
        this.buttonInGroupService = buttonInGroupService;
        this.toggleService = toggleService;
        this._enableService = false;
        this._inMenu = false;
        this._classNames = 'btn';
        this._name = null;
        this._type = null;
        this._id = null;
        this._disabled = null;
        this._click = new EventEmitter(false);
    }
    get inMenu() {
        return this._inMenu;
    }
    set inMenu(value) {
        value = !!value;
        if (this._inMenu !== value) {
            this._inMenu = value;
            // We check if the service flag is enabled
            // and if the service exists because the service is optional
            if (this._enableService && this.buttonInGroupService) {
                this.buttonInGroupService.updateButtonGroup(this);
            }
        }
    }
    get classNames() {
        return this._classNames;
    }
    set classNames(value) {
        if (typeof value === 'string') {
            const classNames = value.split(' ');
            if (classNames.indexOf('btn') === -1) {
                classNames.push('btn');
            }
            this._classNames = classNames.join(' ');
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        if (typeof value === 'string') {
            this._name = value;
        }
    }
    get type() {
        return this._type;
    }
    set type(value) {
        if (typeof value === 'string') {
            this._type = value;
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        if (typeof value === 'string') {
            this._id = value;
        }
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (value !== null && value !== false) {
            this._disabled = '';
        }
        else {
            this._disabled = null;
        }
    }
    loadingStateChange(state) {
        this.loading = state === ClrLoadingState.LOADING;
    }
    emitClick($event) {
        if (this.inMenu) {
            this.toggleService.toggleWithEvent($event);
        }
        this._click.emit(true);
    }
    ngAfterViewInit() {
        this._enableService = true;
    }
};
ClrButton.ctorParameters = () => [
    { type: ButtonInGroupService, decorators: [{ type: SkipSelf }, { type: Optional }] },
    { type: ClrPopoverToggleService }
];
__decorate([
    ViewChild('buttonProjectedRef', { static: true })
], ClrButton.prototype, "templateRef", void 0);
__decorate([
    Input('clrInMenu')
], ClrButton.prototype, "inMenu", null);
__decorate([
    Input('class')
], ClrButton.prototype, "classNames", null);
__decorate([
    Input('name')
], ClrButton.prototype, "name", null);
__decorate([
    Input('type')
], ClrButton.prototype, "type", null);
__decorate([
    Input('id')
], ClrButton.prototype, "id", null);
__decorate([
    Input('disabled')
], ClrButton.prototype, "disabled", null);
__decorate([
    Output('click')
], ClrButton.prototype, "_click", void 0);
ClrButton = ClrButton_1 = __decorate([
    Component({
        selector: 'clr-button',
        template: `
        <ng-template #buttonProjectedRef>
            <button
                [class]="classNames"
                (click)="emitClick($event)"
                [attr.type]="type"
                [attr.name]="name"
                [attr.disabled]="disabled"
                [attr.id]="id">
                <span class="spinner spinner-inline" *ngIf="loading"></span>
                <ng-content></ng-content>
            </button>
        </ng-template>
    `,
        providers: [{ provide: LoadingListener, useExisting: ClrButton_1 }]
    }),
    __param(0, SkipSelf()),
    __param(0, Optional())
], ClrButton);
export { ClrButton };
//# sourceMappingURL=data:application/json;base64,