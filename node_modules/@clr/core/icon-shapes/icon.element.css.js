/* tslint:disable */
import { css } from 'lit-element';
export const styles = css `:host{--color: var(--clr-color-neutral-700, #666);--badge-color: var(--clr-color-danger-700, #db2100);display:inline-block;height:.8rem;width:.8rem;margin:0;vertical-align:middle;fill:var(--color);contain:strict}svg{display:block}:host(.clr-i-size-sm){height:.8rem;width:.8rem}:host(.clr-i-size-md){height:1.2rem;width:1.2rem}:host(.clr-i-size-lg){height:1.8rem;width:1.8rem}:host(.clr-i-size-xl){height:2.4rem;width:2.4rem}:host(.clr-i-size-xxl){height:3.2rem;width:3.2rem}:host(.is-green),:host(.is-success),:host([status='success']){--color: var(--clr-color-success-700, #3c8500)}:host(.is-red),:host(.is-danger),:host(.is-error),:host([status='danger']){--color: var(--clr-color-danger-700, #db2100)}:host(.is-warning),:host([status='warning']){--color: var(--clr-color-warning-900, #8f5a00)}:host(.is-blue),:host(.is-info),:host(.is-highlight),:host([status='info']){--color: var(--clr-color-action-600, #0072a3)}:host(.is-white),:host(.is-inverse),:host([inverse]){--color: var(--clr-color-neutral-0, #fff)}:host([inverse].is-info),:host([status='info'].is-inverse),:host([inverse][status='info']){--color: var(--clr-color-action-400, #49aeda)}:host([inverse].is-success),:host([status='success'].is-inverse),:host([inverse][status='success']){--color: var(--clr-color-success-400, #5eb715)}:host(.is-inverse.is-error),:host(.is-inverse.is-danger),:host([status='danger'].is-inverse),:host([inverse].is-error),:host([inverse].is-danger),:host([inverse][status='danger']){--color: var(--clr-color-danger-700, #db2100)}:host(.is-inverse.is-warning),:host([status='warning'].is-inverse),:host([inverse].is-warning),:host([inverse][status='warning']){--color: var(--clr-color-warning-500, #efc006)}:host([dir='up']) svg,:host([direction='up']) svg{transform:rotate(0deg)}:host([dir='down']) svg,:host([direction='down']) svg{transform:rotate(180deg)}:host([dir='right']) svg,:host([direction='right']) svg{transform:rotate(90deg)}:host([dir='left']) svg,:host([direction='left']) svg{transform:rotate(270deg)}:host([flip='horizontal']) svg{transform:scale(-1) rotateX(180deg)}:host([flip='vertical']) svg{transform:scale(-1) rotateY(180deg)}.clr-i-badge,.clr-i-alert{fill:var(--badge-color)}:host .clr-i-solid,:host .clr-i-solid--badged,:host .clr-i-solid--alerted{display:none}:host .clr-i-outline--alerted:not(.clr-i-outline),:host .clr-i-outline--badged:not(.clr-i-outline){display:none}:host([class*='has-badge']) .can-badge .clr-i-outline--badged,:host([badge]) .can-badge .clr-i-outline--badged{display:block}:host([class*='has-badge']) .can-badge .clr-i-outline:not(.clr-i-outline--badged),:host([badge]) .can-badge .clr-i-outline:not(.clr-i-outline--badged){display:none}:host([class*='has-alert']) .can-alert .clr-i-outline--alerted,:host([badge$='triangle']) .can-alert .clr-i-outline--alerted{display:block}:host([class*='has-alert']) .can-alert .clr-i-outline--badged,:host([class*='has-alert']) .can-alert .clr-i-outline:not(.clr-i-outline--alerted),:host([badge$='triangle']) .can-alert .clr-i-outline--badged,:host([badge$='triangle']) .can-alert .clr-i-outline:not(.clr-i-outline--alerted){display:none}:host(.is-solid) .has-solid .clr-i-solid,:host([solid]) .has-solid .clr-i-solid{display:block}:host(.is-solid) .has-solid .clr-i-outline,:host(.is-solid) .has-solid .clr-i-outline--badged,:host([solid]) .has-solid .clr-i-outline,:host([solid]) .has-solid .clr-i-outline--badged{display:none}:host(.is-solid) .has-solid .clr-i-solid--alerted:not(.clr-i-solid),:host(.is-solid) .has-solid .clr-i-solid--badged:not(.clr-i-solid),:host([solid]) .has-solid .clr-i-solid--alerted:not(.clr-i-solid),:host([solid]) .has-solid .clr-i-solid--badged:not(.clr-i-solid){display:none}:host(.is-solid[class*='has-badge']) .can-badge.has-solid .clr-i-solid--badged,:host([solid].has-badge) .can-badge.has-solid .clr-i-solid--badged,:host([badge].is-solid) .can-badge.has-solid .clr-i-solid--badged,:host([badge][solid]) .can-badge.has-solid .clr-i-solid--badged{display:block}:host(.is-solid[class*='has-badge']) .can-badge.has-solid .clr-i-outline,:host(.is-solid[class*='has-badge']) .can-badge.has-solid .clr-i-outline--badged,:host(.is-solid[class*='has-badge']) .can-badge.has-solid .clr-i-solid:not(.clr-i-solid--badged),:host([solid].has-badge) .can-badge.has-solid .clr-i-outline,:host([solid].has-badge) .can-badge.has-solid .clr-i-outline--badged,:host([solid].has-badge) .can-badge.has-solid .clr-i-solid:not(.clr-i-solid--badged),:host([badge].is-solid) .can-badge.has-solid .clr-i-outline,:host([badge].is-solid) .can-badge.has-solid .clr-i-outline--badged,:host([badge].is-solid) .can-badge.has-solid .clr-i-solid:not(.clr-i-solid--badged),:host([badge][solid]) .can-badge.has-solid .clr-i-outline,:host([badge][solid]) .can-badge.has-solid .clr-i-outline--badged,:host([badge][solid]) .can-badge.has-solid .clr-i-solid:not(.clr-i-solid--badged){display:none}:host(.is-solid[class*='has-alert']) .can-alert.has-solid .clr-i-solid--alerted,:host([solid].has-alert) .can-alert.has-solid .clr-i-solid--alerted,:host([badge$='triangle'].is-solid) .can-alert.has-solid .clr-i-solid--alerted,:host([solid][badge$='triangle']) .can-alert.has-solid .clr-i-solid--alerted{display:block}:host(.is-solid[class*='has-alert']) .can-alert.has-solid .clr-i-outline,:host(.is-solid[class*='has-alert']) .can-alert.has-solid .clr-i-outline--alerted,:host(.is-solid[class*='has-alert']) .can-alert.has-solid .clr-i-solid--badged,:host(.is-solid[class*='has-alert']) .can-alert.has-solid .clr-i-solid:not(.clr-i-solid--alerted),:host([solid].has-alert) .can-alert.has-solid .clr-i-outline,:host([solid].has-alert) .can-alert.has-solid .clr-i-outline--alerted,:host([solid].has-alert) .can-alert.has-solid .clr-i-solid--badged,:host([solid].has-alert) .can-alert.has-solid .clr-i-solid:not(.clr-i-solid--alerted),:host([badge$='triangle'].is-solid) .can-alert.has-solid .clr-i-outline,:host([badge$='triangle'].is-solid) .can-alert.has-solid .clr-i-outline--alerted,:host([badge$='triangle'].is-solid) .can-alert.has-solid .clr-i-solid--badged,:host([badge$='triangle'].is-solid) .can-alert.has-solid .clr-i-solid:not(.clr-i-solid--alerted),:host([solid][badge$='triangle']) .can-alert.has-solid .clr-i-outline,:host([solid][badge$='triangle']) .can-alert.has-solid .clr-i-outline--alerted,:host([solid][badge$='triangle']) .can-alert.has-solid .clr-i-solid--badged,:host([solid][badge$='triangle']) .can-alert.has-solid .clr-i-solid:not(.clr-i-solid--alerted){display:none}:host(.has-badge--success),:host([badge='success']){--badge-color: var(--clr-color-success-700, #3c8500)}:host(.has-badge--danger),:host(.has-badge--error),:host([badge='danger']){--badge-color: var(--clr-color-danger-700, #db2100)}:host([badge='warning']){--badge-color: var(--clr-color-warning-900, #8f5a00)}:host([badge='inherit']){--badge-color: inherit}:host(.has-badge--info),:host([badge='info']){--badge-color: var(--clr-color-action-600, #0072a3)}:host(.has-alert),:host([badge$='triangle']){--badge-color: var(--clr-color-warning-800, #b87d00)}:host([badge='inherit-triangle']){--badge-color: inherit}:host([badge][inverse]),:host([badge].is-inverse),:host(.has-badge--danger[inverse]),:host(.has-badge--error[inverse]),:host(.has-badge--danger.is-inverse),:host(.has-badge--error.is-inverse){--badge-color: var(--clr-color-danger-500, #f35e44)}:host([inverse].is-highlight),:host(.is-highlight.is-inverse){--color: var(--clr-color-action-400, #49aeda)}:host([badge='success'][inverse]),:host([inverse].has-badge--success),:host([badge='success'].is-inverse),:host(.has-badge--success.is-inverse){--badge-color: var(--clr-color-success-400, #5eb715)}:host([badge='inherit'][inverse]){--badge-color: inherit}:host([badge='warning'][inverse]){--badge-color: var(--clr-color-warning-500, #efc006)}:host([badge='info'][inverse]),:host(.has-badge--info[inverse]),:host([badge='info'].is-inverse),:host(.has-badge--info.is-inverse){--badge-color: var(--clr-color-action-400, #49aeda)}:host([badge$='triangle'][inverse]),:host(.has-alert[inverse]),:host(.is-inverse[badge$='triangle']),:host(.has-alert.is-inverse){--badge-color: var(--clr-color-warning-500, #efc006)}:host([badge='inherit-triangle'][inverse]){--badge-color: inherit}
`;
//# sourceMappingURL=icon.element.css.js.map