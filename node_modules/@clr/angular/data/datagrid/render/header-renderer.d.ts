import { ElementRef, EventEmitter, OnDestroy, Renderer2 } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { DomAdapter } from '../../../utils/dom-adapter/dom-adapter';
import { ColumnResizerService } from '../providers/column-resizer.service';
import { DatagridRenderOrganizer } from './render-organizer';
import { ColumnState } from '../interfaces/column-state.interface';
import { ColumnsService } from '../providers/columns.service';
import * as ɵngcc0 from '@angular/core';
export declare class DatagridHeaderRenderer implements OnDestroy {
    private el;
    private renderer;
    private organizer;
    private domAdapter;
    private columnResizerService;
    private columnsService;
    private columnState;
    constructor(el: ElementRef, renderer: Renderer2, organizer: DatagridRenderOrganizer, domAdapter: DomAdapter, columnResizerService: ColumnResizerService, columnsService: ColumnsService, columnState: BehaviorSubject<ColumnState>);
    resizeEmitter: EventEmitter<number>;
    /**
     * Indicates if the column has a strict width, so it doesn't shrink or expand based on the content.
     */
    private widthSet;
    private autoSet;
    private subscriptions;
    ngOnDestroy(): void;
    private stateChanges;
    private clearWidth;
    private detectStrictWidth;
    private computeWidth;
    getColumnWidthState(): Partial<ColumnState>;
    setColumnState(index: number): void;
    private setWidth;
    private setHidden;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatagridHeaderRenderer>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DatagridHeaderRenderer, "clr-dg-column", never, {}, {
    "resizeEmitter": "clrDgColumnResize";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLXJlbmRlcmVyLmQudHMiLCJzb3VyY2VzIjpbImhlYWRlci1yZW5kZXJlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEb21BZGFwdGVyIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZG9tLWFkYXB0ZXIvZG9tLWFkYXB0ZXInO1xuaW1wb3J0IHsgQ29sdW1uUmVzaXplclNlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvY29sdW1uLXJlc2l6ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRhZ3JpZFJlbmRlck9yZ2FuaXplciB9IGZyb20gJy4vcmVuZGVyLW9yZ2FuaXplcic7XG5pbXBvcnQgeyBDb2x1bW5TdGF0ZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvY29sdW1uLXN0YXRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDb2x1bW5zU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9jb2x1bW5zLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0YWdyaWRIZWFkZXJSZW5kZXJlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIHJlbmRlcmVyO1xuICAgIHByaXZhdGUgb3JnYW5pemVyO1xuICAgIHByaXZhdGUgZG9tQWRhcHRlcjtcbiAgICBwcml2YXRlIGNvbHVtblJlc2l6ZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgY29sdW1uc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBjb2x1bW5TdGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgb3JnYW5pemVyOiBEYXRhZ3JpZFJlbmRlck9yZ2FuaXplciwgZG9tQWRhcHRlcjogRG9tQWRhcHRlciwgY29sdW1uUmVzaXplclNlcnZpY2U6IENvbHVtblJlc2l6ZXJTZXJ2aWNlLCBjb2x1bW5zU2VydmljZTogQ29sdW1uc1NlcnZpY2UsIGNvbHVtblN0YXRlOiBCZWhhdmlvclN1YmplY3Q8Q29sdW1uU3RhdGU+KTtcbiAgICByZXNpemVFbWl0dGVyOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNvbHVtbiBoYXMgYSBzdHJpY3Qgd2lkdGgsIHNvIGl0IGRvZXNuJ3Qgc2hyaW5rIG9yIGV4cGFuZCBiYXNlZCBvbiB0aGUgY29udGVudC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHdpZHRoU2V0O1xuICAgIHByaXZhdGUgYXV0b1NldDtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIHN0YXRlQ2hhbmdlcztcbiAgICBwcml2YXRlIGNsZWFyV2lkdGg7XG4gICAgcHJpdmF0ZSBkZXRlY3RTdHJpY3RXaWR0aDtcbiAgICBwcml2YXRlIGNvbXB1dGVXaWR0aDtcbiAgICBnZXRDb2x1bW5XaWR0aFN0YXRlKCk6IFBhcnRpYWw8Q29sdW1uU3RhdGU+O1xuICAgIHNldENvbHVtblN0YXRlKGluZGV4OiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgc2V0V2lkdGg7XG4gICAgcHJpdmF0ZSBzZXRIaWRkZW47XG59XG4iXX0=