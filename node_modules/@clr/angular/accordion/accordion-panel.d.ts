import { EventEmitter, SimpleChanges, OnInit, OnChanges, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import { ClrCommonStringsService } from '../utils/i18n/common-strings.service';
import { AccordionService } from './providers/accordion.service';
import { AccordionStatus } from './enums/accordion-status.enum';
import { IfExpandService } from '../utils/conditional/if-expanded.service';
import { AccordionPanelModel } from './models/accordion.model';
import { ClrAccordionDescription } from './accordion-description';
import * as ɵngcc0 from '@angular/core';
export declare class ClrAccordionPanel implements OnInit, OnChanges {
    commonStrings: ClrCommonStringsService;
    private accordionService;
    private ifExpandService;
    id: string;
    disabled: boolean;
    panelOpen: boolean;
    panelOpenChange: EventEmitter<boolean>;
    accordionDescription: QueryList<ClrAccordionDescription>;
    panel: Observable<AccordionPanelModel>;
    readonly AccordionStatus: typeof AccordionStatus;
    isAccordion: boolean;
    constructor(commonStrings: ClrCommonStringsService, accordionService: AccordionService, ifExpandService: IfExpandService, id: string);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    togglePanel(): void;
    collapsePanelOnAnimationDone(panel: AccordionPanelModel): void;
    getPanelStateClasses(panel: AccordionPanelModel): string;
    getAccordionContentId(id: string): string;
    getAccordionHeaderId(id: string): string;
    private emitPanelChange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAccordionPanel>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrAccordionPanel, "clr-accordion-panel", never, {
    "disabled": "clrAccordionPanelDisabled";
    "panelOpen": "clrAccordionPanelOpen";
}, {
    "panelOpenChange": "clrAccordionPanelOpenChange";
}, ["accordionDescription"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLXBhbmVsLmQudHMiLCJzb3VyY2VzIjpbImFjY29yZGlvbi1wYW5lbC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBTaW1wbGVDaGFuZ2VzLCBPbkluaXQsIE9uQ2hhbmdlcywgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBBY2NvcmRpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvYWNjb3JkaW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjb3JkaW9uU3RhdHVzIH0gZnJvbSAnLi9lbnVtcy9hY2NvcmRpb24tc3RhdHVzLmVudW0nO1xuaW1wb3J0IHsgSWZFeHBhbmRTZXJ2aWNlIH0gZnJvbSAnLi4vdXRpbHMvY29uZGl0aW9uYWwvaWYtZXhwYW5kZWQuc2VydmljZSc7XG5pbXBvcnQgeyBBY2NvcmRpb25QYW5lbE1vZGVsIH0gZnJvbSAnLi9tb2RlbHMvYWNjb3JkaW9uLm1vZGVsJztcbmltcG9ydCB7IENsckFjY29yZGlvbkRlc2NyaXB0aW9uIH0gZnJvbSAnLi9hY2NvcmRpb24tZGVzY3JpcHRpb24nO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyQWNjb3JkaW9uUGFuZWwgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBhY2NvcmRpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgaWZFeHBhbmRTZXJ2aWNlO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcGFuZWxPcGVuOiBib29sZWFuO1xuICAgIHBhbmVsT3BlbkNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIGFjY29yZGlvbkRlc2NyaXB0aW9uOiBRdWVyeUxpc3Q8Q2xyQWNjb3JkaW9uRGVzY3JpcHRpb24+O1xuICAgIHBhbmVsOiBPYnNlcnZhYmxlPEFjY29yZGlvblBhbmVsTW9kZWw+O1xuICAgIHJlYWRvbmx5IEFjY29yZGlvblN0YXR1czogdHlwZW9mIEFjY29yZGlvblN0YXR1cztcbiAgICBpc0FjY29yZGlvbjogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcihjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSwgYWNjb3JkaW9uU2VydmljZTogQWNjb3JkaW9uU2VydmljZSwgaWZFeHBhbmRTZXJ2aWNlOiBJZkV4cGFuZFNlcnZpY2UsIGlkOiBzdHJpbmcpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgdG9nZ2xlUGFuZWwoKTogdm9pZDtcbiAgICBjb2xsYXBzZVBhbmVsT25BbmltYXRpb25Eb25lKHBhbmVsOiBBY2NvcmRpb25QYW5lbE1vZGVsKTogdm9pZDtcbiAgICBnZXRQYW5lbFN0YXRlQ2xhc3NlcyhwYW5lbDogQWNjb3JkaW9uUGFuZWxNb2RlbCk6IHN0cmluZztcbiAgICBnZXRBY2NvcmRpb25Db250ZW50SWQoaWQ6IHN0cmluZyk6IHN0cmluZztcbiAgICBnZXRBY2NvcmRpb25IZWFkZXJJZChpZDogc3RyaW5nKTogc3RyaW5nO1xuICAgIHByaXZhdGUgZW1pdFBhbmVsQ2hhbmdlO1xufVxuIl19