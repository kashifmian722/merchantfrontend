import { AfterViewInit, ElementRef, EventEmitter, Injector, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { FocusService } from '../common/providers/focus.service';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrDateContainer } from './date-container';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateIOService } from './providers/date-io.service';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerEnabledService } from './providers/datepicker-enabled.service';
import { DatepickerFocusService } from './providers/datepicker-focus.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrDateInput extends WrappedFormControl<ClrDateContainer> implements OnInit, AfterViewInit, OnDestroy {
    protected el: ElementRef;
    protected renderer: Renderer2;
    protected control: NgControl;
    private container;
    private dateIOService;
    private dateNavigationService;
    private datepickerEnabledService;
    private dateFormControlService;
    private platformId;
    private focusService;
    private datepickerFocusService;
    placeholder: string;
    dateChange: EventEmitter<Date>;
    set date(date: Date);
    set min(dateString: string);
    set max(dateString: string);
    protected index: number;
    private initialClrDateInputValue;
    private previousDateChange;
    constructor(viewContainerRef: ViewContainerRef, injector: Injector, el: ElementRef, renderer: Renderer2, control: NgControl, container: ClrDateContainer, dateIOService: DateIOService, dateNavigationService: DateNavigationService, datepickerEnabledService: DatepickerEnabledService, dateFormControlService: DateFormControlService, platformId: Object, focusService: FocusService, datepickerFocusService: DatepickerFocusService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setFocusStates(): void;
    triggerValidation(): void;
    get placeholderText(): string;
    get inputType(): string;
    onValueChange(target: HTMLInputElement): void;
    set disabled(value: boolean | string);
    get disabled(): boolean | string;
    private usingClarityDatepicker;
    private usingNativeDatepicker;
    private setFocus;
    private populateServicesFromContainerComponent;
    private processInitialInputs;
    private updateDate;
    private updateInput;
    private getValidDateValueFromDate;
    private emitDateOutput;
    private datepickerHasFormControl;
    private listenForControlValueChanges;
    private listenForUserSelectedDayChanges;
    private listenForTouchChanges;
    private listenForDirtyChanges;
    private listenForInputRefocus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDateInput>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrDateInput, "[clrDate]", never, {
    "date": "clrDate";
    "min": "min";
    "max": "max";
    "disabled": "disabled";
    "placeholder": "placeholder";
}, {
    "dateChange": "clrDateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1pbnB1dC5kLnRzIiwic291cmNlcyI6WyJkYXRlLWlucHV0LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi4vY29tbW9uL3Byb3ZpZGVycy9mb2N1cy5zZXJ2aWNlJztcbmltcG9ydCB7IFdyYXBwZWRGb3JtQ29udHJvbCB9IGZyb20gJy4uL2NvbW1vbi93cmFwcGVkLWNvbnRyb2wnO1xuaW1wb3J0IHsgQ2xyRGF0ZUNvbnRhaW5lciB9IGZyb20gJy4vZGF0ZS1jb250YWluZXInO1xuaW1wb3J0IHsgRGF0ZUZvcm1Db250cm9sU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGUtZm9ybS1jb250cm9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZUlPU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGUtaW8uc2VydmljZSc7XG5pbXBvcnQgeyBEYXRlTmF2aWdhdGlvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRlLW5hdmlnYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBEYXRlcGlja2VyRW5hYmxlZFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRlcGlja2VyLWVuYWJsZWQuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRlcGlja2VyRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZXBpY2tlci1mb2N1cy5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckRhdGVJbnB1dCBleHRlbmRzIFdyYXBwZWRGb3JtQ29udHJvbDxDbHJEYXRlQ29udGFpbmVyPiBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcm90ZWN0ZWQgZWw6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIHJlbmRlcmVyOiBSZW5kZXJlcjI7XG4gICAgcHJvdGVjdGVkIGNvbnRyb2w6IE5nQ29udHJvbDtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjtcbiAgICBwcml2YXRlIGRhdGVJT1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBkYXRlTmF2aWdhdGlvblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkYXRlcGlja2VyRW5hYmxlZFNlcnZpY2U7XG4gICAgcHJpdmF0ZSBkYXRlRm9ybUNvbnRyb2xTZXJ2aWNlO1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBwcml2YXRlIGZvY3VzU2VydmljZTtcbiAgICBwcml2YXRlIGRhdGVwaWNrZXJGb2N1c1NlcnZpY2U7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBkYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZT47XG4gICAgc2V0IGRhdGUoZGF0ZTogRGF0ZSk7XG4gICAgc2V0IG1pbihkYXRlU3RyaW5nOiBzdHJpbmcpO1xuICAgIHNldCBtYXgoZGF0ZVN0cmluZzogc3RyaW5nKTtcbiAgICBwcm90ZWN0ZWQgaW5kZXg6IG51bWJlcjtcbiAgICBwcml2YXRlIGluaXRpYWxDbHJEYXRlSW5wdXRWYWx1ZTtcbiAgICBwcml2YXRlIHByZXZpb3VzRGF0ZUNoYW5nZTtcbiAgICBjb25zdHJ1Y3Rvcih2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmLCBpbmplY3RvcjogSW5qZWN0b3IsIGVsOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjb250cm9sOiBOZ0NvbnRyb2wsIGNvbnRhaW5lcjogQ2xyRGF0ZUNvbnRhaW5lciwgZGF0ZUlPU2VydmljZTogRGF0ZUlPU2VydmljZSwgZGF0ZU5hdmlnYXRpb25TZXJ2aWNlOiBEYXRlTmF2aWdhdGlvblNlcnZpY2UsIGRhdGVwaWNrZXJFbmFibGVkU2VydmljZTogRGF0ZXBpY2tlckVuYWJsZWRTZXJ2aWNlLCBkYXRlRm9ybUNvbnRyb2xTZXJ2aWNlOiBEYXRlRm9ybUNvbnRyb2xTZXJ2aWNlLCBwbGF0Zm9ybUlkOiBPYmplY3QsIGZvY3VzU2VydmljZTogRm9jdXNTZXJ2aWNlLCBkYXRlcGlja2VyRm9jdXNTZXJ2aWNlOiBEYXRlcGlja2VyRm9jdXNTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHNldEZvY3VzU3RhdGVzKCk6IHZvaWQ7XG4gICAgdHJpZ2dlclZhbGlkYXRpb24oKTogdm9pZDtcbiAgICBnZXQgcGxhY2Vob2xkZXJUZXh0KCk6IHN0cmluZztcbiAgICBnZXQgaW5wdXRUeXBlKCk6IHN0cmluZztcbiAgICBvblZhbHVlQ2hhbmdlKHRhcmdldDogSFRNTElucHV0RWxlbWVudCk6IHZvaWQ7XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB8IHN0cmluZztcbiAgICBwcml2YXRlIHVzaW5nQ2xhcml0eURhdGVwaWNrZXI7XG4gICAgcHJpdmF0ZSB1c2luZ05hdGl2ZURhdGVwaWNrZXI7XG4gICAgcHJpdmF0ZSBzZXRGb2N1cztcbiAgICBwcml2YXRlIHBvcHVsYXRlU2VydmljZXNGcm9tQ29udGFpbmVyQ29tcG9uZW50O1xuICAgIHByaXZhdGUgcHJvY2Vzc0luaXRpYWxJbnB1dHM7XG4gICAgcHJpdmF0ZSB1cGRhdGVEYXRlO1xuICAgIHByaXZhdGUgdXBkYXRlSW5wdXQ7XG4gICAgcHJpdmF0ZSBnZXRWYWxpZERhdGVWYWx1ZUZyb21EYXRlO1xuICAgIHByaXZhdGUgZW1pdERhdGVPdXRwdXQ7XG4gICAgcHJpdmF0ZSBkYXRlcGlja2VySGFzRm9ybUNvbnRyb2w7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JDb250cm9sVmFsdWVDaGFuZ2VzO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yVXNlclNlbGVjdGVkRGF5Q2hhbmdlcztcbiAgICBwcml2YXRlIGxpc3RlbkZvclRvdWNoQ2hhbmdlcztcbiAgICBwcml2YXRlIGxpc3RlbkZvckRpcnR5Q2hhbmdlcztcbiAgICBwcml2YXRlIGxpc3RlbkZvcklucHV0UmVmb2N1cztcbn1cbiJdfQ==