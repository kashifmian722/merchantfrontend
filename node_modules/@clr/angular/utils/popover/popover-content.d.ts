import { OnDestroy, Renderer2, TemplateRef, ViewContainerRef, AfterContentChecked } from '@angular/core';
import { ClrPopoverToggleService } from './providers/popover-toggle.service';
import { ClrPopoverEventsService } from './providers/popover-events.service';
import { ClrPopoverPositionService } from './providers/popover-position.service';
import { ClrPopoverPosition } from './interfaces/popover-position.interface';
/** @dynamic */
import * as ɵngcc0 from '@angular/core';
export declare class ClrPopoverContent implements AfterContentChecked, OnDestroy {
    private document;
    private container;
    private template;
    private renderer;
    private smartPositionService;
    private smartEventsService;
    private smartOpenService;
    private view;
    private subscriptions;
    set open(value: boolean);
    set contentAt(position: ClrPopoverPosition);
    set outsideClickClose(clickToClose: any);
    set scrollToClose(scrollToClose: any);
    constructor(document: HTMLDocument, container: ViewContainerRef, template: TemplateRef<any>, renderer: Renderer2, smartPositionService: ClrPopoverPositionService, smartEventsService: ClrPopoverEventsService, smartOpenService: ClrPopoverToggleService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private removeContent;
    /**
     * TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.
     * A note about the use of appendChild/removeChild
     * The DebugElement is keeping a reference to the detached node and its unclear why.
     * This does warrant further investigation. But, since it doesn't happen in production mode
     * it is a low priority issue for now.
     */
    private addContent;
    private shouldRealign;
    private checkCollector;
    ngAfterContentChecked(): void;
    private alignContent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrPopoverContent>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrPopoverContent, "[clrPopoverContent]", never, {
    "open": "clrPopoverContent";
    "contentAt": "clrPopoverContentAt";
    "outsideClickClose": "clrPopoverContentOutsideClickToClose";
    "scrollToClose": "clrPopoverContentScrollToClose";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250ZW50LmQudHMiLCJzb3VyY2VzIjpbInBvcG92ZXItY29udGVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIEFmdGVyQ29udGVudENoZWNrZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyRXZlbnRzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3BvcG92ZXItZXZlbnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclBvc2l0aW9uU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL3BvcG92ZXItcG9zaXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyUG9zaXRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMvcG9wb3Zlci1wb3NpdGlvbi5pbnRlcmZhY2UnO1xuLyoqIEBkeW5hbWljICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJQb3BvdmVyQ29udGVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudENoZWNrZWQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBkb2N1bWVudDtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjtcbiAgICBwcml2YXRlIHRlbXBsYXRlO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBzbWFydFBvc2l0aW9uU2VydmljZTtcbiAgICBwcml2YXRlIHNtYXJ0RXZlbnRzU2VydmljZTtcbiAgICBwcml2YXRlIHNtYXJ0T3BlblNlcnZpY2U7XG4gICAgcHJpdmF0ZSB2aWV3O1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBzZXQgb3Blbih2YWx1ZTogYm9vbGVhbik7XG4gICAgc2V0IGNvbnRlbnRBdChwb3NpdGlvbjogQ2xyUG9wb3ZlclBvc2l0aW9uKTtcbiAgICBzZXQgb3V0c2lkZUNsaWNrQ2xvc2UoY2xpY2tUb0Nsb3NlOiBhbnkpO1xuICAgIHNldCBzY3JvbGxUb0Nsb3NlKHNjcm9sbFRvQ2xvc2U6IGFueSk7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IEhUTUxEb2N1bWVudCwgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLCB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgc21hcnRQb3NpdGlvblNlcnZpY2U6IENsclBvcG92ZXJQb3NpdGlvblNlcnZpY2UsIHNtYXJ0RXZlbnRzU2VydmljZTogQ2xyUG9wb3ZlckV2ZW50c1NlcnZpY2UsIHNtYXJ0T3BlblNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlKTtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgcmVtb3ZlQ29udGVudDtcbiAgICAvKipcbiAgICAgKiBUT0RPKG1hdHQpOiBpbnZlc3RpZ2F0ZSB3aHkgRGVidWdFbGVtZW50IHJldGFpbnMgYSByZWZlcmVuY2UgdG8gdGhlIG5vZGVzIGFuZCBjYXVzZXMgYSBtZW1vcnkgbGVhay5cbiAgICAgKiBBIG5vdGUgYWJvdXQgdGhlIHVzZSBvZiBhcHBlbmRDaGlsZC9yZW1vdmVDaGlsZFxuICAgICAqIFRoZSBEZWJ1Z0VsZW1lbnQgaXMga2VlcGluZyBhIHJlZmVyZW5jZSB0byB0aGUgZGV0YWNoZWQgbm9kZSBhbmQgaXRzIHVuY2xlYXIgd2h5LlxuICAgICAqIFRoaXMgZG9lcyB3YXJyYW50IGZ1cnRoZXIgaW52ZXN0aWdhdGlvbi4gQnV0LCBzaW5jZSBpdCBkb2Vzbid0IGhhcHBlbiBpbiBwcm9kdWN0aW9uIG1vZGVcbiAgICAgKiBpdCBpcyBhIGxvdyBwcmlvcml0eSBpc3N1ZSBmb3Igbm93LlxuICAgICAqL1xuICAgIHByaXZhdGUgYWRkQ29udGVudDtcbiAgICBwcml2YXRlIHNob3VsZFJlYWxpZ247XG4gICAgcHJpdmF0ZSBjaGVja0NvbGxlY3RvcjtcbiAgICBuZ0FmdGVyQ29udGVudENoZWNrZWQoKTogdm9pZDtcbiAgICBwcml2YXRlIGFsaWduQ29udGVudDtcbn1cbiJdfQ==