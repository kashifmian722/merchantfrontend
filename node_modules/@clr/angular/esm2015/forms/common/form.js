/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { ContentChildren, Directive, ElementRef, HostListener, Inject, PLATFORM_ID, QueryList, Input, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { LayoutService } from './providers/layout.service';
import { MarkControlService } from './providers/mark-control.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrLabel } from './label';
import { ClrAriaLiveService } from '../../utils/a11y/aria-live.service';
let ClrForm = class ClrForm {
    constructor(layoutService, markControlService, platformId, el, commonStrings, ariaLiveService) {
        this.layoutService = layoutService;
        this.markControlService = markControlService;
        this.platformId = platformId;
        this.el = el;
        this.commonStrings = commonStrings;
        this.ariaLiveService = ariaLiveService;
        this.invalidControls = [];
    }
    set labelSize(size) {
        this.layoutService.labelSize = size;
    }
    /** @deprecated since 2.0 */
    markAsDirty(updateAriaLiveText) {
        this.markAsTouched((updateAriaLiveText = true));
    }
    // Trying to avoid adding an input and keep this backwards compatible at the same time
    markAsTouched(updateAriaLiveText) {
        this.markControlService.markAsTouched();
        // I don't think consumers will call this with undefined, null or other values but
        // want to make sure this only guards against when this is called with false
        if (updateAriaLiveText !== false && isPlatformBrowser(this.platformId)) {
            this.invalidControls = Array.from(this.el.nativeElement.querySelectorAll('.ng-invalid'));
            if (this.invalidControls.length > 0) {
                this.invalidControls[0].focus();
                this.updateAriaLive();
            }
        }
    }
    onFormSubmit() {
        this.markAsTouched();
    }
    /** @deprecated since 3.0, remove in 4.0 */
    updateAriaLive() {
        if (this.invalidControls.length === 0) {
            return;
        }
        const errorList = this.labels.filter(label => this.invalidControls.find(control => label.forAttr === control.id));
        this.ariaLiveService.announce(this.commonStrings.parse(this.commonStrings.keys.formErrorSummary, { ERROR_NUMBER: errorList.length.toString() }));
    }
};
ClrForm.ctorParameters = () => [
    { type: LayoutService },
    { type: MarkControlService },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: ClrAriaLiveService }
];
__decorate([
    Input('clrLabelSize')
], ClrForm.prototype, "labelSize", null);
__decorate([
    ContentChildren(ClrLabel, { descendants: true })
], ClrForm.prototype, "labels", void 0);
__decorate([
    HostListener('submit')
], ClrForm.prototype, "onFormSubmit", null);
ClrForm = __decorate([
    Directive({
        selector: '[clrForm]',
        providers: [LayoutService, MarkControlService, ClrAriaLiveService],
        host: {
            '[class.clr-form]': 'true',
            '[class.clr-form-horizontal]': 'layoutService.isHorizontal()',
            '[class.clr-form-compact]': 'layoutService.isCompact()',
        },
    }),
    __param(2, Inject(PLATFORM_ID))
], ClrForm);
export { ClrForm };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbImZvcm1zL2NvbW1vbi9mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7O0FBRUgsT0FBTyxFQUNMLGVBQWUsRUFDZixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFXeEUsSUFBYSxPQUFPLEdBQXBCLE1BQWEsT0FBTztJQVFsQixZQUNTLGFBQTRCLEVBQzNCLGtCQUFzQyxFQUNqQixVQUFrQixFQUN2QyxFQUFjLEVBQ2QsYUFBc0MsRUFDdEMsZUFBbUM7UUFMcEMsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUNqQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQ3ZDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7UUFDdEMsb0JBQWUsR0FBZixlQUFlLENBQW9CO1FBYnJDLG9CQUFlLEdBQUcsRUFBRSxDQUFDO0lBYzFCLENBQUM7SUFYSixJQUFJLFNBQVMsQ0FBQyxJQUFZO1FBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUN0QyxDQUFDO0lBV0QsNEJBQTRCO0lBQzVCLFdBQVcsQ0FBQyxrQkFBNEI7UUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELHNGQUFzRjtJQUN0RixhQUFhLENBQUMsa0JBQTRCO1FBQ3hDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUV4QyxrRkFBa0Y7UUFDbEYsNEVBQTRFO1FBQzVFLElBQUksa0JBQWtCLEtBQUssS0FBSyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0RSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN6RixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ3ZCO1NBQ0Y7SUFDSCxDQUFDO0lBTUQsWUFBWTtRQUNWLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsMkNBQTJDO0lBQ25DLGNBQWM7UUFDcEIsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDckMsT0FBTztTQUNSO1FBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFFbEgsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEVBQUUsWUFBWSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUNsSCxDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7O1lBaER5QixhQUFhO1lBQ1Asa0JBQWtCO1lBQ0wsTUFBTSx1QkFBOUMsTUFBTSxTQUFDLFdBQVc7WUFDUCxVQUFVO1lBQ0MsdUJBQXVCO1lBQ3JCLGtCQUFrQjs7QUFWN0M7SUFEQyxLQUFLLENBQUMsY0FBYyxDQUFDO3dDQUdyQjtBQWdDRDtJQURDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUM7dUNBQ3JCO0FBRzVCO0lBREMsWUFBWSxDQUFDLFFBQVEsQ0FBQzsyQ0FHdEI7QUEzQ1UsT0FBTztJQVRuQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsV0FBVztRQUNyQixTQUFTLEVBQUUsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLENBQUM7UUFDbEUsSUFBSSxFQUFFO1lBQ0osa0JBQWtCLEVBQUUsTUFBTTtZQUMxQiw2QkFBNkIsRUFBRSw4QkFBOEI7WUFDN0QsMEJBQTBCLEVBQUUsMkJBQTJCO1NBQ3hEO0tBQ0YsQ0FBQztJQVlHLFdBQUEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0dBWFgsT0FBTyxDQXlEbkI7U0F6RFksT0FBTyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7XG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0TGlzdGVuZXIsXG4gIEluamVjdCxcbiAgUExBVEZPUk1fSUQsXG4gIFF1ZXJ5TGlzdCxcbiAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTGF5b3V0U2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2xheW91dC5zZXJ2aWNlJztcbmltcG9ydCB7IE1hcmtDb250cm9sU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL21hcmstY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcbmltcG9ydCB7IENsckxhYmVsIH0gZnJvbSAnLi9sYWJlbCc7XG5pbXBvcnQgeyBDbHJBcmlhTGl2ZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9hMTF5L2FyaWEtbGl2ZS5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NsckZvcm1dJyxcbiAgcHJvdmlkZXJzOiBbTGF5b3V0U2VydmljZSwgTWFya0NvbnRyb2xTZXJ2aWNlLCBDbHJBcmlhTGl2ZVNlcnZpY2VdLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItZm9ybV0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5jbHItZm9ybS1ob3Jpem9udGFsXSc6ICdsYXlvdXRTZXJ2aWNlLmlzSG9yaXpvbnRhbCgpJyxcbiAgICAnW2NsYXNzLmNsci1mb3JtLWNvbXBhY3RdJzogJ2xheW91dFNlcnZpY2UuaXNDb21wYWN0KCknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJGb3JtIHtcbiAgcHJpdmF0ZSBpbnZhbGlkQ29udHJvbHMgPSBbXTtcblxuICBASW5wdXQoJ2NsckxhYmVsU2l6ZScpXG4gIHNldCBsYWJlbFNpemUoc2l6ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5sYXlvdXRTZXJ2aWNlLmxhYmVsU2l6ZSA9IHNpemU7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbGF5b3V0U2VydmljZTogTGF5b3V0U2VydmljZSxcbiAgICBwcml2YXRlIG1hcmtDb250cm9sU2VydmljZTogTWFya0NvbnRyb2xTZXJ2aWNlLFxuICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcGxhdGZvcm1JZDogT2JqZWN0LFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSxcbiAgICBwcml2YXRlIGFyaWFMaXZlU2VydmljZTogQ2xyQXJpYUxpdmVTZXJ2aWNlXG4gICkge31cblxuICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMi4wICovXG4gIG1hcmtBc0RpcnR5KHVwZGF0ZUFyaWFMaXZlVGV4dD86IGJvb2xlYW4pIHtcbiAgICB0aGlzLm1hcmtBc1RvdWNoZWQoKHVwZGF0ZUFyaWFMaXZlVGV4dCA9IHRydWUpKTtcbiAgfVxuXG4gIC8vIFRyeWluZyB0byBhdm9pZCBhZGRpbmcgYW4gaW5wdXQgYW5kIGtlZXAgdGhpcyBiYWNrd2FyZHMgY29tcGF0aWJsZSBhdCB0aGUgc2FtZSB0aW1lXG4gIG1hcmtBc1RvdWNoZWQodXBkYXRlQXJpYUxpdmVUZXh0PzogYm9vbGVhbikge1xuICAgIHRoaXMubWFya0NvbnRyb2xTZXJ2aWNlLm1hcmtBc1RvdWNoZWQoKTtcblxuICAgIC8vIEkgZG9uJ3QgdGhpbmsgY29uc3VtZXJzIHdpbGwgY2FsbCB0aGlzIHdpdGggdW5kZWZpbmVkLCBudWxsIG9yIG90aGVyIHZhbHVlcyBidXRcbiAgICAvLyB3YW50IHRvIG1ha2Ugc3VyZSB0aGlzIG9ubHkgZ3VhcmRzIGFnYWluc3Qgd2hlbiB0aGlzIGlzIGNhbGxlZCB3aXRoIGZhbHNlXG4gICAgaWYgKHVwZGF0ZUFyaWFMaXZlVGV4dCAhPT0gZmFsc2UgJiYgaXNQbGF0Zm9ybUJyb3dzZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgdGhpcy5pbnZhbGlkQ29udHJvbHMgPSBBcnJheS5mcm9tKHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubmctaW52YWxpZCcpKTtcbiAgICAgIGlmICh0aGlzLmludmFsaWRDb250cm9scy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuaW52YWxpZENvbnRyb2xzWzBdLmZvY3VzKCk7XG4gICAgICAgIHRoaXMudXBkYXRlQXJpYUxpdmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAQ29udGVudENoaWxkcmVuKENsckxhYmVsLCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pXG4gIGxhYmVsczogUXVlcnlMaXN0PENsckxhYmVsPjtcblxuICBASG9zdExpc3RlbmVyKCdzdWJtaXQnKVxuICBvbkZvcm1TdWJtaXQoKSB7XG4gICAgdGhpcy5tYXJrQXNUb3VjaGVkKCk7XG4gIH1cblxuICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gIHByaXZhdGUgdXBkYXRlQXJpYUxpdmUoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaW52YWxpZENvbnRyb2xzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGVycm9yTGlzdCA9IHRoaXMubGFiZWxzLmZpbHRlcihsYWJlbCA9PiB0aGlzLmludmFsaWRDb250cm9scy5maW5kKGNvbnRyb2wgPT4gbGFiZWwuZm9yQXR0ciA9PT0gY29udHJvbC5pZCkpO1xuXG4gICAgdGhpcy5hcmlhTGl2ZVNlcnZpY2UuYW5ub3VuY2UoXG4gICAgICB0aGlzLmNvbW1vblN0cmluZ3MucGFyc2UodGhpcy5jb21tb25TdHJpbmdzLmtleXMuZm9ybUVycm9yU3VtbWFyeSwgeyBFUlJPUl9OVU1CRVI6IGVycm9yTGlzdC5sZW5ndGgudG9TdHJpbmcoKSB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==