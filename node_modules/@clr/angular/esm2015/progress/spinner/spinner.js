import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding, ElementRef, AfterViewInit } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
let ClrSpinner = class ClrSpinner {
    constructor(el, ariaLiveService) {
        this.el = el;
        this.ariaLiveService = ariaLiveService;
    }
    ngAfterViewInit() {
        this.ariaLiveService.announce(this.el.nativeElement, this.ariaLive);
    }
    /**
     * Default class for all spinners. This class is always true
     */
    get spinnerClass() {
        return true;
    }
    get inlineClass() {
        return this._inline;
    }
    set clrInline(value) {
        this._inline = isBooleanAttributeSet(value);
    }
    get inverseClass() {
        return this._inverse;
    }
    set clrInverse(value) {
        this._inverse = isBooleanAttributeSet(value);
    }
    get smallClass() {
        return this._small;
    }
    set clrSmall(value) {
        this._small = isBooleanAttributeSet(value);
    }
    get mediumClass() {
        if (this._small) {
            return false;
        }
        return this._medium;
    }
    set clrMedium(value) {
        this._medium = isBooleanAttributeSet(value);
    }
    get ariaLive() {
        if (isBooleanAttributeSet(this.assertive)) {
            return ClrAriaLivePoliteness.assertive;
        }
        if (isBooleanAttributeSet(this.off)) {
            return ClrAriaLivePoliteness.off;
        }
        return ClrAriaLivePoliteness.polite;
    }
};
ClrSpinner.ctorParameters = () => [
    { type: ElementRef },
    { type: ClrAriaLiveService }
];
__decorate([
    HostBinding('class.spinner')
], ClrSpinner.prototype, "spinnerClass", null);
__decorate([
    HostBinding('class.spinner-inline')
], ClrSpinner.prototype, "inlineClass", null);
__decorate([
    Input('clrInline')
], ClrSpinner.prototype, "clrInline", null);
__decorate([
    HostBinding('class.spinner-inverse')
], ClrSpinner.prototype, "inverseClass", null);
__decorate([
    Input('clrInverse')
], ClrSpinner.prototype, "clrInverse", null);
__decorate([
    HostBinding('class.spinner-sm')
], ClrSpinner.prototype, "smallClass", null);
__decorate([
    Input('clrSmall')
], ClrSpinner.prototype, "clrSmall", null);
__decorate([
    HostBinding('class.spinner-md')
], ClrSpinner.prototype, "mediumClass", null);
__decorate([
    Input('clrMedium')
], ClrSpinner.prototype, "clrMedium", null);
__decorate([
    Input('clrAssertive')
], ClrSpinner.prototype, "assertive", void 0);
__decorate([
    Input('clrOff')
], ClrSpinner.prototype, "off", void 0);
ClrSpinner = __decorate([
    Component({
        selector: 'clr-spinner',
        providers: [ClrAriaLiveService],
        template: `
    <ng-content></ng-content>
  `,
        host: {
            '[attr.aria-busy]': 'true',
        }
    })
], ClrSpinner);
export { ClrSpinner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInByb2dyZXNzL3NwaW5uZXIvc3Bpbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBWS9GLElBQWEsVUFBVSxHQUF2QixNQUFhLFVBQVU7SUFDckIsWUFBb0IsRUFBYyxFQUFVLGVBQW1DO1FBQTNELE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7SUFBRyxDQUFDO0lBRW5GLGVBQWU7UUFDYixJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDdEUsQ0FBQztJQUVEOztPQUVHO0lBRUgsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBS0QsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFHRCxJQUFJLFNBQVMsQ0FBQyxLQUF1QjtRQUNuQyxJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFJRCxJQUFJLFlBQVk7UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDdkIsQ0FBQztJQUdELElBQUksVUFBVSxDQUFDLEtBQXVCO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQWFELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBR0QsSUFBSSxRQUFRLENBQUMsS0FBdUI7UUFDbEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBZUQsSUFBSSxXQUFXO1FBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBR0QsSUFBSSxTQUFTLENBQUMsS0FBdUI7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBcUJELElBQUksUUFBUTtRQUNWLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8scUJBQXFCLENBQUMsU0FBUyxDQUFDO1NBQ3hDO1FBQ0QsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbkMsT0FBTyxxQkFBcUIsQ0FBQyxHQUFHLENBQUM7U0FDbEM7UUFDRCxPQUFPLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztJQUN0QyxDQUFDO0NBQ0YsQ0FBQTs7WUE5R3lCLFVBQVU7WUFBMkIsa0JBQWtCOztBQVUvRTtJQURDLFdBQVcsQ0FBQyxlQUFlLENBQUM7OENBRzVCO0FBS0Q7SUFEQyxXQUFXLENBQUMsc0JBQXNCLENBQUM7NkNBR25DO0FBR0Q7SUFEQyxLQUFLLENBQUMsV0FBVyxDQUFDOzJDQUdsQjtBQUlEO0lBREMsV0FBVyxDQUFDLHVCQUF1QixDQUFDOzhDQUdwQztBQUdEO0lBREMsS0FBSyxDQUFDLFlBQVksQ0FBQzs0Q0FHbkI7QUFhRDtJQURDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQzs0Q0FHL0I7QUFHRDtJQURDLEtBQUssQ0FBQyxVQUFVLENBQUM7MENBR2pCO0FBZUQ7SUFEQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7NkNBTS9CO0FBR0Q7SUFEQyxLQUFLLENBQUMsV0FBVyxDQUFDOzJDQUdsQjtBQWtCc0I7SUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQzs2Q0FBb0I7QUFFekI7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzt1Q0FBYztBQXJHbkIsVUFBVTtJQVZ0QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsYUFBYTtRQUN2QixTQUFTLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztRQUMvQixRQUFRLEVBQUU7O0dBRVQ7UUFDRCxJQUFJLEVBQUU7WUFDSixrQkFBa0IsRUFBRSxNQUFNO1NBQzNCO0tBQ0YsQ0FBQztHQUNXLFVBQVUsQ0ErR3RCO1NBL0dZLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBIb3N0QmluZGluZywgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNCb29sZWFuQXR0cmlidXRlU2V0IH0gZnJvbSAnLi4vLi4vdXRpbHMvY29tcG9uZW50L2lzLWJvb2xlYW4tYXR0cmlidXRlLXNldCc7XG5pbXBvcnQgeyBDbHJBcmlhTGl2ZVNlcnZpY2UsIENsckFyaWFMaXZlUG9saXRlbmVzcyB9IGZyb20gJy4uLy4uL3V0aWxzL2ExMXkvYXJpYS1saXZlLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItc3Bpbm5lcicsXG4gIHByb3ZpZGVyczogW0NsckFyaWFMaXZlU2VydmljZV0sXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxuICBob3N0OiB7XG4gICAgJ1thdHRyLmFyaWEtYnVzeV0nOiAndHJ1ZScsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsclNwaW5uZXIgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBhcmlhTGl2ZVNlcnZpY2U6IENsckFyaWFMaXZlU2VydmljZSkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5hcmlhTGl2ZVNlcnZpY2UuYW5ub3VuY2UodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmFyaWFMaXZlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGNsYXNzIGZvciBhbGwgc3Bpbm5lcnMuIFRoaXMgY2xhc3MgaXMgYWx3YXlzIHRydWVcbiAgICovXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Bpbm5lcicpXG4gIGdldCBzcGlubmVyQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBTdHlsZVxuICBwcml2YXRlIF9pbmxpbmU6IGJvb2xlYW47XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Bpbm5lci1pbmxpbmUnKVxuICBnZXQgaW5saW5lQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lubGluZTtcbiAgfVxuXG4gIEBJbnB1dCgnY2xySW5saW5lJylcbiAgc2V0IGNscklubGluZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHRoaXMuX2lubGluZSA9IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh2YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIF9pbnZlcnNlOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItaW52ZXJzZScpXG4gIGdldCBpbnZlcnNlQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ludmVyc2U7XG4gIH1cblxuICBASW5wdXQoJ2NsckludmVyc2UnKVxuICBzZXQgY2xySW52ZXJzZSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHRoaXMuX2ludmVyc2UgPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgLy8gU2l6ZVxuICAvKipcbiAgICogQnkgZGVmYXVsdCBhbGwgc3Bpbm5lcnMgYXJlIExhcmdlLiAoc3Bpbm5lci1sZylcbiAgICogVG8gY2hhbmdlIHRoZSBzaXplIHlvdSBuZWVkIHRvIHVzZSBzZXQgY2xyU21hbGwgb3IgY2xyTWVkaXVtIHRvIFRSVUUvXG4gICAqL1xuXG4gIC8qKlxuICAgKiBTbWFsbFxuICAgKi9cbiAgcHJpdmF0ZSBfc21hbGw6IGJvb2xlYW47XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Bpbm5lci1zbScpXG4gIGdldCBzbWFsbENsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLl9zbWFsbDtcbiAgfVxuXG4gIEBJbnB1dCgnY2xyU21hbGwnKVxuICBzZXQgY2xyU21hbGwodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9zbWFsbCA9IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogV2hlbiBjbHJTbWFsbCAmIGNsck1lZGl1bSBhcmUgc2V0IGJvdGggdG8gdHJ1ZS5cbiAgICogVGhlIENTUyB3aXRoIGhpZ2ggcHJpb3JpdHkgd2lsbCBiZSBzbWFsbCAtIHNvIG1lZGl1bSBzaXplIHdpbGwgYmUgaWdub3JlZC5cbiAgICpcbiAgICogRm9yIHRoaXMgcmVhc29uIGlmIGNsclNtYWxsIGlzIHNldCB3ZSB3b24ndCBhZGQgY2xyTWVkaXVtIGNsYXNzLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGlzIGRpY3RhdGVkIGJ5IHRoZSBDU1MgcnVsZXMuXG4gICAqIERPTidUIFVTRSBjbHJTbWFsbCAmIGNsck1lZGl1bSB0byB0b2dnbGUgY2xhc3Nlcy4gVGhpcyBjb3VsZCBjaGFuZ2Ugd2l0aG91dCBub3RpY2UuXG4gICAqXG4gICAqIEFsc28gdGhlcmUgaXMgbm8gbG9naWNhbCBuZWVkIHRvIGhhdmUgYm90aCBvZiB0aGVtIHNldCB0byBUUlVFIG9yIEZBTFNFLlxuICAgKi9cbiAgcHJpdmF0ZSBfbWVkaXVtOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnNwaW5uZXItbWQnKVxuICBnZXQgbWVkaXVtQ2xhc3MoKSB7XG4gICAgaWYgKHRoaXMuX3NtYWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tZWRpdW07XG4gIH1cblxuICBASW5wdXQoJ2Nsck1lZGl1bScpXG4gIHNldCBjbHJNZWRpdW0odmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpIHtcbiAgICB0aGlzLl9tZWRpdW0gPSBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodmFsdWUpO1xuICB9XG5cbiAgLy8gQXJpYSBMaXZlXG5cbiAgLyoqXG4gICAqIEJ5IGRlZmF1bHQgYXJpYS1saXZlIHdpbGwgYmUgc2V0IHRvIGBwb2xpdGVgIC5cbiAgICogVG8gY2hhbmdlIGlzIGl0IHlvdSBuZWVkIHRvIHNldCBjbHJBc3NlcnRpdmUgb3IgY2xyT2ZmIHRvIFRSVUVcbiAgICpcbiAgICogVGhlcmUgaXMgcHJpb3JpdHk6XG4gICAqICAgRGVmYXVsdDogcG9saXRlXG4gICAqICAgQXNlcnRpdmVcbiAgICogICBPZmZcbiAgICpcbiAgICogSW4gY2FzZSB3aGVuIGZvciBzb21lIHJlYXNvbiB5b3UgaGF2ZSBjbHJBc3NlcnRpdmU9VFJVRSBhbmQgY2xyT2ZmPVRSVUUsXG4gICAqIHdlIGdvbm5hIHNldCBgYXNzZXJ0aXZlYCBhcyB2YWx1ZSBvZiBhcmlhLWxpdmUuXG4gICAqXG4gICAqL1xuICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gIEBJbnB1dCgnY2xyQXNzZXJ0aXZlJykgYXNzZXJ0aXZlOiBib29sZWFuO1xuICAvKiogQGRlcHJlY2F0ZWQgc2luY2UgMy4wLCByZW1vdmUgaW4gNC4wICovXG4gIEBJbnB1dCgnY2xyT2ZmJykgb2ZmOiBib29sZWFuO1xuICBnZXQgYXJpYUxpdmUoKTogQ2xyQXJpYUxpdmVQb2xpdGVuZXNzIHtcbiAgICBpZiAoaXNCb29sZWFuQXR0cmlidXRlU2V0KHRoaXMuYXNzZXJ0aXZlKSkge1xuICAgICAgcmV0dXJuIENsckFyaWFMaXZlUG9saXRlbmVzcy5hc3NlcnRpdmU7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodGhpcy5vZmYpKSB7XG4gICAgICByZXR1cm4gQ2xyQXJpYUxpdmVQb2xpdGVuZXNzLm9mZjtcbiAgICB9XG4gICAgcmV0dXJuIENsckFyaWFMaXZlUG9saXRlbmVzcy5wb2xpdGU7XG4gIH1cbn1cbiJdfQ==