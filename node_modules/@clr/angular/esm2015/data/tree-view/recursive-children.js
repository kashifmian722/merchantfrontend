/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, Input, Optional } from '@angular/core';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { TreeFeaturesService } from './tree-features.service';
let RecursiveChildren = 
/**
 * Internal component, do not export!
 * This is part of the hack to get around https://github.com/angular/angular/issues/15998
 */
class RecursiveChildren {
    constructor(featuresService, expandService) {
        this.featuresService = featuresService;
        this.expandService = expandService;
        if (expandService) {
            this.subscription = this.expandService.expandChange.subscribe(value => {
                if (!value && this.parent && !this.featuresService.eager && this.featuresService.recursion) {
                    // In the case of lazy-loading recursive trees, we clear the children on collapse.
                    // This is better in case they change between two user interaction, and that way
                    // the app itself can decide whether to cache them or not.
                    this.parent.clearChildren();
                }
            });
        }
    }
    shouldRender() {
        return (this.featuresService.recursion &&
            // In the smart case, we eagerly render all the recursive children
            // to make sure two-way bindings for selection are available.
            // They will be hidden with CSS by the parent.
            (this.featuresService.eager || !this.expandService || this.expandService.expanded));
    }
    getContext(node) {
        return {
            $implicit: node.model,
            clrModel: node,
        };
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
};
RecursiveChildren.ctorParameters = () => [
    { type: TreeFeaturesService },
    { type: IfExpandService, decorators: [{ type: Optional }] }
];
__decorate([
    Input('parent')
], RecursiveChildren.prototype, "parent", void 0);
__decorate([
    Input('children')
], RecursiveChildren.prototype, "children", void 0);
RecursiveChildren = __decorate([
    Component({
        selector: 'clr-recursive-children',
        template: `
    <ng-container *ngIf="shouldRender()">
      <ng-container *ngFor="let child of parent?.children || children">
        <ng-container *ngTemplateOutlet="featuresService.recursion.template; context: getContext(child)"></ng-container>
      </ng-container>
    </ng-container>
  `,
        host: {
            '[attr.role]': '"group"',
        }
    })
    /**
     * Internal component, do not export!
     * This is part of the hack to get around https://github.com/angular/angular/issues/15998
     */
    ,
    __param(1, Optional())
], RecursiveChildren);
export { RecursiveChildren };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjdXJzaXZlLWNoaWxkcmVuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNsci9hbmd1bGFyLyIsInNvdXJjZXMiOlsiZGF0YS90cmVlLXZpZXcvcmVjdXJzaXZlLWNoaWxkcmVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7O0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQXNCOUQsSUFBYSxpQkFBaUI7QUFKOUI7OztHQUdHO0FBQ0gsTUFBYSxpQkFBaUI7SUFDNUIsWUFBbUIsZUFBdUMsRUFBc0IsYUFBOEI7UUFBM0Ysb0JBQWUsR0FBZixlQUFlLENBQXdCO1FBQXNCLGtCQUFhLEdBQWIsYUFBYSxDQUFpQjtRQUM1RyxJQUFJLGFBQWEsRUFBRTtZQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFDcEUsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEVBQUU7b0JBQzFGLGtGQUFrRjtvQkFDbEYsZ0ZBQWdGO29CQUNoRiwwREFBMEQ7b0JBQzlCLElBQUksQ0FBQyxNQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7aUJBQzFEO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFFRCxZQUFZO1FBQ1YsT0FBTyxDQUNMLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUztZQUM5QixrRUFBa0U7WUFDbEUsNkRBQTZEO1lBQzdELDhDQUE4QztZQUM5QyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUNuRixDQUFDO0lBQ0osQ0FBQztJQU9ELFVBQVUsQ0FBQyxJQUFzQjtRQUMvQixPQUFPO1lBQ0wsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3JCLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQztJQUNKLENBQUM7SUFJRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0NBQ0YsQ0FBQTs7WUExQ3FDLG1CQUFtQjtZQUF3QyxlQUFlLHVCQUFqRCxRQUFROztBQXlCcEQ7SUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQztpREFBMEI7QUFDdkI7SUFBbEIsS0FBSyxDQUFDLFVBQVUsQ0FBQzttREFBOEI7QUEzQnJDLGlCQUFpQjtJQWpCN0IsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHdCQUF3QjtRQUNsQyxRQUFRLEVBQUU7Ozs7OztHQU1UO1FBQ0QsSUFBSSxFQUFFO1lBQ0osYUFBYSxFQUFFLFNBQVM7U0FDekI7S0FDRixDQUFDO0lBQ0Y7OztPQUdHOztJQUU0RCxXQUFBLFFBQVEsRUFBRSxDQUFBO0dBRDVELGlCQUFpQixDQTJDN0I7U0EzQ1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDE5IFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IElmRXhwYW5kU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmRpdGlvbmFsL2lmLWV4cGFuZGVkLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJlZUZlYXR1cmVzU2VydmljZSB9IGZyb20gJy4vdHJlZS1mZWF0dXJlcy5zZXJ2aWNlJztcbmltcG9ydCB7IFRyZWVOb2RlTW9kZWwgfSBmcm9tICcuL21vZGVscy90cmVlLW5vZGUubW9kZWwnO1xuaW1wb3J0IHsgQ2xyUmVjdXJzaXZlRm9yT2ZDb250ZXh0IH0gZnJvbSAnLi9yZWN1cnNpdmUtZm9yLW9mJztcbmltcG9ydCB7IFJlY3Vyc2l2ZVRyZWVOb2RlTW9kZWwgfSBmcm9tICcuL21vZGVscy9yZWN1cnNpdmUtdHJlZS1ub2RlLm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLXJlY3Vyc2l2ZS1jaGlsZHJlbicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInNob3VsZFJlbmRlcigpXCI+XG4gICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBjaGlsZCBvZiBwYXJlbnQ/LmNoaWxkcmVuIHx8IGNoaWxkcmVuXCI+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJmZWF0dXJlc1NlcnZpY2UucmVjdXJzaW9uLnRlbXBsYXRlOyBjb250ZXh0OiBnZXRDb250ZXh0KGNoaWxkKVwiPjwvbmctY29udGFpbmVyPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG4gIGAsXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIucm9sZV0nOiAnXCJncm91cFwiJywgLy8gU2FmYXJpICsgVk8gbmVlZHMgZGlyZWN0IHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRyZWVpdGVtIGFuZCBncm91cDsgbm8gZWxlbWVudCBzaG91bGQgZXhpc3QgYmV0d2VlbiB0aGVtXG4gIH0sXG59KVxuLyoqXG4gKiBJbnRlcm5hbCBjb21wb25lbnQsIGRvIG5vdCBleHBvcnQhXG4gKiBUaGlzIGlzIHBhcnQgb2YgdGhlIGhhY2sgdG8gZ2V0IGFyb3VuZCBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xNTk5OFxuICovXG5leHBvcnQgY2xhc3MgUmVjdXJzaXZlQ2hpbGRyZW48VD4ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZmVhdHVyZXNTZXJ2aWNlOiBUcmVlRmVhdHVyZXNTZXJ2aWNlPFQ+LCBAT3B0aW9uYWwoKSBwcml2YXRlIGV4cGFuZFNlcnZpY2U6IElmRXhwYW5kU2VydmljZSkge1xuICAgIGlmIChleHBhbmRTZXJ2aWNlKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuZXhwYW5kU2VydmljZS5leHBhbmRDaGFuZ2Uuc3Vic2NyaWJlKHZhbHVlID0+IHtcbiAgICAgICAgaWYgKCF2YWx1ZSAmJiB0aGlzLnBhcmVudCAmJiAhdGhpcy5mZWF0dXJlc1NlcnZpY2UuZWFnZXIgJiYgdGhpcy5mZWF0dXJlc1NlcnZpY2UucmVjdXJzaW9uKSB7XG4gICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgbGF6eS1sb2FkaW5nIHJlY3Vyc2l2ZSB0cmVlcywgd2UgY2xlYXIgdGhlIGNoaWxkcmVuIG9uIGNvbGxhcHNlLlxuICAgICAgICAgIC8vIFRoaXMgaXMgYmV0dGVyIGluIGNhc2UgdGhleSBjaGFuZ2UgYmV0d2VlbiB0d28gdXNlciBpbnRlcmFjdGlvbiwgYW5kIHRoYXQgd2F5XG4gICAgICAgICAgLy8gdGhlIGFwcCBpdHNlbGYgY2FuIGRlY2lkZSB3aGV0aGVyIHRvIGNhY2hlIHRoZW0gb3Igbm90LlxuICAgICAgICAgICg8UmVjdXJzaXZlVHJlZU5vZGVNb2RlbDxUPj50aGlzLnBhcmVudCkuY2xlYXJDaGlsZHJlbigpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRSZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuZmVhdHVyZXNTZXJ2aWNlLnJlY3Vyc2lvbiAmJlxuICAgICAgLy8gSW4gdGhlIHNtYXJ0IGNhc2UsIHdlIGVhZ2VybHkgcmVuZGVyIGFsbCB0aGUgcmVjdXJzaXZlIGNoaWxkcmVuXG4gICAgICAvLyB0byBtYWtlIHN1cmUgdHdvLXdheSBiaW5kaW5ncyBmb3Igc2VsZWN0aW9uIGFyZSBhdmFpbGFibGUuXG4gICAgICAvLyBUaGV5IHdpbGwgYmUgaGlkZGVuIHdpdGggQ1NTIGJ5IHRoZSBwYXJlbnQuXG4gICAgICAodGhpcy5mZWF0dXJlc1NlcnZpY2UuZWFnZXIgfHwgIXRoaXMuZXhwYW5kU2VydmljZSB8fCB0aGlzLmV4cGFuZFNlcnZpY2UuZXhwYW5kZWQpXG4gICAgKTtcbiAgfVxuXG4gIC8vIE9mZmVyaW5nIHRoZSBvcHRpb24gdG8gZWl0aGVyIGdpdmUgdGhlIHBhcmVudCBub2RlIHRvIHJlY3Vyc2UgcG90ZW50aWFsbHkgbGF6aWx5LFxuICAvLyBvciBkaXJlY3RseSB0aGUgbGlzdCBvZiBjaGlsZHJlbiB0byBkaXNwbGF5LlxuICBASW5wdXQoJ3BhcmVudCcpIHBhcmVudDogVHJlZU5vZGVNb2RlbDxUPjtcbiAgQElucHV0KCdjaGlsZHJlbicpIGNoaWxkcmVuOiBUcmVlTm9kZU1vZGVsPFQ+W107XG5cbiAgZ2V0Q29udGV4dChub2RlOiBUcmVlTm9kZU1vZGVsPFQ+KTogQ2xyUmVjdXJzaXZlRm9yT2ZDb250ZXh0PFQ+IHtcbiAgICByZXR1cm4ge1xuICAgICAgJGltcGxpY2l0OiBub2RlLm1vZGVsLFxuICAgICAgY2xyTW9kZWw6IG5vZGUsXG4gICAgfTtcbiAgfVxuXG4gIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==