/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 * /*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.

 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./datepicker.module";
import * as i2 from "../../utils/host-wrapping/empty-anchor.ngfactory";
import * as i3 from "../common/control-container.ngfactory";
import * as i4 from "./date-container.ngfactory";
import * as i5 from "@angular/common";
import * as i6 from "../../utils/host-wrapping/host-wrapping.module";
import * as i7 from "../../utils/conditional/conditional.module";
import * as i8 from "../../utils/popover/popover.module";
import * as i9 from "../../icon/icon.module";
import * as i10 from "../../utils/focus-trap/focus-trap.module";
import * as i11 from "../common/common.module";
var ClrDatepickerModuleNgFactory = i0.ɵcmf(i1.ClrDatepickerModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, [i2.EmptyAnchorNgFactory, i3.ClrControlContainerNgFactory, i4.ClrDateContainerNgFactory]], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i5.NgLocalization, i5.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(1073742336, i5.CommonModule, i5.CommonModule, []), i0.ɵmpd(1073742336, i6.ClrHostWrappingModule, i6.ClrHostWrappingModule, []), i0.ɵmpd(1073742336, i7.ClrConditionalModule, i7.ClrConditionalModule, []), i0.ɵmpd(1073742336, i8.ClrPopoverModuleNext, i8.ClrPopoverModuleNext, []), i0.ɵmpd(1073742336, i9.ClrIconModule, i9.ClrIconModule, []), i0.ɵmpd(1073742336, i10.ClrFocusTrapModule, i10.ClrFocusTrapModule, []), i0.ɵmpd(1073742336, i11.ClrCommonFormsModule, i11.ClrCommonFormsModule, []), i0.ɵmpd(1073742336, i1.ClrDatepickerModule, i1.ClrDatepickerModule, [])]); });
export { ClrDatepickerModuleNgFactory as ClrDatepickerModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,