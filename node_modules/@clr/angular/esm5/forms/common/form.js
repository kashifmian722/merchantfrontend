/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { ContentChildren, Directive, ElementRef, HostListener, Inject, PLATFORM_ID, QueryList, Input, } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { LayoutService } from './providers/layout.service';
import { MarkControlService } from './providers/mark-control.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrLabel } from './label';
import { ClrAriaLiveService } from '../../utils/a11y/aria-live.service';
var ClrForm = /** @class */ (function () {
    function ClrForm(layoutService, markControlService, platformId, el, commonStrings, ariaLiveService) {
        this.layoutService = layoutService;
        this.markControlService = markControlService;
        this.platformId = platformId;
        this.el = el;
        this.commonStrings = commonStrings;
        this.ariaLiveService = ariaLiveService;
        this.invalidControls = [];
    }
    Object.defineProperty(ClrForm.prototype, "labelSize", {
        set: function (size) {
            this.layoutService.labelSize = size;
        },
        enumerable: true,
        configurable: true
    });
    /** @deprecated since 2.0 */
    ClrForm.prototype.markAsDirty = function (updateAriaLiveText) {
        this.markAsTouched((updateAriaLiveText = true));
    };
    // Trying to avoid adding an input and keep this backwards compatible at the same time
    ClrForm.prototype.markAsTouched = function (updateAriaLiveText) {
        this.markControlService.markAsTouched();
        // I don't think consumers will call this with undefined, null or other values but
        // want to make sure this only guards against when this is called with false
        if (updateAriaLiveText !== false && isPlatformBrowser(this.platformId)) {
            this.invalidControls = Array.from(this.el.nativeElement.querySelectorAll('.ng-invalid'));
            if (this.invalidControls.length > 0) {
                this.invalidControls[0].focus();
                this.updateAriaLive();
            }
        }
    };
    ClrForm.prototype.onFormSubmit = function () {
        this.markAsTouched();
    };
    /** @deprecated since 3.0, remove in 4.0 */
    ClrForm.prototype.updateAriaLive = function () {
        var _this = this;
        if (this.invalidControls.length === 0) {
            return;
        }
        var errorList = this.labels.filter(function (label) { return _this.invalidControls.find(function (control) { return label.forAttr === control.id; }); });
        this.ariaLiveService.announce(this.commonStrings.parse(this.commonStrings.keys.formErrorSummary, { ERROR_NUMBER: errorList.length.toString() }));
    };
    ClrForm.ctorParameters = function () { return [
        { type: LayoutService },
        { type: MarkControlService },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ElementRef },
        { type: ClrCommonStringsService },
        { type: ClrAriaLiveService }
    ]; };
    __decorate([
        Input('clrLabelSize')
    ], ClrForm.prototype, "labelSize", null);
    __decorate([
        ContentChildren(ClrLabel, { descendants: true })
    ], ClrForm.prototype, "labels", void 0);
    __decorate([
        HostListener('submit')
    ], ClrForm.prototype, "onFormSubmit", null);
    ClrForm = __decorate([
        Directive({
            selector: '[clrForm]',
            providers: [LayoutService, MarkControlService, ClrAriaLiveService],
            host: {
                '[class.clr-form]': 'true',
                '[class.clr-form-horizontal]': 'layoutService.isHorizontal()',
                '[class.clr-form-compact]': 'layoutService.isCompact()',
            },
        }),
        __param(2, Inject(PLATFORM_ID))
    ], ClrForm);
    return ClrForm;
}());
export { ClrForm };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbImZvcm1zL2NvbW1vbi9mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0dBSUc7O0FBRUgsT0FBTyxFQUNMLGVBQWUsRUFDZixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxLQUFLLEdBQ04sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbkMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFXeEU7SUFRRSxpQkFDUyxhQUE0QixFQUMzQixrQkFBc0MsRUFDakIsVUFBa0IsRUFDdkMsRUFBYyxFQUNkLGFBQXNDLEVBQ3RDLGVBQW1DO1FBTHBDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzNCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7UUFDakIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUN2QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2Qsa0JBQWEsR0FBYixhQUFhLENBQXlCO1FBQ3RDLG9CQUFlLEdBQWYsZUFBZSxDQUFvQjtRQWJyQyxvQkFBZSxHQUFHLEVBQUUsQ0FBQztJQWMxQixDQUFDO0lBWEosc0JBQUksOEJBQVM7YUFBYixVQUFjLElBQVk7WUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RDLENBQUM7OztPQUFBO0lBV0QsNEJBQTRCO0lBQzVCLDZCQUFXLEdBQVgsVUFBWSxrQkFBNEI7UUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELHNGQUFzRjtJQUN0RiwrQkFBYSxHQUFiLFVBQWMsa0JBQTRCO1FBQ3hDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUV4QyxrRkFBa0Y7UUFDbEYsNEVBQTRFO1FBQzVFLElBQUksa0JBQWtCLEtBQUssS0FBSyxJQUFJLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN0RSxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUN6RixJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztnQkFDaEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO2FBQ3ZCO1NBQ0Y7SUFDSCxDQUFDO0lBTUQsOEJBQVksR0FBWjtRQUNFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsMkNBQTJDO0lBQ25DLGdDQUFjLEdBQXRCO1FBQUEsaUJBVUM7UUFUQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsS0FBSyxDQUFDLE9BQU8sS0FBSyxPQUFPLENBQUMsRUFBRSxFQUE1QixDQUE0QixDQUFDLEVBQWxFLENBQWtFLENBQUMsQ0FBQztRQUVsSCxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQ2xILENBQUM7SUFDSixDQUFDOztnQkEvQ3VCLGFBQWE7Z0JBQ1Asa0JBQWtCO2dCQUNMLE1BQU0sdUJBQTlDLE1BQU0sU0FBQyxXQUFXO2dCQUNQLFVBQVU7Z0JBQ0MsdUJBQXVCO2dCQUNyQixrQkFBa0I7O0lBVjdDO1FBREMsS0FBSyxDQUFDLGNBQWMsQ0FBQzs0Q0FHckI7SUFnQ0Q7UUFEQyxlQUFlLENBQUMsUUFBUSxFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxDQUFDOzJDQUNyQjtJQUc1QjtRQURDLFlBQVksQ0FBQyxRQUFRLENBQUM7K0NBR3RCO0lBM0NVLE9BQU87UUFUbkIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxFQUFFLENBQUMsYUFBYSxFQUFFLGtCQUFrQixFQUFFLGtCQUFrQixDQUFDO1lBQ2xFLElBQUksRUFBRTtnQkFDSixrQkFBa0IsRUFBRSxNQUFNO2dCQUMxQiw2QkFBNkIsRUFBRSw4QkFBOEI7Z0JBQzdELDBCQUEwQixFQUFFLDJCQUEyQjthQUN4RDtTQUNGLENBQUM7UUFZRyxXQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtPQVhYLE9BQU8sQ0F5RG5CO0lBQUQsY0FBQztDQUFBLEFBekRELElBeURDO1NBekRZLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQge1xuICBDb250ZW50Q2hpbGRyZW4sXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBJbmplY3QsXG4gIFBMQVRGT1JNX0lELFxuICBRdWVyeUxpc3QsXG4gIElucHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IExheW91dFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9sYXlvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBNYXJrQ29udHJvbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9tYXJrLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBDbHJMYWJlbCB9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHsgQ2xyQXJpYUxpdmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tjbHJGb3JtXScsXG4gIHByb3ZpZGVyczogW0xheW91dFNlcnZpY2UsIE1hcmtDb250cm9sU2VydmljZSwgQ2xyQXJpYUxpdmVTZXJ2aWNlXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuY2xyLWZvcm1dJzogJ3RydWUnLFxuICAgICdbY2xhc3MuY2xyLWZvcm0taG9yaXpvbnRhbF0nOiAnbGF5b3V0U2VydmljZS5pc0hvcml6b250YWwoKScsXG4gICAgJ1tjbGFzcy5jbHItZm9ybS1jb21wYWN0XSc6ICdsYXlvdXRTZXJ2aWNlLmlzQ29tcGFjdCgpJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRm9ybSB7XG4gIHByaXZhdGUgaW52YWxpZENvbnRyb2xzID0gW107XG5cbiAgQElucHV0KCdjbHJMYWJlbFNpemUnKVxuICBzZXQgbGFiZWxTaXplKHNpemU6IG51bWJlcikge1xuICAgIHRoaXMubGF5b3V0U2VydmljZS5sYWJlbFNpemUgPSBzaXplO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGxheW91dFNlcnZpY2U6IExheW91dFNlcnZpY2UsXG4gICAgcHJpdmF0ZSBtYXJrQ29udHJvbFNlcnZpY2U6IE1hcmtDb250cm9sU2VydmljZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IE9iamVjdCxcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBhcmlhTGl2ZVNlcnZpY2U6IENsckFyaWFMaXZlU2VydmljZVxuICApIHt9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDIuMCAqL1xuICBtYXJrQXNEaXJ0eSh1cGRhdGVBcmlhTGl2ZVRleHQ/OiBib29sZWFuKSB7XG4gICAgdGhpcy5tYXJrQXNUb3VjaGVkKCh1cGRhdGVBcmlhTGl2ZVRleHQgPSB0cnVlKSk7XG4gIH1cblxuICAvLyBUcnlpbmcgdG8gYXZvaWQgYWRkaW5nIGFuIGlucHV0IGFuZCBrZWVwIHRoaXMgYmFja3dhcmRzIGNvbXBhdGlibGUgYXQgdGhlIHNhbWUgdGltZVxuICBtYXJrQXNUb3VjaGVkKHVwZGF0ZUFyaWFMaXZlVGV4dD86IGJvb2xlYW4pIHtcbiAgICB0aGlzLm1hcmtDb250cm9sU2VydmljZS5tYXJrQXNUb3VjaGVkKCk7XG5cbiAgICAvLyBJIGRvbid0IHRoaW5rIGNvbnN1bWVycyB3aWxsIGNhbGwgdGhpcyB3aXRoIHVuZGVmaW5lZCwgbnVsbCBvciBvdGhlciB2YWx1ZXMgYnV0XG4gICAgLy8gd2FudCB0byBtYWtlIHN1cmUgdGhpcyBvbmx5IGd1YXJkcyBhZ2FpbnN0IHdoZW4gdGhpcyBpcyBjYWxsZWQgd2l0aCBmYWxzZVxuICAgIGlmICh1cGRhdGVBcmlhTGl2ZVRleHQgIT09IGZhbHNlICYmIGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMuaW52YWxpZENvbnRyb2xzID0gQXJyYXkuZnJvbSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm5nLWludmFsaWQnKSk7XG4gICAgICBpZiAodGhpcy5pbnZhbGlkQ29udHJvbHMubGVuZ3RoID4gMCkge1xuICAgICAgICB0aGlzLmludmFsaWRDb250cm9sc1swXS5mb2N1cygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUFyaWFMaXZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQENvbnRlbnRDaGlsZHJlbihDbHJMYWJlbCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICBsYWJlbHM6IFF1ZXJ5TGlzdDxDbHJMYWJlbD47XG5cbiAgQEhvc3RMaXN0ZW5lcignc3VibWl0JylcbiAgb25Gb3JtU3VibWl0KCkge1xuICAgIHRoaXMubWFya0FzVG91Y2hlZCgpO1xuICB9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICBwcml2YXRlIHVwZGF0ZUFyaWFMaXZlKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmludmFsaWRDb250cm9scy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlcnJvckxpc3QgPSB0aGlzLmxhYmVscy5maWx0ZXIobGFiZWwgPT4gdGhpcy5pbnZhbGlkQ29udHJvbHMuZmluZChjb250cm9sID0+IGxhYmVsLmZvckF0dHIgPT09IGNvbnRyb2wuaWQpKTtcblxuICAgIHRoaXMuYXJpYUxpdmVTZXJ2aWNlLmFubm91bmNlKFxuICAgICAgdGhpcy5jb21tb25TdHJpbmdzLnBhcnNlKHRoaXMuY29tbW9uU3RyaW5ncy5rZXlzLmZvcm1FcnJvclN1bW1hcnksIHsgRVJST1JfTlVNQkVSOiBlcnJvckxpc3QubGVuZ3RoLnRvU3RyaW5nKCkgfSlcbiAgICApO1xuICB9XG59XG4iXX0=