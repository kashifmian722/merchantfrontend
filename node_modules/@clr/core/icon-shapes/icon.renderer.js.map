{"version":3,"file":"icon.renderer.js","sourceRoot":"","sources":["../../../src/clr-core/icon-shapes/icon.renderer.ts"],"names":[],"mappings":"AAAA;;;;EAIE;AACF,OAAO,EAAE,QAAQ,EAAE,yBAAyB,EAAE,MAAM,kBAAkB,CAAC;AAEvE,OAAO,EAAE,yBAAyB,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAEjH,MAAM,UAAU,UAAU,CAAC,iBAA+C;IACxE,IAAI,QAAQ,CAAC,iBAAiB,CAAC,EAAE;QAC/B,OAAO,oBAAoB,CAAC,iBAA2B,CAAC,CAAC;KAC1D;IACD,OAAO,oBAAoB,CAAC,iBAAqC,CAAC,CAAC;AACrE,CAAC;AAED,MAAM,UAAU,oBAAoB,CAAC,IAAsB;IACzD,IAAI,UAAU,GAAG,CAAC,oBAAoB,CAAC,CAAC;IACxC,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC5D,UAAU,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACtC,OAAO,yBAAyB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AACrD,CAAC;AAED,4EAA4E;AAC5E,mDAAmD;AACnD,MAAM,UAAU,oBAAoB,CAAC,IAAY;IAC/C,OAAO,IAAI,CAAC;AACd,CAAC;AAED,MAAM,UAAU,qBAAqB,CAAC,UAA4B;IAChE,MAAM,SAAS,GAAG,EAAE,CAAC;IACrB,KAAK,MAAM,KAAK,IAAI,UAAU,EAAE;QAC9B,IAAI,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;YACpC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,yBAAyB,CAAC,KAAK,EAAU,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SACnF;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["/*\n* Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n*/\nimport { isString, transformToUnspacedString } from '@clr/core/common';\nimport { IconShapeCollection, IconShapeSources } from './interfaces/icon.interfaces';\nimport { decorateSvgWithClassnames, getIconSvgClosingTag, getIconSvgOpeningTag } from './utils/icon.svg-helpers';\n\nexport function renderIcon(shapeOrStringIcon: IconShapeCollection | string): string {\n  if (isString(shapeOrStringIcon)) {\n    return renderIconFromString(shapeOrStringIcon as string);\n  }\n  return renderIconFromShapes(shapeOrStringIcon as IconShapeSources);\n}\n\nexport function renderIconFromShapes(icon: IconShapeSources): string {\n  let iconRender = [getIconSvgOpeningTag];\n  iconRender = iconRender.concat(getInnerSvgFromShapes(icon));\n  iconRender.push(getIconSvgClosingTag);\n  return transformToUnspacedString(iconRender, icon);\n}\n\n// keeping this for separation of concerns and also so we have a place to do\n// proper string manipulation in the (near?) future\nexport function renderIconFromString(icon: string): string {\n  return icon;\n}\n\nexport function getInnerSvgFromShapes(iconShapes: IconShapeSources) {\n  const renderFns = [];\n  for (const shape in iconShapes) {\n    if (iconShapes.hasOwnProperty(shape)) {\n      renderFns.push(() => decorateSvgWithClassnames(shape, <string>iconShapes[shape]));\n    }\n  }\n  return renderFns;\n}\n"]}