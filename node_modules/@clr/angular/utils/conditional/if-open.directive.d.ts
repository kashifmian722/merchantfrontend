import { EventEmitter, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';
import { ClrPopoverToggleService } from '../popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrIfOpen implements OnDestroy {
    private toggleService;
    private template;
    private container;
    private subscription;
    /*********
     *
     * @description
     * A setter that updates ClrPopoverToggleService.open with value.
     *
     * @param value
     */
    set open(value: boolean);
    /**********
     * @property openChange
     *
     * @description
     * An event emitter that emits when the open property is set to allow for 2way binding when the directive is
     * used with de-structured / de-sugared syntax.
     */
    openChange: EventEmitter<boolean>;
    /********
     *
     * @description
     * A getter that returns the current ClrPopoverToggleService.open value.
     *
     */
    get open(): boolean;
    constructor(toggleService: ClrPopoverToggleService, template: TemplateRef<any>, container: ViewContainerRef);
    /*********
     *
     * @description
     * Function that takes a boolean value and either created an embedded view for the associated ViewContainerRef or,
     * Clears all views from the ViewContainerRef
     * @param value
     */
    updateView(value: boolean): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrIfOpen>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrIfOpen, "[clrIfOpen]", never, {
    "open": "clrIfOpen";
}, {
    "openChange": "clrIfOpenChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtb3Blbi5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsiaWYtb3Blbi5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBUZW1wbGF0ZVJlZiwgVmlld0NvbnRhaW5lclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UgfSBmcm9tICcuLi9wb3BvdmVyL3Byb3ZpZGVycy9wb3BvdmVyLXRvZ2dsZS5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENscklmT3BlbiBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSB0b2dnbGVTZXJ2aWNlO1xuICAgIHByaXZhdGUgdGVtcGxhdGU7XG4gICAgcHJpdmF0ZSBjb250YWluZXI7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb247XG4gICAgLyoqKioqKioqKlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSBzZXR0ZXIgdGhhdCB1cGRhdGVzIENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLm9wZW4gd2l0aCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCBvcGVuKHZhbHVlOiBib29sZWFuKTtcbiAgICAvKioqKioqKioqKlxuICAgICAqIEBwcm9wZXJ0eSBvcGVuQ2hhbmdlXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBbiBldmVudCBlbWl0dGVyIHRoYXQgZW1pdHMgd2hlbiB0aGUgb3BlbiBwcm9wZXJ0eSBpcyBzZXQgdG8gYWxsb3cgZm9yIDJ3YXkgYmluZGluZyB3aGVuIHRoZSBkaXJlY3RpdmUgaXNcbiAgICAgKiB1c2VkIHdpdGggZGUtc3RydWN0dXJlZCAvIGRlLXN1Z2FyZWQgc3ludGF4LlxuICAgICAqL1xuICAgIG9wZW5DaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICAvKioqKioqKipcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIEEgZ2V0dGVyIHRoYXQgcmV0dXJucyB0aGUgY3VycmVudCBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZS5vcGVuIHZhbHVlLlxuICAgICAqXG4gICAgICovXG4gICAgZ2V0IG9wZW4oKTogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3Rvcih0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSwgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4sIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZik7XG4gICAgLyoqKioqKioqKlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRnVuY3Rpb24gdGhhdCB0YWtlcyBhIGJvb2xlYW4gdmFsdWUgYW5kIGVpdGhlciBjcmVhdGVkIGFuIGVtYmVkZGVkIHZpZXcgZm9yIHRoZSBhc3NvY2lhdGVkIFZpZXdDb250YWluZXJSZWYgb3IsXG4gICAgICogQ2xlYXJzIGFsbCB2aWV3cyBmcm9tIHRoZSBWaWV3Q29udGFpbmVyUmVmXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICovXG4gICAgdXBkYXRlVmlldyh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==