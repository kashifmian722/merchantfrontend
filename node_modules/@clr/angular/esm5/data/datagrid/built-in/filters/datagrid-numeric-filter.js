import { __decorate, __extends } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ClrDatagridFilter } from '../../datagrid-filter';
import { CustomFilter } from '../../providers/custom-filter';
import { FiltersProvider, RegisteredFilter } from '../../providers/filters';
import { DomAdapter } from '../../../../utils/dom-adapter/dom-adapter';
import { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';
import { DatagridNumericFilterImpl } from './datagrid-numeric-filter-impl';
import { ClrCommonStringsService } from '../../../../utils/i18n/common-strings.service';
import { ClrPopoverToggleService } from '../../../../utils/popover/providers/popover-toggle.service';
var DatagridNumericFilter = /** @class */ (function (_super) {
    __extends(DatagridNumericFilter, _super);
    function DatagridNumericFilter(filters, domAdapter, commonStrings, popoverToggleService) {
        var _this = _super.call(this, filters) || this;
        _this.domAdapter = domAdapter;
        _this.commonStrings = commonStrings;
        _this.popoverToggleService = popoverToggleService;
        _this.subscriptions = [];
        /**
         * Indicates if the filter dropdown is open
         */
        _this.open = false;
        _this.filterValueChange = new EventEmitter();
        return _this;
    }
    DatagridNumericFilter_1 = DatagridNumericFilter;
    DatagridNumericFilter.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) {
            sub.unsubscribe();
        });
    };
    Object.defineProperty(DatagridNumericFilter.prototype, "customNumericFilter", {
        /**
         * Customizable filter logic based on high and low values
         */
        set: function (value) {
            if (value instanceof RegisteredFilter) {
                this.setFilter(value);
            }
            else {
                this.setFilter(new DatagridNumericFilterImpl(value));
            }
            if (this.initFilterValues) {
                this.value = this.initFilterValues;
                // This initFilterValues should be used only once after the filter registration
                // So deleting this property value to prevent it from being used again
                // if this customStringFilter property is set again
                delete this.initFilterValues;
            }
        },
        enumerable: true,
        configurable: true
    });
    DatagridNumericFilter.prototype.ngAfterViewInit = function () {
        var _this = this;
        this.subscriptions.push(this.popoverToggleService.openChange.subscribe(function (openChange) {
            _this.open = openChange;
            // The timeout in used because when this executes, the input isn't displayed.
            setTimeout(function () {
                _this.domAdapter.focus(_this.input.nativeElement);
            });
        }));
    };
    Object.defineProperty(DatagridNumericFilter.prototype, "value", {
        /**
         * Common setter for the input values
         */
        get: function () {
            return [this.filter.low, this.filter.high];
        },
        set: function (values) {
            if (this.filter) {
                if (values && (values[0] !== this.filter.low || values[1] !== this.filter.high)) {
                    if (typeof values[0] === 'number') {
                        this.filter.low = values[0];
                    }
                    else {
                        this.filter.low = null;
                    }
                    if (typeof values[1] === 'number') {
                        this.filter.high = values[1];
                    }
                    else {
                        this.filter.high = null;
                    }
                    this.filterValueChange.emit(values);
                }
            }
            else {
                this.initFilterValues = values;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridNumericFilter.prototype, "low", {
        get: function () {
            if (typeof this.filter.low === 'number' && isFinite(this.filter.low)) {
                return this.filter.low;
            }
            else {
                // There's not a low limit
                return null;
            }
        },
        set: function (low) {
            if (typeof low === 'number' && low !== this.filter.low) {
                this.filter.low = low;
                this.filterValueChange.emit([this.filter.low, this.filter.high]);
            }
            else if (typeof low !== 'number') {
                this.filter.low = null;
                this.filterValueChange.emit([this.filter.low, this.filter.high]);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridNumericFilter.prototype, "high", {
        get: function () {
            if (typeof this.filter.high === 'number' && isFinite(this.filter.high)) {
                return this.filter.high;
            }
            else {
                // There's not a high limit
                return null;
            }
        },
        set: function (high) {
            if (typeof high === 'number' && high !== this.filter.high) {
                this.filter.high = high;
                this.filterValueChange.emit([this.filter.low, this.filter.high]);
            }
            else if (typeof high !== 'number') {
                this.filter.high = null;
                this.filterValueChange.emit([this.filter.low, this.filter.high]);
            }
        },
        enumerable: true,
        configurable: true
    });
    var DatagridNumericFilter_1;
    DatagridNumericFilter.ctorParameters = function () { return [
        { type: FiltersProvider },
        { type: DomAdapter },
        { type: ClrCommonStringsService },
        { type: ClrPopoverToggleService }
    ]; };
    __decorate([
        Input('clrDgNumericFilter')
    ], DatagridNumericFilter.prototype, "customNumericFilter", null);
    __decorate([
        ViewChild('input_low')
    ], DatagridNumericFilter.prototype, "input", void 0);
    __decorate([
        ViewChild(ClrDatagridFilter)
    ], DatagridNumericFilter.prototype, "filterContainer", void 0);
    __decorate([
        Input('clrFilterValue')
    ], DatagridNumericFilter.prototype, "value", null);
    __decorate([
        Output('clrFilterValueChange')
    ], DatagridNumericFilter.prototype, "filterValueChange", void 0);
    DatagridNumericFilter = DatagridNumericFilter_1 = __decorate([
        Component({
            selector: 'clr-dg-numeric-filter',
            providers: [{ provide: CustomFilter, useExisting: DatagridNumericFilter_1 }],
            template: "\n        <clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n            <input class=\"datagrid-numeric-filter-input\" #input_low type=\"number\" name=\"low\" [(ngModel)]=\"low\"\n                   [placeholder]=\"commonStrings.keys.minValue\" [attr.aria-label]=\"commonStrings.keys.minValue\" />\n                <span class=\"datagrid-filter-input-spacer\"></span>\n            <input class=\"datagrid-numeric-filter-input\" #input_high type=\"number\" name=\"high\" [(ngModel)]=\"high\"\n                   [placeholder]=\"commonStrings.keys.maxValue\" [attr.aria-label]=\"commonStrings.keys.maxValue\" />\n        </clr-dg-filter>\n    "
        })
    ], DatagridNumericFilter);
    return DatagridNumericFilter;
}(DatagridFilterRegistrar));
export { DatagridNumericFilter };
//# sourceMappingURL=data:application/json;base64,