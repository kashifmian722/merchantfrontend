import { NgZone, OnDestroy } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export declare enum ClrAriaLivePoliteness {
    off = "off",
    polite = "polite",
    assertive = "assertive"
}
/**
 * This service handle `aria-live` accessibility attribute. The issue is that you need
 * to have the DOM Element with attribute `aria-live` before you could insert content
 * and SR (Screen Reader) pick the change and announce it.
 *
 * ```typescript
 * import { ClrAriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';
 *
 * @Component({
 * selector: 'clr-demo-component',
 * providers: [ClrAriaLiveService],
 * template: `
 *   <ng-content></ng-content>
 * `,
 * })
 * export class DemoComponent {
 *  constructor(ariaLiveService: ClrAriaLiveService) {}
 *
 *  public actionThatWillTriggerChange() {
 *    this.ariaLiveService.announce('message that I want to announce to SR');
 *  }
 * }
 * ```
 *
 */
export declare class ClrAriaLiveService implements OnDestroy {
    private ngZone;
    private platformId;
    private ariaLiveElement;
    private document;
    private previousTimeout;
    constructor(ngZone: NgZone, _document: any, platformId: Object);
    private _id;
    /**
     * get access to the internal HTML `id` that gonna be used for the AriaLive container.
     * @return ID of the DOM Element as string.
     */
    get id(): string;
    /**
     * Append text content inside the AriaLive Container. This method will check if the
     * DOM Element is existing if not it will create one for us and the will apply the text.
     *
     * ```typescript
     * this.ariaLiveService.announce(this.el.nativeElement);
     * // or
     * this.ariaLiveService.announce('Message to announce to SR');
     * ```
     *
     * @remark
     * When second argument is `AriaLivePoliteness.off` we won't create aria container or update it.
     * The reason for that is that we don't want to do additional work if the SR will ignore it.
     *
     * @param message - This could be simple string or HTMLElement
     * @param politeness - 'polite', 'assertive' or 'off'
     */
    announce(message: string | HTMLElement, politeness?: ClrAriaLivePoliteness): void;
    /**
     * onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive
     * container from the document.
     */
    ngOnDestroy(): void;
    /**
     * Create AriaLive DOM element as a last child of the document.
     * After the element is created, we gonna apply Clarity class to hide it from
     * the screen and set the `aria-live` politness.
     *
     * `clr-sr-only` is the CSS class that is used to hide the element from the screen.
     *
     * @remark
     * Calling this method multiple times will create multiple DOM Elements, that
     * won't be tracked and will be GC after the service is destroyed.
     *
     * @return AriaLive container as HTMLElement
     *
     */
    private createContainer;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrAriaLiveService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpYS1saXZlLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXJpYS1saXZlLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3Mge1xuICAgIG9mZiA9IFwib2ZmXCIsXG4gICAgcG9saXRlID0gXCJwb2xpdGVcIixcbiAgICBhc3NlcnRpdmUgPSBcImFzc2VydGl2ZVwiXG59XG4vKipcbiAqIFRoaXMgc2VydmljZSBoYW5kbGUgYGFyaWEtbGl2ZWAgYWNjZXNzaWJpbGl0eSBhdHRyaWJ1dGUuIFRoZSBpc3N1ZSBpcyB0aGF0IHlvdSBuZWVkXG4gKiB0byBoYXZlIHRoZSBET00gRWxlbWVudCB3aXRoIGF0dHJpYnV0ZSBgYXJpYS1saXZlYCBiZWZvcmUgeW91IGNvdWxkIGluc2VydCBjb250ZW50XG4gKiBhbmQgU1IgKFNjcmVlbiBSZWFkZXIpIHBpY2sgdGhlIGNoYW5nZSBhbmQgYW5ub3VuY2UgaXQuXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQ2xyQXJpYUxpdmVTZXJ2aWNlIH0gZnJvbSAnc3JjL2Nsci1hbmd1bGFyL3V0aWxzL2ExMXkvYXJpYS1saXZlLnNlcnZpY2UnO1xuICpcbiAqIEBDb21wb25lbnQoe1xuICogc2VsZWN0b3I6ICdjbHItZGVtby1jb21wb25lbnQnLFxuICogcHJvdmlkZXJzOiBbQ2xyQXJpYUxpdmVTZXJ2aWNlXSxcbiAqIHRlbXBsYXRlOiBgXG4gKiAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAqIGAsXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIERlbW9Db21wb25lbnQge1xuICogIGNvbnN0cnVjdG9yKGFyaWFMaXZlU2VydmljZTogQ2xyQXJpYUxpdmVTZXJ2aWNlKSB7fVxuICpcbiAqICBwdWJsaWMgYWN0aW9uVGhhdFdpbGxUcmlnZ2VyQ2hhbmdlKCkge1xuICogICAgdGhpcy5hcmlhTGl2ZVNlcnZpY2UuYW5ub3VuY2UoJ21lc3NhZ2UgdGhhdCBJIHdhbnQgdG8gYW5ub3VuY2UgdG8gU1InKTtcbiAqICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsckFyaWFMaXZlU2VydmljZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIHByaXZhdGUgYXJpYUxpdmVFbGVtZW50O1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgcHJpdmF0ZSBwcmV2aW91c1RpbWVvdXQ7XG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUsIF9kb2N1bWVudDogYW55LCBwbGF0Zm9ybUlkOiBPYmplY3QpO1xuICAgIHByaXZhdGUgX2lkO1xuICAgIC8qKlxuICAgICAqIGdldCBhY2Nlc3MgdG8gdGhlIGludGVybmFsIEhUTUwgYGlkYCB0aGF0IGdvbm5hIGJlIHVzZWQgZm9yIHRoZSBBcmlhTGl2ZSBjb250YWluZXIuXG4gICAgICogQHJldHVybiBJRCBvZiB0aGUgRE9NIEVsZW1lbnQgYXMgc3RyaW5nLlxuICAgICAqL1xuICAgIGdldCBpZCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQXBwZW5kIHRleHQgY29udGVudCBpbnNpZGUgdGhlIEFyaWFMaXZlIENvbnRhaW5lci4gVGhpcyBtZXRob2Qgd2lsbCBjaGVjayBpZiB0aGVcbiAgICAgKiBET00gRWxlbWVudCBpcyBleGlzdGluZyBpZiBub3QgaXQgd2lsbCBjcmVhdGUgb25lIGZvciB1cyBhbmQgdGhlIHdpbGwgYXBwbHkgdGhlIHRleHQuXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdGhpcy5hcmlhTGl2ZVNlcnZpY2UuYW5ub3VuY2UodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICAgKiAvLyBvclxuICAgICAqIHRoaXMuYXJpYUxpdmVTZXJ2aWNlLmFubm91bmNlKCdNZXNzYWdlIHRvIGFubm91bmNlIHRvIFNSJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcmVtYXJrXG4gICAgICogV2hlbiBzZWNvbmQgYXJndW1lbnQgaXMgYEFyaWFMaXZlUG9saXRlbmVzcy5vZmZgIHdlIHdvbid0IGNyZWF0ZSBhcmlhIGNvbnRhaW5lciBvciB1cGRhdGUgaXQuXG4gICAgICogVGhlIHJlYXNvbiBmb3IgdGhhdCBpcyB0aGF0IHdlIGRvbid0IHdhbnQgdG8gZG8gYWRkaXRpb25hbCB3b3JrIGlmIHRoZSBTUiB3aWxsIGlnbm9yZSBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gVGhpcyBjb3VsZCBiZSBzaW1wbGUgc3RyaW5nIG9yIEhUTUxFbGVtZW50XG4gICAgICogQHBhcmFtIHBvbGl0ZW5lc3MgLSAncG9saXRlJywgJ2Fzc2VydGl2ZScgb3IgJ29mZidcbiAgICAgKi9cbiAgICBhbm5vdW5jZShtZXNzYWdlOiBzdHJpbmcgfCBIVE1MRWxlbWVudCwgcG9saXRlbmVzcz86IENsckFyaWFMaXZlUG9saXRlbmVzcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogb25EZXN0cm95IGxpZmUgY3ljbGUgLSBtdXN0IHN0b3AgYWxsIGFjdGl2ZSBzZXRUaW1lb3V0cyBhbmQgcmVtb3ZlIHRoZSBBcmlhTGl2ZVxuICAgICAqIGNvbnRhaW5lciBmcm9tIHRoZSBkb2N1bWVudC5cbiAgICAgKi9cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBBcmlhTGl2ZSBET00gZWxlbWVudCBhcyBhIGxhc3QgY2hpbGQgb2YgdGhlIGRvY3VtZW50LlxuICAgICAqIEFmdGVyIHRoZSBlbGVtZW50IGlzIGNyZWF0ZWQsIHdlIGdvbm5hIGFwcGx5IENsYXJpdHkgY2xhc3MgdG8gaGlkZSBpdCBmcm9tXG4gICAgICogdGhlIHNjcmVlbiBhbmQgc2V0IHRoZSBgYXJpYS1saXZlYCBwb2xpdG5lc3MuXG4gICAgICpcbiAgICAgKiBgY2xyLXNyLW9ubHlgIGlzIHRoZSBDU1MgY2xhc3MgdGhhdCBpcyB1c2VkIHRvIGhpZGUgdGhlIGVsZW1lbnQgZnJvbSB0aGUgc2NyZWVuLlxuICAgICAqXG4gICAgICogQHJlbWFya1xuICAgICAqIENhbGxpbmcgdGhpcyBtZXRob2QgbXVsdGlwbGUgdGltZXMgd2lsbCBjcmVhdGUgbXVsdGlwbGUgRE9NIEVsZW1lbnRzLCB0aGF0XG4gICAgICogd29uJ3QgYmUgdHJhY2tlZCBhbmQgd2lsbCBiZSBHQyBhZnRlciB0aGUgc2VydmljZSBpcyBkZXN0cm95ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIEFyaWFMaXZlIGNvbnRhaW5lciBhcyBIVE1MRWxlbWVudFxuICAgICAqXG4gICAgICovXG4gICAgcHJpdmF0ZSBjcmVhdGVDb250YWluZXI7XG59XG4iXX0=