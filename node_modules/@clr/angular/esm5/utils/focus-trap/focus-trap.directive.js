import { __decorate, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { AfterViewInit, Directive, ElementRef, HostListener, Inject, Injector, Input, OnDestroy, PLATFORM_ID, Renderer2, } from '@angular/core';
import { FocusTrapTracker } from './focus-trap-tracker.service';
var FocusTrapDirective = /** @class */ (function () {
    function FocusTrapDirective(el, injector, focusTrapsTracker, renderer, platformId) {
        this.el = el;
        this.injector = injector;
        this.focusTrapsTracker = focusTrapsTracker;
        this.renderer = renderer;
        this.platformId = platformId;
        this.localFocusEscaped = false;
        this._config = {
            strict: true,
        };
        this.document = this.injector.get(DOCUMENT);
        this.focusTrapsTracker.current = this;
        this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0');
    }
    Object.defineProperty(FocusTrapDirective.prototype, "config", {
        set: function (config) {
            this._config = Object.assign(this._config, config);
        },
        enumerable: true,
        configurable: true
    });
    FocusTrapDirective.prototype.onFocusIn = function (event) {
        if (this.focusTrapsTracker.current !== this || !isPlatformBrowser(this.platformId) || this.localFocusEscaped) {
            return;
        }
        var nativeElement = this.el.nativeElement;
        if (this._config.strict && event.target && !nativeElement.contains(event.target)) {
            // When the focus trap is global, always steal focus back if it goes outside
            nativeElement.focus();
        }
        else if (event.target === this.bottomReboundEl && nativeElement.contains(this.previousTrappedActiveElement)) {
            // When the focus trap is local, if the user navigates via keyboard to the end element from within the trap, move to top
            nativeElement.focus();
        }
        else if (event.target === this.topReboundEl) {
            // When the focus trap is local, if the user navigates via keyboard back to start element from within the trap, move to bottom
            // @TODO implement an acceptable solution to SHIFT+TAB navigation
        }
        else if (event.target !== nativeElement && !nativeElement.contains(event.target)) {
            // If a user has escaped the trap using the mouse
            // relax, don't do it, when you want to go to it, living those dreams, scheme those schemes, hit me with those laser beams
            this.localFocusEscaped = true;
        }
        // Track the last focused item, so we can check
        this.previousTrappedActiveElement = event.target;
    };
    FocusTrapDirective.prototype.createFocusableOffScreenEl = function () {
        // Not using Renderer2's createElement method because that leads to DOM leakage.
        // https://github.com/angular/angular/issues/26954
        var offScreenSpan = this.document.createElement('span');
        this.renderer.setAttribute(offScreenSpan, 'tabindex', '0');
        this.renderer.addClass(offScreenSpan, 'offscreen-focus-rebounder');
        return offScreenSpan;
    };
    FocusTrapDirective.prototype.addReboundEls = function () {
        if (isPlatformBrowser(this.platformId)) {
            this.topReboundEl = this.createFocusableOffScreenEl();
            this.bottomReboundEl = this.createFocusableOffScreenEl();
            var hostElement = this.el.nativeElement;
            // Add reboundBeforeTrapEl right outside of host element
            this.renderer.insertBefore(hostElement.parentElement, this.topReboundEl, hostElement);
            // Add reboundAfterTrapEl right after host element
            if (hostElement.nextSibling) {
                this.renderer.insertBefore(hostElement.parentNode, this.bottomReboundEl, hostElement.nextSibling);
            }
            else {
                this.renderer.appendChild(hostElement.parentNode, this.bottomReboundEl);
            }
        }
    };
    FocusTrapDirective.prototype.removeReboundEls = function () {
        if (isPlatformBrowser(this.platformId) && this.topReboundEl && this.bottomReboundEl) {
            this.parentElement.removeChild(this.topReboundEl);
            this.parentElement.removeChild(this.bottomReboundEl);
            // These are here to to make sure that
            // we completely delete all traces of the removed DOM objects.
            delete this.topReboundEl;
            delete this.bottomReboundEl;
        }
    };
    FocusTrapDirective.prototype.setPreviousFocus = function () {
        if (this.previousActiveElement && this.previousActiveElement.focus) {
            this.previousActiveElement.focus();
        }
    };
    FocusTrapDirective.prototype.ngAfterViewInit = function () {
        if (isPlatformBrowser(this.platformId)) {
            this.previousActiveElement = this.document.activeElement;
            this.parentElement = this.el.nativeElement.parentElement;
        }
        this.addReboundEls();
    };
    FocusTrapDirective.prototype.ngOnDestroy = function () {
        this.removeReboundEls();
        this.setPreviousFocus();
        this.focusTrapsTracker.activatePreviousTrapper();
    };
    FocusTrapDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: FocusTrapTracker },
        { type: Renderer2 },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    __decorate([
        Input('clrFocusTrap')
    ], FocusTrapDirective.prototype, "config", null);
    __decorate([
        HostListener('document:focusin', ['$event'])
    ], FocusTrapDirective.prototype, "onFocusIn", null);
    FocusTrapDirective = __decorate([
        Directive({ selector: '[clrFocusTrap]' }),
        __param(4, Inject(PLATFORM_ID))
    ], FocusTrapDirective);
    return FocusTrapDirective;
}());
export { FocusTrapDirective };
//# sourceMappingURL=data:application/json;base64,