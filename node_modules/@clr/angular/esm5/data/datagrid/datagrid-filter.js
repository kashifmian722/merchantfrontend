import { __decorate, __extends, __param } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, Inject, PLATFORM_ID, ViewChild, ElementRef, } from '@angular/core';
import { CustomFilter } from './providers/custom-filter';
import { FiltersProvider, RegisteredFilter } from './providers/filters';
import { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { isPlatformBrowser } from '@angular/common';
/**
 * Custom filter that can be added in any column to override the default object property string filter.
 * The reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,
 * since it can be anything (not just a text input).
 */
var ClrDatagridFilter = /** @class */ (function (_super) {
    __extends(ClrDatagridFilter, _super);
    function ClrDatagridFilter(_filters, commonStrings, smartToggleService, platformId, popoverId) {
        var _this = _super.call(this, _filters) || this;
        _this.commonStrings = commonStrings;
        _this.smartToggleService = smartToggleService;
        _this.platformId = platformId;
        _this.popoverId = popoverId;
        _this.subs = [];
        _this.ariaExpanded = false;
        // Smart Popover
        _this.smartPosition = {
            axis: ClrAxis.VERTICAL,
            side: ClrSide.AFTER,
            anchor: ClrAlignment.END,
            content: ClrAlignment.END,
        };
        _this._open = false;
        _this.openChange = new EventEmitter(false);
        _this.subs.push(smartToggleService.openChange.subscribe(function (change) {
            _this.open = change;
            _this.ariaExpanded = change;
        }));
        return _this;
    }
    ClrDatagridFilter_1 = ClrDatagridFilter;
    Object.defineProperty(ClrDatagridFilter.prototype, "open", {
        get: function () {
            return this._open;
        },
        set: function (open) {
            open = !!open;
            if (this.open !== open) {
                this.smartToggleService.open = open;
                this.openChange.emit(open);
                if (!open && isPlatformBrowser(this.platformId)) {
                    this.anchor.nativeElement.focus();
                }
                // keep track of the state
                this._open = open;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDatagridFilter.prototype, "customFilter", {
        set: function (filter) {
            this.setFilter(filter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDatagridFilter.prototype, "active", {
        /**
         * Indicates if the filter is currently active
         */
        get: function () {
            return !!this.filter && this.filter.isActive();
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridFilter.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this.subs.forEach(function (sub) { return sub.unsubscribe(); });
    };
    var ClrDatagridFilter_1;
    ClrDatagridFilter.ctorParameters = function () { return [
        { type: FiltersProvider },
        { type: ClrCommonStringsService },
        { type: ClrPopoverToggleService },
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
    ]; };
    __decorate([
        ViewChild('anchor', { read: ElementRef })
    ], ClrDatagridFilter.prototype, "anchor", void 0);
    __decorate([
        Input('clrDgFilterOpen')
    ], ClrDatagridFilter.prototype, "open", null);
    __decorate([
        Output('clrDgFilterOpenChange')
    ], ClrDatagridFilter.prototype, "openChange", void 0);
    __decorate([
        Input('clrDgFilter')
    ], ClrDatagridFilter.prototype, "customFilter", null);
    ClrDatagridFilter = ClrDatagridFilter_1 = __decorate([
        Component({
            selector: 'clr-dg-filter',
            // We register this component as a CustomFilter, for the parent column to detect it.
            providers: [{ provide: CustomFilter, useExisting: ClrDatagridFilter_1 }, UNIQUE_ID_PROVIDER],
            template: "\n      <button class=\"datagrid-filter-toggle\"\n              type=\"button\"\n              #anchor\n              [attr.aria-label]=\"commonStrings.keys.datagridFilterAriaLabel\"\n              [attr.aria-expanded]=\"ariaExpanded\"\n              [attr.aria-controls]=\"popoverId\"\n              clrPopoverAnchor\n              clrPopoverOpenCloseButton\n              [class.datagrid-filter-open]=\"open\"\n              [class.datagrid-filtered]=\"active\">\n          <clr-icon [attr.shape]=\"active ? 'filter-grid-circle': 'filter-grid'\" class=\"is-solid\"></clr-icon>\n      </button>\n\n      <div class=\"datagrid-filter\"\n           [id]=\"popoverId\"\n           clrFocusTrap\n           *clrPopoverContent=\"open at smartPosition; outsideClickToClose: true; scrollToClose: true\">\n          <div class=\"datagrid-filter-close-wrapper\">\n              <button type=\"button\" class=\"close\" clrPopoverCloseButton>\n                  <clr-icon shape=\"close\" [attr.title]=\"commonStrings.keys.close\"></clr-icon>\n              </button>\n          </div>\n\n          <ng-content></ng-content>\n      </div>\n  "
        }),
        __param(3, Inject(PLATFORM_ID)),
        __param(4, Inject(UNIQUE_ID))
    ], ClrDatagridFilter);
    return ClrDatagridFilter;
}(DatagridFilterRegistrar));
export { ClrDatagridFilter };
//# sourceMappingURL=data:application/json;base64,