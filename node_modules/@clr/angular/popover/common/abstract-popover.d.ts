import { AfterViewChecked, ElementRef, Injector, OnDestroy, Renderer2 } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { Point } from './popover';
import { PopoverOptions } from './popover-options.interface';
import * as ɵngcc0 from '@angular/core';
export declare abstract class AbstractPopover implements AfterViewChecked, OnDestroy {
    protected parentHost: ElementRef;
    constructor(injector: Injector, parentHost: ElementRef);
    protected el: ElementRef;
    protected toggleService: ClrPopoverToggleService;
    protected renderer: Renderer2;
    private popoverInstance;
    private subscription;
    private updateAnchor;
    protected anchorElem: any;
    protected anchorPoint: Point;
    protected popoverPoint: Point;
    protected popoverOptions: PopoverOptions;
    protected ignoredElement: any;
    protected anchor(): void;
    protected release(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    get isOffScreen(): boolean;
    closeOnOutsideClick: boolean;
    private hostClickListener;
    private documentClickListener;
    private documentESCListener;
    private ignoredElementClickListener;
    private ignore;
    private attachESCListener;
    private detachESCListener;
    private attachOutsideClickListener;
    private detachOutsideClickListener;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AbstractPopover>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AbstractPopover>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtcG9wb3Zlci5kLnRzIiwic291cmNlcyI6WyJhYnN0cmFjdC1wb3BvdmVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdDaGVja2VkLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25EZXN0cm95LCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvcG9wb3Zlci9wcm92aWRlcnMvcG9wb3Zlci10b2dnbGUuc2VydmljZSc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4vcG9wb3Zlcic7XG5pbXBvcnQgeyBQb3BvdmVyT3B0aW9ucyB9IGZyb20gJy4vcG9wb3Zlci1vcHRpb25zLmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFBvcG92ZXIgaW1wbGVtZW50cyBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBwYXJlbnRIb3N0OiBFbGVtZW50UmVmO1xuICAgIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3RvciwgcGFyZW50SG9zdDogRWxlbWVudFJlZik7XG4gICAgcHJvdGVjdGVkIGVsOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcml2YXRlIHBvcG92ZXJJbnN0YW5jZTtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHVwZGF0ZUFuY2hvcjtcbiAgICBwcm90ZWN0ZWQgYW5jaG9yRWxlbTogYW55O1xuICAgIHByb3RlY3RlZCBhbmNob3JQb2ludDogUG9pbnQ7XG4gICAgcHJvdGVjdGVkIHBvcG92ZXJQb2ludDogUG9pbnQ7XG4gICAgcHJvdGVjdGVkIHBvcG92ZXJPcHRpb25zOiBQb3BvdmVyT3B0aW9ucztcbiAgICBwcm90ZWN0ZWQgaWdub3JlZEVsZW1lbnQ6IGFueTtcbiAgICBwcm90ZWN0ZWQgYW5jaG9yKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHJlbGVhc2UoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0NoZWNrZWQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIGdldCBpc09mZlNjcmVlbigpOiBib29sZWFuO1xuICAgIGNsb3NlT25PdXRzaWRlQ2xpY2s6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBob3N0Q2xpY2tMaXN0ZW5lcjtcbiAgICBwcml2YXRlIGRvY3VtZW50Q2xpY2tMaXN0ZW5lcjtcbiAgICBwcml2YXRlIGRvY3VtZW50RVNDTGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBpZ25vcmVkRWxlbWVudENsaWNrTGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBpZ25vcmU7XG4gICAgcHJpdmF0ZSBhdHRhY2hFU0NMaXN0ZW5lcjtcbiAgICBwcml2YXRlIGRldGFjaEVTQ0xpc3RlbmVyO1xuICAgIHByaXZhdGUgYXR0YWNoT3V0c2lkZUNsaWNrTGlzdGVuZXI7XG4gICAgcHJpdmF0ZSBkZXRhY2hPdXRzaWRlQ2xpY2tMaXN0ZW5lcjtcbn1cbiJdfQ==