import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, Input } from '@angular/core';
import { ClrDatagridCell } from './datagrid-cell';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
/**
 * Generic bland container serving various purposes for Datagrid.
 * For instance, it can help span a text over multiple rows in detail view.
 */
var ClrDatagridRowDetail = /** @class */ (function () {
    function ClrDatagridRowDetail(selection, rowActionService, expand, expandableRows, commonStrings) {
        this.selection = selection;
        this.rowActionService = rowActionService;
        this.expand = expand;
        this.expandableRows = expandableRows;
        this.commonStrings = commonStrings;
        /* reference to the enum so that template can access it */
        this.SELECTION_TYPE = SelectionType;
        this.subscriptions = [];
        this.replacedRow = false;
    }
    Object.defineProperty(ClrDatagridRowDetail.prototype, "replace", {
        set: function (value) {
            this.expand.setReplace(!!value);
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridRowDetail.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.subscriptions.push(this.expand.replace.subscribe(function (replaceChange) {
            _this.replacedRow = replaceChange;
        }));
    };
    ClrDatagridRowDetail.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    Object.defineProperty(ClrDatagridRowDetail.prototype, "beginningOfExpandableContentAriaText", {
        get: function () {
            return (this._beginningOfExpandableContentAriaText ||
                this.commonStrings.keys.dategridExpandableBeginningOf + " " + this.commonStrings.keys.dategridExpandableRowContent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrDatagridRowDetail.prototype, "endOfExpandableContentAriaText", {
        get: function () {
            return (this._endOfExpandableContentAriaText ||
                this.commonStrings.keys.dategridExpandableEndOf + " " + this.commonStrings.keys.dategridExpandableRowContent);
        },
        enumerable: true,
        configurable: true
    });
    ClrDatagridRowDetail.ctorParameters = function () { return [
        { type: Selection },
        { type: RowActionService },
        { type: DatagridIfExpandService },
        { type: ExpandableRowsCount },
        { type: ClrCommonStringsService }
    ]; };
    __decorate([
        ContentChildren(ClrDatagridCell)
    ], ClrDatagridRowDetail.prototype, "cells", void 0);
    __decorate([
        Input('clrDgReplace')
    ], ClrDatagridRowDetail.prototype, "replace", null);
    __decorate([
        Input('clrRowDetailBeginningAriaText')
    ], ClrDatagridRowDetail.prototype, "_beginningOfExpandableContentAriaText", void 0);
    __decorate([
        Input('clrRowDetailEndAriaText')
    ], ClrDatagridRowDetail.prototype, "_endOfExpandableContentAriaText", void 0);
    ClrDatagridRowDetail = __decorate([
        Component({
            selector: 'clr-dg-row-detail',
            template: "\n    <div class=\"clr-sr-only\">\n      {{ beginningOfExpandableContentAriaText }} {{ commonStrings.keys.dategridExpandableRowsHelperText }}\n    </div>\n    <ng-content></ng-content>\n    <div class=\"clr-sr-only\">{{ endOfExpandableContentAriaText }}</div>\n  ",
            host: {
                '[class.datagrid-row-flex]': 'true',
                '[class.datagrid-row-detail]': 'true',
                '[class.datagrid-container]': 'cells.length === 0',
                '[attr.id]': 'expand.expandableId',
            }
        })
    ], ClrDatagridRowDetail);
    return ClrDatagridRowDetail;
}());
export { ClrDatagridRowDetail };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LWRldGFpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbImRhdGEvZGF0YWdyaWQvZGF0YWdyaWQtcm93LWRldGFpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRztBQUNILE9BQU8sRUFBb0IsU0FBUyxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQXdCLE1BQU0sZUFBZSxDQUFDO0FBRzFHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNsRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRWxGOzs7R0FHRztBQWlCSDtJQUlFLDhCQUNTLFNBQW9CLEVBQ3BCLGdCQUFrQyxFQUNsQyxNQUErQixFQUMvQixjQUFtQyxFQUNuQyxhQUFzQztRQUp0QyxjQUFTLEdBQVQsU0FBUyxDQUFXO1FBQ3BCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsV0FBTSxHQUFOLE1BQU0sQ0FBeUI7UUFDL0IsbUJBQWMsR0FBZCxjQUFjLENBQXFCO1FBQ25DLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtRQVIvQywwREFBMEQ7UUFDbkQsbUJBQWMsR0FBRyxhQUFhLENBQUM7UUFnQjlCLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztRQUNwQyxnQkFBVyxHQUFHLEtBQUssQ0FBQztJQVR4QixDQUFDO0lBS0osc0JBQUkseUNBQU87YUFBWCxVQUFZLEtBQWM7WUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUM7OztPQUFBO0lBSUQsaURBQWtCLEdBQWxCO1FBQUEsaUJBTUM7UUFMQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQUEsYUFBYTtZQUN6QyxLQUFJLENBQUMsV0FBVyxHQUFHLGFBQWEsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELDBDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFHRCxzQkFBVyxzRUFBb0M7YUFBL0M7WUFDRSxPQUFPLENBQ0wsSUFBSSxDQUFDLHFDQUFxQztnQkFDdkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsNkJBQTZCLFNBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsNEJBQThCLENBQ25ILENBQUM7UUFDSixDQUFDOzs7T0FBQTtJQUdELHNCQUFXLGdFQUE4QjthQUF6QztZQUNFLE9BQU8sQ0FDTCxJQUFJLENBQUMsK0JBQStCO2dCQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsU0FBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyw0QkFBOEIsQ0FDN0csQ0FBQztRQUNKLENBQUM7OztPQUFBOztnQkExQ21CLFNBQVM7Z0JBQ0YsZ0JBQWdCO2dCQUMxQix1QkFBdUI7Z0JBQ2YsbUJBQW1CO2dCQUNwQix1QkFBdUI7O0lBR2I7UUFBakMsZUFBZSxDQUFDLGVBQWUsQ0FBQzt1REFBbUM7SUFHcEU7UUFEQyxLQUFLLENBQUMsY0FBYyxDQUFDO3VEQUdyQjtJQWdCdUM7UUFBdkMsS0FBSyxDQUFDLCtCQUErQixDQUFDO3VGQUF1RDtJQVE1RDtRQUFqQyxLQUFLLENBQUMseUJBQXlCLENBQUM7aUZBQWlEO0lBekN2RSxvQkFBb0I7UUFoQmhDLFNBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsUUFBUSxFQUFFLHlRQU1UO1lBQ0QsSUFBSSxFQUFFO2dCQUNKLDJCQUEyQixFQUFFLE1BQU07Z0JBQ25DLDZCQUE2QixFQUFFLE1BQU07Z0JBQ3JDLDRCQUE0QixFQUFFLG9CQUFvQjtnQkFDbEQsV0FBVyxFQUFFLHFCQUFxQjthQUNuQztTQUNGLENBQUM7T0FDVyxvQkFBb0IsQ0FnRGhDO0lBQUQsMkJBQUM7Q0FBQSxBQWhERCxJQWdEQztTQWhEWSxvQkFBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBBZnRlckNvbnRlbnRJbml0LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgSW5wdXQsIE9uRGVzdHJveSwgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ2xyRGF0YWdyaWRDZWxsIH0gZnJvbSAnLi9kYXRhZ3JpZC1jZWxsJztcbmltcG9ydCB7IEV4cGFuZGFibGVSb3dzQ291bnQgfSBmcm9tICcuL3Byb3ZpZGVycy9nbG9iYWwtZXhwYW5kYWJsZS1yb3dzJztcbmltcG9ydCB7IFJvd0FjdGlvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9yb3ctYWN0aW9uLXNlcnZpY2UnO1xuaW1wb3J0IHsgU2VsZWN0aW9uIH0gZnJvbSAnLi9wcm92aWRlcnMvc2VsZWN0aW9uJztcbmltcG9ydCB7IFNlbGVjdGlvblR5cGUgfSBmcm9tICcuL2VudW1zL3NlbGVjdGlvbi10eXBlJztcbmltcG9ydCB7IERhdGFncmlkSWZFeHBhbmRTZXJ2aWNlIH0gZnJvbSAnLi9kYXRhZ3JpZC1pZi1leHBhbmRlZC5zZXJ2aWNlJztcbmltcG9ydCB7IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvaTE4bi9jb21tb24tc3RyaW5ncy5zZXJ2aWNlJztcblxuLyoqXG4gKiBHZW5lcmljIGJsYW5kIGNvbnRhaW5lciBzZXJ2aW5nIHZhcmlvdXMgcHVycG9zZXMgZm9yIERhdGFncmlkLlxuICogRm9yIGluc3RhbmNlLCBpdCBjYW4gaGVscCBzcGFuIGEgdGV4dCBvdmVyIG11bHRpcGxlIHJvd3MgaW4gZGV0YWlsIHZpZXcuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nsci1kZy1yb3ctZGV0YWlsJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiY2xyLXNyLW9ubHlcIj5cbiAgICAgIHt7IGJlZ2lubmluZ09mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCB9fSB7eyBjb21tb25TdHJpbmdzLmtleXMuZGF0ZWdyaWRFeHBhbmRhYmxlUm93c0hlbHBlclRleHQgfX1cbiAgICA8L2Rpdj5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPGRpdiBjbGFzcz1cImNsci1zci1vbmx5XCI+e3sgZW5kT2ZFeHBhbmRhYmxlQ29udGVudEFyaWFUZXh0IH19PC9kaXY+XG4gIGAsXG4gIGhvc3Q6IHtcbiAgICAnW2NsYXNzLmRhdGFncmlkLXJvdy1mbGV4XSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmRhdGFncmlkLXJvdy1kZXRhaWxdJzogJ3RydWUnLFxuICAgICdbY2xhc3MuZGF0YWdyaWQtY29udGFpbmVyXSc6ICdjZWxscy5sZW5ndGggPT09IDAnLFxuICAgICdbYXR0ci5pZF0nOiAnZXhwYW5kLmV4cGFuZGFibGVJZCcsXG4gIH0sXG59KVxuZXhwb3J0IGNsYXNzIENsckRhdGFncmlkUm93RGV0YWlsPFQgPSBhbnk+IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95IHtcbiAgLyogcmVmZXJlbmNlIHRvIHRoZSBlbnVtIHNvIHRoYXQgdGVtcGxhdGUgY2FuIGFjY2VzcyBpdCAqL1xuICBwdWJsaWMgU0VMRUNUSU9OX1RZUEUgPSBTZWxlY3Rpb25UeXBlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBzZWxlY3Rpb246IFNlbGVjdGlvbixcbiAgICBwdWJsaWMgcm93QWN0aW9uU2VydmljZTogUm93QWN0aW9uU2VydmljZSxcbiAgICBwdWJsaWMgZXhwYW5kOiBEYXRhZ3JpZElmRXhwYW5kU2VydmljZSxcbiAgICBwdWJsaWMgZXhwYW5kYWJsZVJvd3M6IEV4cGFuZGFibGVSb3dzQ291bnQsXG4gICAgcHVibGljIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlXG4gICkge31cblxuICBAQ29udGVudENoaWxkcmVuKENsckRhdGFncmlkQ2VsbCkgY2VsbHM6IFF1ZXJ5TGlzdDxDbHJEYXRhZ3JpZENlbGw+O1xuXG4gIEBJbnB1dCgnY2xyRGdSZXBsYWNlJylcbiAgc2V0IHJlcGxhY2UodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmV4cGFuZC5zZXRSZXBsYWNlKCEhdmFsdWUpO1xuICB9XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgcHVibGljIHJlcGxhY2VkUm93ID0gZmFsc2U7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgdGhpcy5leHBhbmQucmVwbGFjZS5zdWJzY3JpYmUocmVwbGFjZUNoYW5nZSA9PiB7XG4gICAgICAgIHRoaXMucmVwbGFjZWRSb3cgPSByZXBsYWNlQ2hhbmdlO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcbiAgfVxuXG4gIEBJbnB1dCgnY2xyUm93RGV0YWlsQmVnaW5uaW5nQXJpYVRleHQnKSBwcml2YXRlIF9iZWdpbm5pbmdPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQ6IHN0cmluZztcbiAgcHVibGljIGdldCBiZWdpbm5pbmdPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2JlZ2lubmluZ09mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCB8fFxuICAgICAgYCR7dGhpcy5jb21tb25TdHJpbmdzLmtleXMuZGF0ZWdyaWRFeHBhbmRhYmxlQmVnaW5uaW5nT2Z9ICR7dGhpcy5jb21tb25TdHJpbmdzLmtleXMuZGF0ZWdyaWRFeHBhbmRhYmxlUm93Q29udGVudH1gXG4gICAgKTtcbiAgfVxuXG4gIEBJbnB1dCgnY2xyUm93RGV0YWlsRW5kQXJpYVRleHQnKSBwcml2YXRlIF9lbmRPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQ6IHN0cmluZztcbiAgcHVibGljIGdldCBlbmRPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2VuZE9mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCB8fFxuICAgICAgYCR7dGhpcy5jb21tb25TdHJpbmdzLmtleXMuZGF0ZWdyaWRFeHBhbmRhYmxlRW5kT2Z9ICR7dGhpcy5jb21tb25TdHJpbmdzLmtleXMuZGF0ZWdyaWRFeHBhbmRhYmxlUm93Q29udGVudH1gXG4gICAgKTtcbiAgfVxufVxuIl19