import { ChangeDetectorRef, ElementRef, EventEmitter, AfterViewInit, QueryList, OnInit, OnDestroy } from '@angular/core';
import { AlertIconAndTypesService } from './providers/icon-and-types.service';
import { MultiAlertService } from './providers/multi-alert.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
export declare class ClrAlert implements OnInit, OnDestroy, AfterViewInit {
    private iconService;
    private cdr;
    private multiAlertService;
    private commonStrings;
    private ariaLiveService;
    private subscriptions;
    constructor(iconService: AlertIconAndTypesService, cdr: ChangeDetectorRef, multiAlertService: MultiAlertService, commonStrings: ClrCommonStringsService, ariaLiveService: ClrAriaLiveService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    isSmall: boolean;
    closable: boolean;
    isAppLevel: boolean;
    clrCloseButtonAriaLabel: string;
    _closed: boolean;
    _closedChanged: EventEmitter<boolean>;
    set alertType(val: string);
    get alertType(): string;
    /**
     * clrPolite is not used in the code. Is here just to provide
     * code complition and also mark component what type AriaLive
     * will be used.
     */
    /** @deprecated since 3.0, remove in 4.0 */
    polite: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    /**
     * There is an order on how the attributes will take effect.
     * Assertive, Off, Polite.
     *
     * Polite is default if non is passed.
     *
     * In the case of setting all of them to true. Assertive will be used.
     *
     */
    get ariaLive(): ClrAriaLivePoliteness;
    set alertIconShape(value: string);
    get alertClass(): string;
    alertTexts: QueryList<ElementRef>;
    /**
     * This handle the find what content to be annonced withing the aria-live container
     * alerts that are hidden will be ignored.
     *
     * @remark
     * We depend on the ClrAlertText Directive to find and parse the alert messages.
     * Also this require the HTML markup for the alert to be
     * ```html
     * <div class="alert" role="alert">
     *    <div class="alert-items">
     *        <div class="alert-item static">
     *            <span class="alert-text">
     *                 ...
     *            </span>
     *        </div>
     *    </div>
     * </div>
     * ```
     */
    private announceAriaLiveMessage;
    private _hidden;
    set hidden(value: boolean);
    get hidden(): boolean;
    close(): void;
    open(): void;
}
