import { AfterContentInit, OnDestroy, QueryList } from '@angular/core';
import { ClrDatagridCell } from './datagrid-cell';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
/**
 * Generic bland container serving various purposes for Datagrid.
 * For instance, it can help span a text over multiple rows in detail view.
 */
import * as ɵngcc0 from '@angular/core';
export declare class ClrDatagridRowDetail<T = any> implements AfterContentInit, OnDestroy {
    selection: Selection;
    rowActionService: RowActionService;
    expand: DatagridIfExpandService;
    expandableRows: ExpandableRowsCount;
    commonStrings: ClrCommonStringsService;
    SELECTION_TYPE: typeof SelectionType;
    constructor(selection: Selection, rowActionService: RowActionService, expand: DatagridIfExpandService, expandableRows: ExpandableRowsCount, commonStrings: ClrCommonStringsService);
    cells: QueryList<ClrDatagridCell>;
    set replace(value: boolean);
    private subscriptions;
    replacedRow: boolean;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private _beginningOfExpandableContentAriaText;
    get beginningOfExpandableContentAriaText(): string;
    private _endOfExpandableContentAriaText;
    get endOfExpandableContentAriaText(): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrDatagridRowDetail<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrDatagridRowDetail<any>, "clr-dg-row-detail", never, {
    "replace": "clrDgReplace";
    "_beginningOfExpandableContentAriaText": "clrRowDetailBeginningAriaText";
    "_endOfExpandableContentAriaText": "clrRowDetailEndAriaText";
}, {}, ["cells"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LWRldGFpbC5kLnRzIiwic291cmNlcyI6WyJkYXRhZ3JpZC1yb3ctZGV0YWlsLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgT25EZXN0cm95LCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENsckRhdGFncmlkQ2VsbCB9IGZyb20gJy4vZGF0YWdyaWQtY2VsbCc7XG5pbXBvcnQgeyBFeHBhbmRhYmxlUm93c0NvdW50IH0gZnJvbSAnLi9wcm92aWRlcnMvZ2xvYmFsLWV4cGFuZGFibGUtcm93cyc7XG5pbXBvcnQgeyBSb3dBY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvcm93LWFjdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7IFNlbGVjdGlvbiB9IGZyb20gJy4vcHJvdmlkZXJzL3NlbGVjdGlvbic7XG5pbXBvcnQgeyBTZWxlY3Rpb25UeXBlIH0gZnJvbSAnLi9lbnVtcy9zZWxlY3Rpb24tdHlwZSc7XG5pbXBvcnQgeyBEYXRhZ3JpZElmRXhwYW5kU2VydmljZSB9IGZyb20gJy4vZGF0YWdyaWQtaWYtZXhwYW5kZWQuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG4vKipcbiAqIEdlbmVyaWMgYmxhbmQgY29udGFpbmVyIHNlcnZpbmcgdmFyaW91cyBwdXJwb3NlcyBmb3IgRGF0YWdyaWQuXG4gKiBGb3IgaW5zdGFuY2UsIGl0IGNhbiBoZWxwIHNwYW4gYSB0ZXh0IG92ZXIgbXVsdGlwbGUgcm93cyBpbiBkZXRhaWwgdmlldy5cbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyRGF0YWdyaWRSb3dEZXRhaWw8VCA9IGFueT4gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kge1xuICAgIHNlbGVjdGlvbjogU2VsZWN0aW9uO1xuICAgIHJvd0FjdGlvblNlcnZpY2U6IFJvd0FjdGlvblNlcnZpY2U7XG4gICAgZXhwYW5kOiBEYXRhZ3JpZElmRXhwYW5kU2VydmljZTtcbiAgICBleHBhbmRhYmxlUm93czogRXhwYW5kYWJsZVJvd3NDb3VudDtcbiAgICBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZTtcbiAgICBTRUxFQ1RJT05fVFlQRTogdHlwZW9mIFNlbGVjdGlvblR5cGU7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0aW9uOiBTZWxlY3Rpb24sIHJvd0FjdGlvblNlcnZpY2U6IFJvd0FjdGlvblNlcnZpY2UsIGV4cGFuZDogRGF0YWdyaWRJZkV4cGFuZFNlcnZpY2UsIGV4cGFuZGFibGVSb3dzOiBFeHBhbmRhYmxlUm93c0NvdW50LCBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSk7XG4gICAgY2VsbHM6IFF1ZXJ5TGlzdDxDbHJEYXRhZ3JpZENlbGw+O1xuICAgIHNldCByZXBsYWNlKHZhbHVlOiBib29sZWFuKTtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbnM7XG4gICAgcmVwbGFjZWRSb3c6IGJvb2xlYW47XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIF9iZWdpbm5pbmdPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQ7XG4gICAgZ2V0IGJlZ2lubmluZ09mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCgpOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfZW5kT2ZFeHBhbmRhYmxlQ29udGVudEFyaWFUZXh0O1xuICAgIGdldCBlbmRPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQoKTogc3RyaW5nO1xufVxuIl19