import { LocaleHelperService } from './locale-helper.service';
import { DateRange } from '../interfaces/date-range.interface';
import * as ɵngcc0 from '@angular/core';
export declare class DateIOService {
    private _localeHelperService;
    disabledDates: DateRange;
    cldrLocaleDateFormat: string;
    private localeDisplayFormat;
    private delimiters;
    constructor(_localeHelperService: LocaleHelperService);
    setMinDate(date: string): void;
    setMaxDate(date: string): void;
    private initializeLocaleDisplayFormat;
    private extractDelimiters;
    toLocaleDisplayFormatString(date: Date): string;
    get placeholderText(): string;
    /**
     * Checks if the month entered by the user is valid or not.
     * Note: Month is 0 based.
     */
    private isValidMonth;
    /**
     * Checks if the date is valid depending on the year and month provided.
     */
    private isValidDate;
    /**
     * Validates the parameters provided and returns the date.
     * If the parameters are not
     * valid then return null.
     * NOTE: (Month here is 1 based since the user has provided that as an input)
     */
    private validateAndGetDate;
    getDateValueFromDateString(date: string): Date;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DateIOService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DateIOService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1pby5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRhdGUtaW8uc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsZUhlbHBlclNlcnZpY2UgfSBmcm9tICcuL2xvY2FsZS1oZWxwZXIuc2VydmljZSc7XG5pbXBvcnQgeyBEYXRlUmFuZ2UgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2RhdGUtcmFuZ2UuaW50ZXJmYWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVJT1NlcnZpY2Uge1xuICAgIHByaXZhdGUgX2xvY2FsZUhlbHBlclNlcnZpY2U7XG4gICAgZGlzYWJsZWREYXRlczogRGF0ZVJhbmdlO1xuICAgIGNsZHJMb2NhbGVEYXRlRm9ybWF0OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBsb2NhbGVEaXNwbGF5Rm9ybWF0O1xuICAgIHByaXZhdGUgZGVsaW1pdGVycztcbiAgICBjb25zdHJ1Y3RvcihfbG9jYWxlSGVscGVyU2VydmljZTogTG9jYWxlSGVscGVyU2VydmljZSk7XG4gICAgc2V0TWluRGF0ZShkYXRlOiBzdHJpbmcpOiB2b2lkO1xuICAgIHNldE1heERhdGUoZGF0ZTogc3RyaW5nKTogdm9pZDtcbiAgICBwcml2YXRlIGluaXRpYWxpemVMb2NhbGVEaXNwbGF5Rm9ybWF0O1xuICAgIHByaXZhdGUgZXh0cmFjdERlbGltaXRlcnM7XG4gICAgdG9Mb2NhbGVEaXNwbGF5Rm9ybWF0U3RyaW5nKGRhdGU6IERhdGUpOiBzdHJpbmc7XG4gICAgZ2V0IHBsYWNlaG9sZGVyVGV4dCgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBtb250aCBlbnRlcmVkIGJ5IHRoZSB1c2VyIGlzIHZhbGlkIG9yIG5vdC5cbiAgICAgKiBOb3RlOiBNb250aCBpcyAwIGJhc2VkLlxuICAgICAqL1xuICAgIHByaXZhdGUgaXNWYWxpZE1vbnRoO1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZGF0ZSBpcyB2YWxpZCBkZXBlbmRpbmcgb24gdGhlIHllYXIgYW5kIG1vbnRoIHByb3ZpZGVkLlxuICAgICAqL1xuICAgIHByaXZhdGUgaXNWYWxpZERhdGU7XG4gICAgLyoqXG4gICAgICogVmFsaWRhdGVzIHRoZSBwYXJhbWV0ZXJzIHByb3ZpZGVkIGFuZCByZXR1cm5zIHRoZSBkYXRlLlxuICAgICAqIElmIHRoZSBwYXJhbWV0ZXJzIGFyZSBub3RcbiAgICAgKiB2YWxpZCB0aGVuIHJldHVybiBudWxsLlxuICAgICAqIE5PVEU6IChNb250aCBoZXJlIGlzIDEgYmFzZWQgc2luY2UgdGhlIHVzZXIgaGFzIHByb3ZpZGVkIHRoYXQgYXMgYW4gaW5wdXQpXG4gICAgICovXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZUFuZEdldERhdGU7XG4gICAgZ2V0RGF0ZVZhbHVlRnJvbURhdGVTdHJpbmcoZGF0ZTogc3RyaW5nKTogRGF0ZTtcbn1cbiJdfQ==