{"version":3,"file":"icon.element.js","sourceRoot":"","sources":["../../../src/clr-core/icon-shapes/icon.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n  applyMixins,\n  baseStyles,\n  CssHelpers,\n  Directions,\n  hasStringPropertyChanged,\n  hasStringPropertyChangedAndNotNil,\n  Orientations,\n  property,\n  StatusTypes,\n  UniqueId,\n} from '@clr/core/common';\nimport { html, LitElement, query } from 'lit-element';\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html';\nimport { styles } from './icon.element.css';\nimport { ClarityIcons } from './icon.service';\nimport { updateIconSizeStyleOrClassnames } from './utils/icon.classnames';\nimport { hasIcon } from './utils/icon.service-helpers';\n\nclass IconMixinClass extends LitElement {}\n\napplyMixins(IconMixinClass, [UniqueId, CssHelpers]);\n\n/**\n * Icon component that renders svg shapes that can be customized.\n * To load a icon import the need icon with the icon service.\n *\n * ```typescript\n * import '@clr/core/icon';\n * import { ClarityIcons, userIcon } from '@clr/core/icon-shapes';\n *\n * ClarityIcons.addIcons(userIcon);\n * ```\n *\n * ```html\n * <cds-icon shape=\"user\"></cds-icon>\n * ```\n *\n * @element cds-icon\n * @cssprop --clr-icon-color\n * @cssprop --clr-icon-color-success\n * @cssprop --clr-icon-color-danger\n * @cssprop --clr-icon-color-warning\n * @cssprop --clr-icon-color-info\n * @cssprop --clr-icon-color-inverse\n * @cssprop --clr-icon-color-inverse-success\n * @cssprop --clr-icon-color-inverse-danger\n * @cssprop --clr-icon-color-inverse-warning\n * @cssprop --clr-icon-color-inverse-info\n */\n// @dynamic\nexport class CdsIcon extends IconMixinClass {\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  private _shape: string;\n  private _size: string;\n\n  get shape() {\n    return hasIcon(this._shape, ClarityIcons.registry) ? this._shape : 'unknown';\n  }\n\n  /**\n   * Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\n   * the specified icon cannot be found in the icon registry.\n   */\n  @property({ type: String })\n  set shape(val: string) {\n    if (hasStringPropertyChangedAndNotNil(val, this._shape)) {\n      const oldVal = this._shape;\n      this._shape = val;\n      this.requestUpdate('shape', oldVal);\n    }\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  /** Apply numerical width-height or a t-shirt-sized CSS classname */\n  @property({ type: String })\n  set size(val: string) {\n    if (hasStringPropertyChanged(val, this._size)) {\n      const oldVal = this._size;\n      this._size = val;\n      updateIconSizeStyleOrClassnames(this, val);\n      this.requestUpdate('size', oldVal);\n    }\n  }\n\n  /** If present, customizes the aria-label for the icon for accessibility. */\n  @property({ type: String })\n  title: string;\n\n  /**\n   * @deprecated\n   * Takes a directional value (up|down|left|right) that rotates the icon 90° with the\n   * top of the icon pointing in the specified direction.\n   *\n   * Deprecated in 3.0. Use `direction` instead. `dir` will be removed in 4.0!\n   */\n  @property({ type: String })\n  dir: Directions;\n\n  /**\n   * Takes a directional value (up|down|left|right) that rotates the icon 90° with the\n   * top of the icon pointing in the specified direction.\n   */\n  @property({ type: String })\n  direction: Directions;\n\n  /**\n   * Takes an orientation value (horizontal|vertical) that reverses the orientation of the\n   * icon vertically or horizontally using the strings: 'horizontal' or 'vertical'\n   */\n  @property({ type: String })\n  flip: Orientations;\n\n  /**\n   * Displays most icons in their \"filled\" version if set to `true`.\n   */\n  @property({ type: Boolean })\n  solid = false;\n\n  /**\n   * Changes color of icon fills and outlines to a color determined by the following\n   * list of statuses: 'info', 'success', 'warning', 'danger', 'highlight'\n   */\n  @property({ type: String })\n  status: StatusTypes | 'highlight' | '' = '';\n\n  /**\n   * Inverts color of icon fills and outlines if `true`.\n   * Useful for displaying icons on a dark background.\n   */\n  @property({ type: Boolean })\n  inverse = false;\n\n  /**\n   * Attribute: `badge`\n   * Sets the color of the icon decoration that appears in the top-right corner\n   * of the glyph. The icon decoration is derived from the following predefined types.\n   *\n   * The color of the badge can change according to the following\n   * list of statuses:\n   * 'info'  -> blue dot\n   * 'success' -> green dot\n   * 'warning' -> yellow dot\n   * 'danger' -> red dot\n   * 'inherit' -> dot inherits color of full icon glyph\n   * 'warning-triangle' -> yellow triangle\n   * 'inherit-triangle' -> triangle inherits color of full icon glyph\n   * unrecognized value, empty string, or true -> red dot\n   *\n   * By default, the badge displays a 'danger' dot (a red-colored dot).\n   *\n   * Setting the badge to 'null' removes the attribute from the DOM.\n   */\n  @property({ type: String })\n  badge: StatusTypes | 'inherit' | 'warning-triangle' | 'inherit-triangle' | true | null;\n\n  @query('svg') private svg: SVGElement;\n\n  private ariaLabel = `aria-${this._idPrefix}${this._uniqueId}`;\n\n  firstUpdated() {\n    this.updateSVGAriaLabel();\n  }\n\n  updated(props: Map<string, any>) {\n    if (props.has('title')) {\n      this.updateSVGAriaLabel();\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.setAttribute('role', 'none');\n  }\n\n  protected render() {\n    return html`\n      ${unsafeHTML(ClarityIcons.registry[this.shape])}\n      ${this.title ? html`<span id=\"${this.ariaLabel}\" class=\"clr-sr-only\">${this.title}</span>` : ''}\n    `;\n  }\n\n  private updateSVGAriaLabel() {\n    if (this.title) {\n      this.svg.removeAttribute('aria-label'); // remove empty label that makes icon decorative by default\n      this.svg.setAttribute('aria-labelledby', this.ariaLabel); // use labelledby for better SR support\n    } else {\n      this.svg.removeAttribute('aria-labelledby');\n    }\n  }\n}\nexport interface CdsIcon extends IconMixinClass, UniqueId, CssHelpers {}\n"]}