/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Input, Directive, Optional } from '@angular/core';
import { DatalistIdService } from './providers/datalist-id.service';
var ClrDatalist = /** @class */ (function () {
    function ClrDatalist(datalistIdService) {
        this.datalistIdService = datalistIdService;
        this.subscriptions = [];
    }
    ClrDatalist.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (!this.datalistIdService) {
            return;
        }
        this.subscriptions.push(this.datalistIdService.idChange.subscribe(function (id) { return (_this.datalistId = id); }));
    };
    Object.defineProperty(ClrDatalist.prototype, "id", {
        set: function (idValue) {
            if (!!idValue && this.datalistIdService) {
                this.datalistId = idValue;
                this.datalistIdService.id = idValue;
            }
            else if (!!idValue) {
                this.datalistId = idValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    ClrDatalist.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });
    };
    ClrDatalist.ctorParameters = function () { return [
        { type: DatalistIdService, decorators: [{ type: Optional }] }
    ]; };
    __decorate([
        Input()
    ], ClrDatalist.prototype, "id", null);
    ClrDatalist = __decorate([
        Directive({
            selector: 'datalist',
            host: {
                '[id]': 'datalistId',
            },
        }),
        __param(0, Optional())
    ], ClrDatalist);
    return ClrDatalist;
}());
export { ClrDatalist };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWxpc3QuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2xyL2FuZ3VsYXIvIiwic291cmNlcyI6WyJmb3Jtcy9kYXRhbGlzdC9kYXRhbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHOztBQUVILE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFvQixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHN0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFRcEU7SUFFRSxxQkFBZ0MsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFENUQsa0JBQWEsR0FBbUIsRUFBRSxDQUFDO0lBQzRCLENBQUM7SUFHeEUsd0NBQWtCLEdBQWxCO1FBQUEsaUJBS0M7UUFKQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQzNCLE9BQU87U0FDUjtRQUNELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsQ0FBQyxLQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxFQUF0QixDQUFzQixDQUFDLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBRUQsc0JBQUksMkJBQUU7YUFBTixVQUFPLE9BQU87WUFDWixJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUFFO2dCQUN2QyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQztnQkFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUM7YUFDckM7aUJBQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFO2dCQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQzthQUMzQjtRQUNILENBQUM7OztPQUFBO0lBRUQsaUNBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Z0JBckJrRCxpQkFBaUIsdUJBQXZELFFBQVE7O0lBVXJCO1FBREMsS0FBSyxFQUFFO3lDQVFQO0lBbkJVLFdBQVc7UUFOdkIsU0FBUyxDQUFDO1lBQ1QsUUFBUSxFQUFFLFVBQVU7WUFDcEIsSUFBSSxFQUFFO2dCQUNKLE1BQU0sRUFBRSxZQUFZO2FBQ3JCO1NBQ0YsQ0FBQztRQUdhLFdBQUEsUUFBUSxFQUFFLENBQUE7T0FGWixXQUFXLENBd0J2QjtJQUFELGtCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F4QlksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSwgQWZ0ZXJDb250ZW50SW5pdCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBEYXRhbGlzdElkU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGFsaXN0LWlkLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdkYXRhbGlzdCcsXG4gIGhvc3Q6IHtcbiAgICAnW2lkXSc6ICdkYXRhbGlzdElkJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRGF0YWxpc3QgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGRhdGFsaXN0SWRTZXJ2aWNlOiBEYXRhbGlzdElkU2VydmljZSkge31cbiAgZGF0YWxpc3RJZDogc3RyaW5nO1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICBpZiAoIXRoaXMuZGF0YWxpc3RJZFNlcnZpY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2godGhpcy5kYXRhbGlzdElkU2VydmljZS5pZENoYW5nZS5zdWJzY3JpYmUoaWQgPT4gKHRoaXMuZGF0YWxpc3RJZCA9IGlkKSkpO1xuICB9XG4gIEBJbnB1dCgpXG4gIHNldCBpZChpZFZhbHVlKSB7XG4gICAgaWYgKCEhaWRWYWx1ZSAmJiB0aGlzLmRhdGFsaXN0SWRTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmRhdGFsaXN0SWQgPSBpZFZhbHVlO1xuICAgICAgdGhpcy5kYXRhbGlzdElkU2VydmljZS5pZCA9IGlkVmFsdWU7XG4gICAgfSBlbHNlIGlmICghIWlkVmFsdWUpIHtcbiAgICAgIHRoaXMuZGF0YWxpc3RJZCA9IGlkVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3ViID0+IHN1Yi51bnN1YnNjcmliZSgpKTtcbiAgfVxufVxuIl19