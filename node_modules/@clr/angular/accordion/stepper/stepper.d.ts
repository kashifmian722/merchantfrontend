import { QueryList, SimpleChanges, OnInit, AfterViewInit, OnDestroy, OnChanges } from '@angular/core';
import { FormGroupDirective, NgForm } from '@angular/forms';
import { Subscription } from 'rxjs';
import { StepperService } from './providers/stepper.service';
import { ClrStepperPanel } from './stepper-panel';
import * as ɵngcc0 from '@angular/core';
export declare class ClrStepper implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private formGroup;
    private ngForm;
    private stepperService;
    initialPanel: string;
    panels: QueryList<ClrStepperPanel>;
    subscriptions: Subscription[];
    form: FormGroupDirective | NgForm;
    constructor(formGroup: FormGroupDirective, ngForm: NgForm, stepperService: StepperService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private listenForFormResetChanges;
    private listenForPanelsCompleted;
    private setPanelsWithFormErrors;
    private listenForDOMChanges;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrStepper>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrStepper, "form[clrStepper]", never, {
    "initialPanel": "clrInitialStep";
}, {}, ["panels"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5kLnRzIiwic291cmNlcyI6WyJzdGVwcGVyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUXVlcnlMaXN0LCBTaW1wbGVDaGFuZ2VzLCBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXBEaXJlY3RpdmUsIE5nRm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgU3RlcHBlclNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9zdGVwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyU3RlcHBlclBhbmVsIH0gZnJvbSAnLi9zdGVwcGVyLXBhbmVsJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIENsclN0ZXBwZXIgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGZvcm1Hcm91cDtcbiAgICBwcml2YXRlIG5nRm9ybTtcbiAgICBwcml2YXRlIHN0ZXBwZXJTZXJ2aWNlO1xuICAgIGluaXRpYWxQYW5lbDogc3RyaW5nO1xuICAgIHBhbmVsczogUXVlcnlMaXN0PENsclN0ZXBwZXJQYW5lbD47XG4gICAgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW107XG4gICAgZm9ybTogRm9ybUdyb3VwRGlyZWN0aXZlIHwgTmdGb3JtO1xuICAgIGNvbnN0cnVjdG9yKGZvcm1Hcm91cDogRm9ybUdyb3VwRGlyZWN0aXZlLCBuZ0Zvcm06IE5nRm9ybSwgc3RlcHBlclNlcnZpY2U6IFN0ZXBwZXJTZXJ2aWNlKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JGb3JtUmVzZXRDaGFuZ2VzO1xuICAgIHByaXZhdGUgbGlzdGVuRm9yUGFuZWxzQ29tcGxldGVkO1xuICAgIHByaXZhdGUgc2V0UGFuZWxzV2l0aEZvcm1FcnJvcnM7XG4gICAgcHJpdmF0ZSBsaXN0ZW5Gb3JET01DaGFuZ2VzO1xufVxuIl19