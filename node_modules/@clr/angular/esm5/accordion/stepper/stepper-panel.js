/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __extends, __param } from "tslib";
import { Component, ChangeDetectionStrategy, Optional, Inject, ViewChild, PLATFORM_ID, } from '@angular/core';
import { FormGroupName, NgModelGroup } from '@angular/forms';
import { tap, filter } from 'rxjs/operators';
import { UNIQUE_ID_PROVIDER, UNIQUE_ID } from '../../utils/id-generator/id-generator.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { StepperService } from './providers/stepper.service';
import { stepAnimation } from '../utils/animation';
import { triggerAllFormControlValidation } from '../../utils/forms/validation';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { AccordionStatus } from '../enums/accordion-status.enum';
import { ClrAccordionPanel } from '../accordion-panel';
import { isPlatformBrowser } from '@angular/common';
var ClrStepperPanel = /** @class */ (function (_super) {
    __extends(ClrStepperPanel, _super);
    function ClrStepperPanel(platformId, commonStrings, formGroupName, ngModelGroup, stepperService, ifExpandService, id) {
        var _this = _super.call(this, commonStrings, stepperService, ifExpandService, id) || this;
        _this.platformId = platformId;
        _this.commonStrings = commonStrings;
        _this.formGroupName = formGroupName;
        _this.ngModelGroup = ngModelGroup;
        _this.stepperService = stepperService;
        _this.isAccordion = false;
        _this.subscriptions = [];
        return _this;
    }
    Object.defineProperty(ClrStepperPanel.prototype, "formGroup", {
        get: function () {
            return this.formGroupName ? this.formGroupName.control : this.ngModelGroup.control;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrStepperPanel.prototype, "id", {
        get: function () {
            return this.formGroupName ? this.formGroupName.name.toString() : this.ngModelGroup.name;
        },
        set: function (_value) { } // overriding parent id required empty setter
        ,
        enumerable: true,
        configurable: true
    });
    ClrStepperPanel.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.panel = this.panel.pipe(tap(function (panel) { return _this.triggerAllFormControlValidationIfError(panel); }));
        this.stepperService.disablePanel(this.id, true);
        this.listenToFocusChanges();
    };
    ClrStepperPanel.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
    };
    ClrStepperPanel.prototype.listenToFocusChanges = function () {
        var _this = this;
        this.subscriptions.push(this.stepperService.activeStep
            .pipe(filter(function (panelId) { return isPlatformBrowser(_this.platformId) && panelId === _this.id; }))
            .subscribe(function () { return _this.headerButton.nativeElement.focus(); }));
    };
    ClrStepperPanel.prototype.triggerAllFormControlValidationIfError = function (panel) {
        if (panel.status === AccordionStatus.Error) {
            triggerAllFormControlValidation(this.formGroup);
        }
    };
    ClrStepperPanel.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: ClrCommonStringsService },
        { type: FormGroupName, decorators: [{ type: Optional }] },
        { type: NgModelGroup, decorators: [{ type: Optional }] },
        { type: StepperService },
        { type: IfExpandService },
        { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
    ]; };
    __decorate([
        ViewChild('headerButton')
    ], ClrStepperPanel.prototype, "headerButton", void 0);
    ClrStepperPanel = __decorate([
        Component({
            selector: 'clr-stepper-panel',
            template: "<ng-container *ngIf=\"panel | async; let panel\">\n  <div *ngIf=\"panel.status !== AccordionStatus.Inactive\" aria-live=\"assertive\" class=\"clr-sr-only\">\n    <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n  </div>\n\n  <div role=\"group\" [ngClass]=\"getPanelStateClasses(panel)\">\n    <div class=\"clr-accordion-header\">\n      <button\n        type=\"button\"\n        class=\"clr-accordion-header-button\"\n        (click)=\"togglePanel()\"\n        [id]=\"getAccordionHeaderId(panel.templateId)\"\n        [disabled]=\"isAccordion && panel.disabled\"\n        [attr.aria-disabled]=\"!isAccordion && panel.disabled\"\n        [attr.aria-controls]=\"getAccordionContentId(panel.templateId)\"\n        [attr.aria-expanded]=\"panel.open\"\n        [class.clr-accordion-header-has-description]=\"(accordionDescription.changes | async)?.length || accordionDescription.length\"\n        #headerButton\n      >\n        <span class=\"clr-sr-only\">\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Error\">{{commonStrings.keys.danger}}</ng-container>\n          <ng-container *ngIf=\"panel.status === AccordionStatus.Complete\">{{commonStrings.keys.success}}</ng-container>\n        </span>\n        <span class=\"clr-accordion-status\">\n          <clr-icon shape=\"angle\" dir=\"right\" class=\"clr-accordion-angle\"></clr-icon>\n          <span class=\"clr-accordion-number\"></span>\n          <clr-icon shape=\"exclamation-circle\" class=\"clr-accordion-error-icon\"></clr-icon>\n          <clr-icon shape=\"check-circle\" class=\"clr-accordion-complete-icon\"></clr-icon>\n        </span>\n        <ng-content select=\"clr-accordion-title, clr-step-title\"></ng-content>\n        <ng-content select=\"clr-accordion-description, clr-step-description\"></ng-content>\n      </button>\n    </div>\n    <div\n      @skipInitialRender\n      role=\"region\"\n      [id]=\"getAccordionContentId(panel.templateId)\"\n      [attr.aria-hidden]=\"!panel.open\"\n      [attr.aria-labelledby]=\"getAccordionHeaderId(panel.templateId)\"\n    >\n      <div\n        *ngIf=\"panel.open\"\n        @toggle\n        (@toggle.done)=\"collapsePanelOnAnimationDone(panel)\"\n        class=\"clr-accordion-content\">\n        <div class=\"clr-accordion-inner-content\">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n",
            host: { '[class.clr-accordion-panel]': 'true' },
            changeDetection: ChangeDetectionStrategy.OnPush,
            animations: stepAnimation,
            providers: [IfExpandService, UNIQUE_ID_PROVIDER]
        }),
        __param(0, Inject(PLATFORM_ID)),
        __param(2, Optional()),
        __param(3, Optional()),
        __param(6, Inject(UNIQUE_ID))
    ], ClrStepperPanel);
    return ClrStepperPanel;
}(ClrAccordionPanel));
export { ClrStepperPanel };
//# sourceMappingURL=data:application/json;base64,