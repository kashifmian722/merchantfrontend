import { __decorate, __extends, __param } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, Inject, Injector, Input, Optional } from '@angular/core';
import { AbstractPopover } from '../common/abstract-popover';
import { Point } from '../common/popover';
import { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';
import { UNIQUE_ID } from '../../utils/id-generator/id-generator.service';
import { TooltipIdService } from './providers/tooltip-id.service';
var POSITIONS = ['bottom-left', 'bottom-right', 'top-left', 'top-right', 'right', 'left'];
var SIZES = ['xs', 'sm', 'md', 'lg'];
var ClrTooltipContent = /** @class */ (function (_super) {
    __extends(ClrTooltipContent, _super);
    function ClrTooltipContent(injector, parentHost, uniqueId, tooltipIdService) {
        var _this = _super.call(this, injector, parentHost) || this;
        _this.uniqueId = uniqueId;
        _this.tooltipIdService = tooltipIdService;
        if (!parentHost) {
            throw new Error('clr-tooltip-content should only be used inside of a clr-tooltip');
        }
        // Defaults
        _this.position = 'right';
        _this.size = 'sm';
        // Set the default id in case consumer does not supply a custom id.
        _this.updateId(uniqueId);
        return _this;
    }
    Object.defineProperty(ClrTooltipContent.prototype, "position", {
        get: function () {
            return this._position;
        },
        set: function (position) {
            // Ugh
            this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.position);
            if (position && POSITIONS.indexOf(position) > -1) {
                this._position = position;
            }
            else {
                this._position = 'right';
            }
            // Ugh
            this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.position);
            // set the popover values based on direction
            switch (position) {
                case 'top-right':
                    this.anchorPoint = Point.TOP_CENTER;
                    this.popoverPoint = Point.LEFT_BOTTOM;
                    break;
                case 'top-left':
                    this.anchorPoint = Point.TOP_CENTER;
                    this.popoverPoint = Point.RIGHT_BOTTOM;
                    break;
                case 'bottom-right':
                    this.anchorPoint = Point.BOTTOM_CENTER;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case 'bottom-left':
                    this.anchorPoint = Point.BOTTOM_CENTER;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                case 'right':
                    this.anchorPoint = Point.RIGHT_CENTER;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
                case 'left':
                    this.anchorPoint = Point.LEFT_CENTER;
                    this.popoverPoint = Point.RIGHT_TOP;
                    break;
                default:
                    this.anchorPoint = Point.RIGHT_CENTER;
                    this.popoverPoint = Point.LEFT_TOP;
                    break;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrTooltipContent.prototype, "id", {
        get: function () {
            return this._id;
        },
        set: function (value) {
            value ? this.updateId(value) : this.updateId('');
        },
        enumerable: true,
        configurable: true
    });
    ClrTooltipContent.prototype.updateId = function (id) {
        this._id = id;
        this.tooltipIdService.updateId(id);
    };
    Object.defineProperty(ClrTooltipContent.prototype, "size", {
        get: function () {
            return this._size;
        },
        set: function (size) {
            // Ugh
            this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.size);
            if (size && SIZES.indexOf(size) > -1) {
                this._size = size;
            }
            else {
                this._size = 'sm';
            }
            // Ugh
            this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.size);
        },
        enumerable: true,
        configurable: true
    });
    ClrTooltipContent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [POPOVER_HOST_ANCHOR,] }] },
        { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
        { type: TooltipIdService }
    ]; };
    __decorate([
        Input()
    ], ClrTooltipContent.prototype, "id", null);
    __decorate([
        Input('clrPosition')
    ], ClrTooltipContent.prototype, "position", null);
    __decorate([
        Input('clrSize')
    ], ClrTooltipContent.prototype, "size", null);
    ClrTooltipContent = __decorate([
        Component({
            selector: 'clr-tooltip-content',
            template: "\n        <ng-content></ng-content>\n    ",
            host: {
                '[class.tooltip-content]': 'true',
                '[style.opacity]': '1',
                '[attr.role]': '"tooltip"',
                '[id]': 'id',
            }
        }),
        __param(1, Optional()),
        __param(1, Inject(POPOVER_HOST_ANCHOR)),
        __param(2, Inject(UNIQUE_ID))
    ], ClrTooltipContent);
    return ClrTooltipContent;
}(AbstractPopover));
export { ClrTooltipContent };
//# sourceMappingURL=data:application/json;base64,