import { Renderer2 } from '@angular/core';
import { Observable } from 'rxjs';
import { ClrPopoverToggleService } from '../../../utils/popover/providers/popover-toggle.service';
import { FocusService } from '../../../utils/focus/focus.service';
import { FocusableItem } from '../../../utils/focus/focusable-item/focusable-item';
import * as ɵngcc0 from '@angular/core';
export declare class DropdownFocusHandler implements FocusableItem {
    id: string;
    private renderer;
    private parent;
    private toggleService;
    private focusService;
    private platformId;
    constructor(id: string, renderer: Renderer2, parent: DropdownFocusHandler, toggleService: ClrPopoverToggleService, focusService: FocusService, platformId: Object);
    private _unlistenFuncs;
    /**
     * If the dropdown was opened by clicking on the trigger, we automatically move to the first item
     */
    moveToFirstItemWhenOpen(): void;
    private focusBackOnTrigger;
    /**
     * Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed
     */
    handleRootFocus(): void;
    private _trigger;
    get trigger(): HTMLElement;
    set trigger(el: HTMLElement);
    private _container;
    get container(): HTMLElement;
    set container(el: HTMLElement);
    focus(): void;
    blur(): void;
    activate(): void;
    private children;
    right?: Observable<FocusableItem>;
    down?: Observable<FocusableItem>;
    up?: Observable<FocusableItem>;
    private openAndGetChildren;
    private closeAndGetThis;
    resetChildren(): void;
    addChildren(children: FocusableItem[]): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DropdownFocusHandler>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DropdownFocusHandler>;
}
export declare const DROPDOWN_FOCUS_HANDLER_PROVIDER: ({
    provide: import("@angular/core").InjectionToken<string>;
    useFactory: typeof import("../../../utils/id-generator/id-generator.service").uniqueIdFactory;
} | import("@angular/core").Type<DropdownFocusHandler> | {
    provide: typeof FocusableItem;
    useExisting: import("@angular/core").Type<DropdownFocusHandler>;
})[];

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tZm9jdXMtaGFuZGxlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbImRyb3Bkb3duLWZvY3VzLWhhbmRsZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZm9jdXMvZm9jdXMuc2VydmljZSc7XG5pbXBvcnQgeyBGb2N1c2FibGVJdGVtIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvZm9jdXMvZm9jdXNhYmxlLWl0ZW0vZm9jdXNhYmxlLWl0ZW0nO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHJvcGRvd25Gb2N1c0hhbmRsZXIgaW1wbGVtZW50cyBGb2N1c2FibGVJdGVtIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIHByaXZhdGUgcmVuZGVyZXI7XG4gICAgcHJpdmF0ZSBwYXJlbnQ7XG4gICAgcHJpdmF0ZSB0b2dnbGVTZXJ2aWNlO1xuICAgIHByaXZhdGUgZm9jdXNTZXJ2aWNlO1xuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCByZW5kZXJlcjogUmVuZGVyZXIyLCBwYXJlbnQ6IERyb3Bkb3duRm9jdXNIYW5kbGVyLCB0b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSwgZm9jdXNTZXJ2aWNlOiBGb2N1c1NlcnZpY2UsIHBsYXRmb3JtSWQ6IE9iamVjdCk7XG4gICAgcHJpdmF0ZSBfdW5saXN0ZW5GdW5jcztcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgZHJvcGRvd24gd2FzIG9wZW5lZCBieSBjbGlja2luZyBvbiB0aGUgdHJpZ2dlciwgd2UgYXV0b21hdGljYWxseSBtb3ZlIHRvIHRoZSBmaXJzdCBpdGVtXG4gICAgICovXG4gICAgbW92ZVRvRmlyc3RJdGVtV2hlbk9wZW4oKTogdm9pZDtcbiAgICBwcml2YXRlIGZvY3VzQmFja09uVHJpZ2dlcjtcbiAgICAvKipcbiAgICAgKiBGb2N1cyBvbiB0aGUgbWVudSB3aGVuIGl0IG9wZW5zLCBhbmQgZm9jdXMgYmFjayBvbiB0aGUgcm9vdCB0cmlnZ2VyIHdoZW4gdGhlIHdob2xlIGRyb3Bkb3duIGJlY29tZXMgY2xvc2VkXG4gICAgICovXG4gICAgaGFuZGxlUm9vdEZvY3VzKCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBfdHJpZ2dlcjtcbiAgICBnZXQgdHJpZ2dlcigpOiBIVE1MRWxlbWVudDtcbiAgICBzZXQgdHJpZ2dlcihlbDogSFRNTEVsZW1lbnQpO1xuICAgIHByaXZhdGUgX2NvbnRhaW5lcjtcbiAgICBnZXQgY29udGFpbmVyKCk6IEhUTUxFbGVtZW50O1xuICAgIHNldCBjb250YWluZXIoZWw6IEhUTUxFbGVtZW50KTtcbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIGJsdXIoKTogdm9pZDtcbiAgICBhY3RpdmF0ZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgY2hpbGRyZW47XG4gICAgcmlnaHQ/OiBPYnNlcnZhYmxlPEZvY3VzYWJsZUl0ZW0+O1xuICAgIGRvd24/OiBPYnNlcnZhYmxlPEZvY3VzYWJsZUl0ZW0+O1xuICAgIHVwPzogT2JzZXJ2YWJsZTxGb2N1c2FibGVJdGVtPjtcbiAgICBwcml2YXRlIG9wZW5BbmRHZXRDaGlsZHJlbjtcbiAgICBwcml2YXRlIGNsb3NlQW5kR2V0VGhpcztcbiAgICByZXNldENoaWxkcmVuKCk6IHZvaWQ7XG4gICAgYWRkQ2hpbGRyZW4oY2hpbGRyZW46IEZvY3VzYWJsZUl0ZW1bXSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IERST1BET1dOX0ZPQ1VTX0hBTkRMRVJfUFJPVklERVI6ICh7XG4gICAgcHJvdmlkZTogaW1wb3J0KFwiQGFuZ3VsYXIvY29yZVwiKS5JbmplY3Rpb25Ub2tlbjxzdHJpbmc+O1xuICAgIHVzZUZhY3Rvcnk6IHR5cGVvZiBpbXBvcnQoXCIuLi8uLi8uLi91dGlscy9pZC1nZW5lcmF0b3IvaWQtZ2VuZXJhdG9yLnNlcnZpY2VcIikudW5pcXVlSWRGYWN0b3J5O1xufSB8IGltcG9ydChcIkBhbmd1bGFyL2NvcmVcIikuVHlwZTxEcm9wZG93bkZvY3VzSGFuZGxlcj4gfCB7XG4gICAgcHJvdmlkZTogdHlwZW9mIEZvY3VzYWJsZUl0ZW07XG4gICAgdXNlRXhpc3Rpbmc6IGltcG9ydChcIkBhbmd1bGFyL2NvcmVcIikuVHlwZTxEcm9wZG93bkZvY3VzSGFuZGxlcj47XG59KVtdO1xuIl19