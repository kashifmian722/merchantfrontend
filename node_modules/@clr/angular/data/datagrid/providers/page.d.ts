import { Observable } from 'rxjs';
import { StateDebouncer } from './state-debouncer.provider';
import * as ɵngcc0 from '@angular/core';
export declare class Page {
    private stateDebouncer;
    constructor(stateDebouncer: StateDebouncer);
    private preventEmit;
    activated: boolean;
    /**
     * Page size, a value of 0 means no pagination
     */
    private _size;
    get size(): number;
    set size(size: number);
    /**
     * Total items (needed to guess the last page)
     */
    private _totalItems?;
    get totalItems(): number;
    set totalItems(total: number);
    /**
     * Last page
     */
    private _last;
    get last(): number;
    set last(page: number);
    /**
     * The Observable that lets other classes subscribe to page changes
     */
    private _change;
    get change(): Observable<number>;
    private _sizeChange;
    get sizeChange(): Observable<number>;
    /**
     * Current page
     */
    private _current;
    get current(): number;
    set current(page: number);
    /**
     * Moves to the previous page if it exists
     */
    previous(): void;
    /**
     * Moves to the next page if it exists
     */
    next(): void;
    /**
     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed
     */
    get firstItem(): number;
    /**
     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed
     */
    get lastItem(): number;
    /**
     * Resets the page size to 0
     */
    resetPageSize(preventEmit?: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Page>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Page>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5kLnRzIiwic291cmNlcyI6WyJwYWdlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFN0YXRlRGVib3VuY2VyIH0gZnJvbSAnLi9zdGF0ZS1kZWJvdW5jZXIucHJvdmlkZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUGFnZSB7XG4gICAgcHJpdmF0ZSBzdGF0ZURlYm91bmNlcjtcbiAgICBjb25zdHJ1Y3RvcihzdGF0ZURlYm91bmNlcjogU3RhdGVEZWJvdW5jZXIpO1xuICAgIHByaXZhdGUgcHJldmVudEVtaXQ7XG4gICAgYWN0aXZhdGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFBhZ2Ugc2l6ZSwgYSB2YWx1ZSBvZiAwIG1lYW5zIG5vIHBhZ2luYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIF9zaXplO1xuICAgIGdldCBzaXplKCk6IG51bWJlcjtcbiAgICBzZXQgc2l6ZShzaXplOiBudW1iZXIpO1xuICAgIC8qKlxuICAgICAqIFRvdGFsIGl0ZW1zIChuZWVkZWQgdG8gZ3Vlc3MgdGhlIGxhc3QgcGFnZSlcbiAgICAgKi9cbiAgICBwcml2YXRlIF90b3RhbEl0ZW1zPztcbiAgICBnZXQgdG90YWxJdGVtcygpOiBudW1iZXI7XG4gICAgc2V0IHRvdGFsSXRlbXModG90YWw6IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogTGFzdCBwYWdlXG4gICAgICovXG4gICAgcHJpdmF0ZSBfbGFzdDtcbiAgICBnZXQgbGFzdCgpOiBudW1iZXI7XG4gICAgc2V0IGxhc3QocGFnZTogbnVtYmVyKTtcbiAgICAvKipcbiAgICAgKiBUaGUgT2JzZXJ2YWJsZSB0aGF0IGxldHMgb3RoZXIgY2xhc3NlcyBzdWJzY3JpYmUgdG8gcGFnZSBjaGFuZ2VzXG4gICAgICovXG4gICAgcHJpdmF0ZSBfY2hhbmdlO1xuICAgIGdldCBjaGFuZ2UoKTogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICAgIHByaXZhdGUgX3NpemVDaGFuZ2U7XG4gICAgZ2V0IHNpemVDaGFuZ2UoKTogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgcGFnZVxuICAgICAqL1xuICAgIHByaXZhdGUgX2N1cnJlbnQ7XG4gICAgZ2V0IGN1cnJlbnQoKTogbnVtYmVyO1xuICAgIHNldCBjdXJyZW50KHBhZ2U6IG51bWJlcik7XG4gICAgLyoqXG4gICAgICogTW92ZXMgdG8gdGhlIHByZXZpb3VzIHBhZ2UgaWYgaXQgZXhpc3RzXG4gICAgICovXG4gICAgcHJldmlvdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBNb3ZlcyB0byB0aGUgbmV4dCBwYWdlIGlmIGl0IGV4aXN0c1xuICAgICAqL1xuICAgIG5leHQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbmRleCBvZiB0aGUgZmlyc3QgaXRlbSBkaXNwbGF5ZWQgb24gdGhlIGN1cnJlbnQgcGFnZSwgc3RhcnRpbmcgYXQgMCwgLTEgaWYgbm9uZSBkaXNwbGF5ZWRcbiAgICAgKi9cbiAgICBnZXQgZmlyc3RJdGVtKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBJbmRleCBvZiB0aGUgbGFzdCBpdGVtIGRpc3BsYXllZCBvbiB0aGUgY3VycmVudCBwYWdlLCBzdGFydGluZyBhdCAwLCAtMSBpZiBub25lIGRpc3BsYXllZFxuICAgICAqL1xuICAgIGdldCBsYXN0SXRlbSgpOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogUmVzZXRzIHRoZSBwYWdlIHNpemUgdG8gMFxuICAgICAqL1xuICAgIHJlc2V0UGFnZVNpemUocHJldmVudEVtaXQ/OiBib29sZWFuKTogdm9pZDtcbn1cbiJdfQ==