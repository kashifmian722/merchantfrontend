import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding, ElementRef, AfterViewInit } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
var ClrSpinner = /** @class */ (function () {
    function ClrSpinner(el, ariaLiveService) {
        this.el = el;
        this.ariaLiveService = ariaLiveService;
    }
    ClrSpinner.prototype.ngAfterViewInit = function () {
        this.ariaLiveService.announce(this.el.nativeElement, this.ariaLive);
    };
    Object.defineProperty(ClrSpinner.prototype, "spinnerClass", {
        /**
         * Default class for all spinners. This class is always true
         */
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inlineClass", {
        get: function () {
            return this._inline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInline", {
        set: function (value) {
            this._inline = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "inverseClass", {
        get: function () {
            return this._inverse;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrInverse", {
        set: function (value) {
            this._inverse = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "smallClass", {
        get: function () {
            return this._small;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrSmall", {
        set: function (value) {
            this._small = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "mediumClass", {
        get: function () {
            if (this._small) {
                return false;
            }
            return this._medium;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "clrMedium", {
        set: function (value) {
            this._medium = isBooleanAttributeSet(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ClrSpinner.prototype, "ariaLive", {
        get: function () {
            if (isBooleanAttributeSet(this.assertive)) {
                return ClrAriaLivePoliteness.assertive;
            }
            if (isBooleanAttributeSet(this.off)) {
                return ClrAriaLivePoliteness.off;
            }
            return ClrAriaLivePoliteness.polite;
        },
        enumerable: true,
        configurable: true
    });
    ClrSpinner.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ClrAriaLiveService }
    ]; };
    __decorate([
        HostBinding('class.spinner')
    ], ClrSpinner.prototype, "spinnerClass", null);
    __decorate([
        HostBinding('class.spinner-inline')
    ], ClrSpinner.prototype, "inlineClass", null);
    __decorate([
        Input('clrInline')
    ], ClrSpinner.prototype, "clrInline", null);
    __decorate([
        HostBinding('class.spinner-inverse')
    ], ClrSpinner.prototype, "inverseClass", null);
    __decorate([
        Input('clrInverse')
    ], ClrSpinner.prototype, "clrInverse", null);
    __decorate([
        HostBinding('class.spinner-sm')
    ], ClrSpinner.prototype, "smallClass", null);
    __decorate([
        Input('clrSmall')
    ], ClrSpinner.prototype, "clrSmall", null);
    __decorate([
        HostBinding('class.spinner-md')
    ], ClrSpinner.prototype, "mediumClass", null);
    __decorate([
        Input('clrMedium')
    ], ClrSpinner.prototype, "clrMedium", null);
    __decorate([
        Input('clrAssertive')
    ], ClrSpinner.prototype, "assertive", void 0);
    __decorate([
        Input('clrOff')
    ], ClrSpinner.prototype, "off", void 0);
    ClrSpinner = __decorate([
        Component({
            selector: 'clr-spinner',
            providers: [ClrAriaLiveService],
            template: "\n    <ng-content></ng-content>\n  ",
            host: {
                '[attr.aria-busy]': 'true',
            }
        })
    ], ClrSpinner);
    return ClrSpinner;
}());
export { ClrSpinner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInByb2dyZXNzL3NwaW5uZXIvc3Bpbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7R0FJRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGdEQUFnRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBWS9GO0lBQ0Usb0JBQW9CLEVBQWMsRUFBVSxlQUFtQztRQUEzRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQW9CO0lBQUcsQ0FBQztJQUVuRixvQ0FBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFNRCxzQkFBSSxvQ0FBWTtRQUpoQjs7V0FFRzthQUVIO1lBQ0UsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDOzs7T0FBQTtJQUtELHNCQUFJLG1DQUFXO2FBQWY7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSxpQ0FBUzthQUFiLFVBQWMsS0FBdUI7WUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxDQUFDOzs7T0FBQTtJQUlELHNCQUFJLG9DQUFZO2FBQWhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksa0NBQVU7YUFBZCxVQUFlLEtBQXVCO1lBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0MsQ0FBQzs7O09BQUE7SUFhRCxzQkFBSSxrQ0FBVTthQUFkO1lBQ0UsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksZ0NBQVE7YUFBWixVQUFhLEtBQXVCO1lBQ2xDLElBQUksQ0FBQyxNQUFNLEdBQUcscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsQ0FBQzs7O09BQUE7SUFlRCxzQkFBSSxtQ0FBVzthQUFmO1lBQ0UsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNmLE9BQU8sS0FBSyxDQUFDO2FBQ2Q7WUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFHRCxzQkFBSSxpQ0FBUzthQUFiLFVBQWMsS0FBdUI7WUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QyxDQUFDOzs7T0FBQTtJQXFCRCxzQkFBSSxnQ0FBUTthQUFaO1lBQ0UsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8scUJBQXFCLENBQUMsU0FBUyxDQUFDO2FBQ3hDO1lBQ0QsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ25DLE9BQU8scUJBQXFCLENBQUMsR0FBRyxDQUFDO2FBQ2xDO1lBQ0QsT0FBTyxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7UUFDdEMsQ0FBQzs7O09BQUE7O2dCQTdHdUIsVUFBVTtnQkFBMkIsa0JBQWtCOztJQVUvRTtRQURDLFdBQVcsQ0FBQyxlQUFlLENBQUM7a0RBRzVCO0lBS0Q7UUFEQyxXQUFXLENBQUMsc0JBQXNCLENBQUM7aURBR25DO0lBR0Q7UUFEQyxLQUFLLENBQUMsV0FBVyxDQUFDOytDQUdsQjtJQUlEO1FBREMsV0FBVyxDQUFDLHVCQUF1QixDQUFDO2tEQUdwQztJQUdEO1FBREMsS0FBSyxDQUFDLFlBQVksQ0FBQztnREFHbkI7SUFhRDtRQURDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQztnREFHL0I7SUFHRDtRQURDLEtBQUssQ0FBQyxVQUFVLENBQUM7OENBR2pCO0lBZUQ7UUFEQyxXQUFXLENBQUMsa0JBQWtCLENBQUM7aURBTS9CO0lBR0Q7UUFEQyxLQUFLLENBQUMsV0FBVyxDQUFDOytDQUdsQjtJQWtCc0I7UUFBdEIsS0FBSyxDQUFDLGNBQWMsQ0FBQztpREFBb0I7SUFFekI7UUFBaEIsS0FBSyxDQUFDLFFBQVEsQ0FBQzsyQ0FBYztJQXJHbkIsVUFBVTtRQVZ0QixTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsYUFBYTtZQUN2QixTQUFTLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztZQUMvQixRQUFRLEVBQUUscUNBRVQ7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osa0JBQWtCLEVBQUUsTUFBTTthQUMzQjtTQUNGLENBQUM7T0FDVyxVQUFVLENBK0d0QjtJQUFELGlCQUFDO0NBQUEsQUEvR0QsSUErR0M7U0EvR1ksVUFBVSIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3RCaW5kaW5nLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQgfSBmcm9tICcuLi8uLi91dGlscy9jb21wb25lbnQvaXMtYm9vbGVhbi1hdHRyaWJ1dGUtc2V0JztcbmltcG9ydCB7IENsckFyaWFMaXZlU2VydmljZSwgQ2xyQXJpYUxpdmVQb2xpdGVuZXNzIH0gZnJvbSAnLi4vLi4vdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nsci1zcGlubmVyJyxcbiAgcHJvdmlkZXJzOiBbQ2xyQXJpYUxpdmVTZXJ2aWNlXSxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGhvc3Q6IHtcbiAgICAnW2F0dHIuYXJpYS1idXN5XSc6ICd0cnVlJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyU3Bpbm5lciBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIGFyaWFMaXZlU2VydmljZTogQ2xyQXJpYUxpdmVTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHRoaXMuYXJpYUxpdmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgY2xhc3MgZm9yIGFsbCBzcGlubmVycy4gVGhpcyBjbGFzcyBpcyBhbHdheXMgdHJ1ZVxuICAgKi9cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyJylcbiAgZ2V0IHNwaW5uZXJDbGFzcygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIFN0eWxlXG4gIHByaXZhdGUgX2lubGluZTogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLWlubGluZScpXG4gIGdldCBpbmxpbmVDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5faW5saW5lO1xuICB9XG5cbiAgQElucHV0KCdjbHJJbmxpbmUnKVxuICBzZXQgY2xySW5saW5lKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5faW5saW5lID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2ludmVyc2U6IGJvb2xlYW47XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Bpbm5lci1pbnZlcnNlJylcbiAgZ2V0IGludmVyc2VDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5faW52ZXJzZTtcbiAgfVxuXG4gIEBJbnB1dCgnY2xySW52ZXJzZScpXG4gIHNldCBjbHJJbnZlcnNlKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKSB7XG4gICAgdGhpcy5faW52ZXJzZSA9IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh2YWx1ZSk7XG4gIH1cblxuICAvLyBTaXplXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IGFsbCBzcGlubmVycyBhcmUgTGFyZ2UuIChzcGlubmVyLWxnKVxuICAgKiBUbyBjaGFuZ2UgdGhlIHNpemUgeW91IG5lZWQgdG8gdXNlIHNldCBjbHJTbWFsbCBvciBjbHJNZWRpdW0gdG8gVFJVRS9cbiAgICovXG5cbiAgLyoqXG4gICAqIFNtYWxsXG4gICAqL1xuICBwcml2YXRlIF9zbWFsbDogYm9vbGVhbjtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zcGlubmVyLXNtJylcbiAgZ2V0IHNtYWxsQ2xhc3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NtYWxsO1xuICB9XG5cbiAgQElucHV0KCdjbHJTbWFsbCcpXG4gIHNldCBjbHJTbWFsbCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHRoaXMuX3NtYWxsID0gaXNCb29sZWFuQXR0cmlidXRlU2V0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIGNsclNtYWxsICYgY2xyTWVkaXVtIGFyZSBzZXQgYm90aCB0byB0cnVlLlxuICAgKiBUaGUgQ1NTIHdpdGggaGlnaCBwcmlvcml0eSB3aWxsIGJlIHNtYWxsIC0gc28gbWVkaXVtIHNpemUgd2lsbCBiZSBpZ25vcmVkLlxuICAgKlxuICAgKiBGb3IgdGhpcyByZWFzb24gaWYgY2xyU21hbGwgaXMgc2V0IHdlIHdvbid0IGFkZCBjbHJNZWRpdW0gY2xhc3MuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgaXMgZGljdGF0ZWQgYnkgdGhlIENTUyBydWxlcy5cbiAgICogRE9OJ1QgVVNFIGNsclNtYWxsICYgY2xyTWVkaXVtIHRvIHRvZ2dsZSBjbGFzc2VzLiBUaGlzIGNvdWxkIGNoYW5nZSB3aXRob3V0IG5vdGljZS5cbiAgICpcbiAgICogQWxzbyB0aGVyZSBpcyBubyBsb2dpY2FsIG5lZWQgdG8gaGF2ZSBib3RoIG9mIHRoZW0gc2V0IHRvIFRSVUUgb3IgRkFMU0UuXG4gICAqL1xuICBwcml2YXRlIF9tZWRpdW06IGJvb2xlYW47XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3Bpbm5lci1tZCcpXG4gIGdldCBtZWRpdW1DbGFzcygpIHtcbiAgICBpZiAodGhpcy5fc21hbGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX21lZGl1bTtcbiAgfVxuXG4gIEBJbnB1dCgnY2xyTWVkaXVtJylcbiAgc2V0IGNsck1lZGl1bSh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZykge1xuICAgIHRoaXMuX21lZGl1bSA9IGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh2YWx1ZSk7XG4gIH1cblxuICAvLyBBcmlhIExpdmVcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCBhcmlhLWxpdmUgd2lsbCBiZSBzZXQgdG8gYHBvbGl0ZWAgLlxuICAgKiBUbyBjaGFuZ2UgaXMgaXQgeW91IG5lZWQgdG8gc2V0IGNsckFzc2VydGl2ZSBvciBjbHJPZmYgdG8gVFJVRVxuICAgKlxuICAgKiBUaGVyZSBpcyBwcmlvcml0eTpcbiAgICogICBEZWZhdWx0OiBwb2xpdGVcbiAgICogICBBc2VydGl2ZVxuICAgKiAgIE9mZlxuICAgKlxuICAgKiBJbiBjYXNlIHdoZW4gZm9yIHNvbWUgcmVhc29uIHlvdSBoYXZlIGNsckFzc2VydGl2ZT1UUlVFIGFuZCBjbHJPZmY9VFJVRSxcbiAgICogd2UgZ29ubmEgc2V0IGBhc3NlcnRpdmVgIGFzIHZhbHVlIG9mIGFyaWEtbGl2ZS5cbiAgICpcbiAgICovXG4gIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgQElucHV0KCdjbHJBc3NlcnRpdmUnKSBhc3NlcnRpdmU6IGJvb2xlYW47XG4gIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgQElucHV0KCdjbHJPZmYnKSBvZmY6IGJvb2xlYW47XG4gIGdldCBhcmlhTGl2ZSgpOiBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3Mge1xuICAgIGlmIChpc0Jvb2xlYW5BdHRyaWJ1dGVTZXQodGhpcy5hc3NlcnRpdmUpKSB7XG4gICAgICByZXR1cm4gQ2xyQXJpYUxpdmVQb2xpdGVuZXNzLmFzc2VydGl2ZTtcbiAgICB9XG4gICAgaWYgKGlzQm9vbGVhbkF0dHJpYnV0ZVNldCh0aGlzLm9mZikpIHtcbiAgICAgIHJldHVybiBDbHJBcmlhTGl2ZVBvbGl0ZW5lc3Mub2ZmO1xuICAgIH1cbiAgICByZXR1cm4gQ2xyQXJpYUxpdmVQb2xpdGVuZXNzLnBvbGl0ZTtcbiAgfVxufVxuIl19