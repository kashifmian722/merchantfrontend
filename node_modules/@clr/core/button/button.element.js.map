{"version":3,"file":"button.element.js","sourceRoot":"","sources":["../../../src/clr-core/button/button.element.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport { baseStyles, property, registerElementSafely } from '@clr/core/common';\nimport { CdsBaseButton, getElementWidth } from '@clr/core/common';\nimport { html, query } from 'lit-element';\nimport { styles } from './button.element.css';\n\nexport enum ClrLoadingState {\n  DEFAULT = 'default',\n  LOADING = 'loading',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\n// TODO: replace with circular progress bar when complete\nconst iconSpinnerCheck = html`<span class=\"spinner spinner-inline spinner-check\"></span>`;\nconst iconSpinner = html`<span class=\"spinner spinner-inline\"></span>`;\n\n/**\n * Buttons allow an application to communicate action and direct user intent.\n *\n * ```typescript\n * import '@clr/core/button';\n * ```\n *\n * ```html\n * <cds-button>submit</cds-button>\n * ```\n *\n * @element cds-button\n * @slot default - Content slot for inside the button\n * @cssprop --box-shadow-color\n * @cssprop --border-radius\n * @cssprop --border-width\n * @cssprop --border-color\n * @cssprop --color\n * @cssprop --background\n */\n// @dynamic\nexport class CdsButton extends CdsBaseButton {\n  /**\n   * Define the type of action the button triggers\n   *\n   * - `solid`: buttons direct the userâ€™s attention to the primary action the application is suggesting that the user take.\n   * - `outline`: buttons indicate secondary actions that compliments a primary action or reduces visual noise when there are many actions on the page.\n   * - `flat`: buttons are used as tertiary buttons. Can also be used inline because they are different from content in style and recognizable as buttons alongside content.\n   */\n  @property({ type: String })\n  action: 'solid' | 'outline' | 'flat';\n\n  /**\n   * Sets the color of the button to match the following string statuses\n   */\n  @property({ type: String })\n  status: 'primary' | 'success' | 'danger' | 'inverse';\n\n  /**\n   * Sets the overall height and width of the button based on the following string values:\n   */\n  @property({ type: String })\n  size: 'sm' | 'md' | 'icon';\n\n  /** Sets if the button should be full width with display block */\n  @property({ type: Boolean })\n  block: boolean;\n\n  @query('.private-host') privateHost: HTMLElement;\n\n  /**\n   * Changes the button content based on the value passed.\n   *\n   * - `default`: shows the content of the button\n   * - `loading`: disables the button and shows a spinner inside the button\n   * - `success`: disables the button and shows a check mark inside the button; auto-triggers to change back to DEFAULT state after 1000 ms\n   * - `error`: shows the content of the button (in the context of application, this state is usually entered from a LOADING state. the application should show appropriate error message)\n   */\n  @property({ type: String })\n  loadingState = ClrLoadingState.DEFAULT;\n\n  firstUpdated(props: Map<string, any>) {\n    super.firstUpdated(props);\n\n    if (this.loadingState !== ClrLoadingState.DEFAULT) {\n      this.updateLoadingState();\n    }\n  }\n\n  update(props: Map<string, any>) {\n    if (this.privateHost && props.has('loadingState')) {\n      this.updateLoadingState();\n    }\n    super.update(props);\n  }\n\n  render() {\n    return html`\n    <div class=\"private-host\">\n      ${this.loadingState === ClrLoadingState.LOADING ? iconSpinner : ''}\n      ${this.loadingState === ClrLoadingState.SUCCESS ? iconSpinnerCheck : ''}\n      ${this.loadingState === ClrLoadingState.DEFAULT ? html`<slot></slot>` : ''}\n      ${this.hiddenButtonTemplate}\n    </div>\n    `;\n  }\n\n  static get styles() {\n    return [baseStyles, styles];\n  }\n\n  private updateLoadingState() {\n    if (this.loadingState === ClrLoadingState.LOADING) {\n      this.disableButton();\n    } else if (this.loadingState === ClrLoadingState.SUCCESS) {\n      this.disableButton();\n      setTimeout(() => this.enableButton(), 1000);\n    } else {\n      this.enableButton();\n    }\n  }\n\n  private disableButton() {\n    this.privateHost.style.width = getElementWidth(this.privateHost);\n    this.disabled = true;\n  }\n\n  private enableButton() {\n    this.loadingState = ClrLoadingState.DEFAULT;\n    this.privateHost.style.removeProperty('width');\n    this.disabled = false;\n  }\n}\n\nregisterElementSafely('cds-button', CdsButton);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'cds-button': CdsButton;\n  }\n}\n"]}