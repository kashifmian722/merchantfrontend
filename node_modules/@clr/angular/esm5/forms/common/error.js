/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate, __param } from "tslib";
import { Component, Optional, ElementRef, AfterViewInit } from '@angular/core';
import { ControlIdService } from './providers/control-id.service';
import { ClrAriaLiveService } from '../../utils/a11y/aria-live.service';
import { ControlClassService } from './providers/control-class.service';
var ClrControlError = /** @class */ (function () {
    function ClrControlError(controlIdService, controlClassService, ariaLiveService, el) {
        this.controlIdService = controlIdService;
        this.controlClassService = controlClassService;
        this.ariaLiveService = ariaLiveService;
        this.el = el;
    }
    /** @deprecated since 3.0, remove in 4.0 - ariaLiveService */
    ClrControlError.prototype.ngAfterViewInit = function () {
        /**
         * The way we render elements inside the `clr-control-container make this
         * component announce itself without been visible on the screen.
         *
         * The check below try to guess is clr-controll-error used in some of the
         * cases mention above and prevent us from announcing without the need of that.
         *
         * This change won't create breaking change - but will make aria live announcment
         * work only when the component is used outside forms or some of the components.
         *
         * This is temporary solution - until better is found.
         *
         */
        if (this.controlClassService === null) {
            this.ariaLiveService.announce(this.el.nativeElement);
        }
    };
    ClrControlError.ctorParameters = function () { return [
        { type: ControlIdService, decorators: [{ type: Optional }] },
        { type: ControlClassService, decorators: [{ type: Optional }] },
        { type: ClrAriaLiveService },
        { type: ElementRef }
    ]; };
    ClrControlError = __decorate([
        Component({
            providers: [ClrAriaLiveService],
            selector: 'clr-control-error',
            template: "\n    <ng-content></ng-content>\n    ",
            host: {
                '[class.clr-subtext]': 'true',
                '[id]': 'controlIdService?.id + "-error"',
            }
        }),
        __param(0, Optional()),
        __param(1, Optional())
    ], ClrControlError);
    return ClrControlError;
}());
export { ClrControlError };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2xyL2FuZ3VsYXIvIiwic291cmNlcyI6WyJmb3Jtcy9jb21tb24vZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7R0FJRzs7QUFFSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBYXhFO0lBQ0UseUJBQ3FCLGdCQUFrQyxFQUNsQyxtQkFBd0MsRUFDbkQsZUFBbUMsRUFDbkMsRUFBYztRQUhILHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUNuRCxvQkFBZSxHQUFmLGVBQWUsQ0FBb0I7UUFDbkMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtJQUNyQixDQUFDO0lBRUosNkRBQTZEO0lBQzdELHlDQUFlLEdBQWY7UUFDRTs7Ozs7Ozs7Ozs7O1dBWUc7UUFDSCxJQUFJLElBQUksQ0FBQyxtQkFBbUIsS0FBSyxJQUFJLEVBQUU7WUFDckMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN0RDtJQUNILENBQUM7O2dCQXhCc0MsZ0JBQWdCLHVCQUFwRCxRQUFRO2dCQUMrQixtQkFBbUIsdUJBQTFELFFBQVE7Z0JBQ2dCLGtCQUFrQjtnQkFDL0IsVUFBVTs7SUFMYixlQUFlO1FBWDNCLFNBQVMsQ0FBQztZQUNULFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDO1lBQy9CLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsUUFBUSxFQUFFLHVDQUVQO1lBQ0gsSUFBSSxFQUFFO2dCQUNKLHFCQUFxQixFQUFFLE1BQU07Z0JBQzdCLE1BQU0sRUFBRSxpQ0FBaUM7YUFDMUM7U0FDRixDQUFDO1FBR0csV0FBQSxRQUFRLEVBQUUsQ0FBQTtRQUNWLFdBQUEsUUFBUSxFQUFFLENBQUE7T0FIRixlQUFlLENBMkIzQjtJQUFELHNCQUFDO0NBQUEsQUEzQkQsSUEyQkM7U0EzQlksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbXBvbmVudCwgT3B0aW9uYWwsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xJZFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9jb250cm9sLWlkLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQXJpYUxpdmVTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG5pbXBvcnQgeyBDb250cm9sQ2xhc3NTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvY29udHJvbC1jbGFzcy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHByb3ZpZGVyczogW0NsckFyaWFMaXZlU2VydmljZV0sXG4gIHNlbGVjdG9yOiAnY2xyLWNvbnRyb2wtZXJyb3InLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICBgLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItc3VidGV4dF0nOiAndHJ1ZScsXG4gICAgJ1tpZF0nOiAnY29udHJvbElkU2VydmljZT8uaWQgKyBcIi1lcnJvclwiJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyQ29udHJvbEVycm9yIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpIHB1YmxpYyBjb250cm9sSWRTZXJ2aWNlOiBDb250cm9sSWRTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHB1YmxpYyBjb250cm9sQ2xhc3NTZXJ2aWNlOiBDb250cm9sQ2xhc3NTZXJ2aWNlLFxuICAgIHByaXZhdGUgYXJpYUxpdmVTZXJ2aWNlOiBDbHJBcmlhTGl2ZVNlcnZpY2UsXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZlxuICApIHt9XG5cbiAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAtIGFyaWFMaXZlU2VydmljZSAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgLyoqXG4gICAgICogVGhlIHdheSB3ZSByZW5kZXIgZWxlbWVudHMgaW5zaWRlIHRoZSBgY2xyLWNvbnRyb2wtY29udGFpbmVyIG1ha2UgdGhpc1xuICAgICAqIGNvbXBvbmVudCBhbm5vdW5jZSBpdHNlbGYgd2l0aG91dCBiZWVuIHZpc2libGUgb24gdGhlIHNjcmVlbi5cbiAgICAgKlxuICAgICAqIFRoZSBjaGVjayBiZWxvdyB0cnkgdG8gZ3Vlc3MgaXMgY2xyLWNvbnRyb2xsLWVycm9yIHVzZWQgaW4gc29tZSBvZiB0aGVcbiAgICAgKiBjYXNlcyBtZW50aW9uIGFib3ZlIGFuZCBwcmV2ZW50IHVzIGZyb20gYW5ub3VuY2luZyB3aXRob3V0IHRoZSBuZWVkIG9mIHRoYXQuXG4gICAgICpcbiAgICAgKiBUaGlzIGNoYW5nZSB3b24ndCBjcmVhdGUgYnJlYWtpbmcgY2hhbmdlIC0gYnV0IHdpbGwgbWFrZSBhcmlhIGxpdmUgYW5ub3VuY21lbnRcbiAgICAgKiB3b3JrIG9ubHkgd2hlbiB0aGUgY29tcG9uZW50IGlzIHVzZWQgb3V0c2lkZSBmb3JtcyBvciBzb21lIG9mIHRoZSBjb21wb25lbnRzLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB0ZW1wb3Jhcnkgc29sdXRpb24gLSB1bnRpbCBiZXR0ZXIgaXMgZm91bmQuXG4gICAgICpcbiAgICAgKi9cbiAgICBpZiAodGhpcy5jb250cm9sQ2xhc3NTZXJ2aWNlID09PSBudWxsKSB7XG4gICAgICB0aGlzLmFyaWFMaXZlU2VydmljZS5hbm5vdW5jZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cbiAgfVxufVxuIl19