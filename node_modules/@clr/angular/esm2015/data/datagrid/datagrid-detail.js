import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, HostListener } from '@angular/core';
import { DetailService } from './providers/detail.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrDatagridDetailHeader } from './datagrid-detail-header';
let ClrDatagridDetail = class ClrDatagridDetail {
    constructor(detailService, commonStrings) {
        this.detailService = detailService;
        this.commonStrings = commonStrings;
    }
    closeCheck() {
        this.detailService.close();
    }
};
ClrDatagridDetail.ctorParameters = () => [
    { type: DetailService },
    { type: ClrCommonStringsService }
];
__decorate([
    ContentChild(ClrDatagridDetailHeader)
], ClrDatagridDetail.prototype, "header", void 0);
__decorate([
    HostListener('document:keyup.esc')
], ClrDatagridDetail.prototype, "closeCheck", null);
ClrDatagridDetail = __decorate([
    Component({
        selector: 'clr-dg-detail',
        host: {
            '[class.datagrid-detail-pane]': 'true',
        },
        // We put the *ngIf on the clrFocusTrap so it doesn't always exist on the page
        // have to test for presence of header for aria-describedby because it was causing unit tests to crash
        template: `
    <div [clrFocusTrap]="{strict: false}" class="datagrid-detail-pane-content" *ngIf="detailService.isOpen" role="dialog"
         [id]="detailService.id" aria-modal="true" [attr.aria-describedby]="header ? header.titleId : ''">
    <div class="clr-sr-only">{{commonStrings.keys.detailPaneStart}}</div>
      <ng-content></ng-content>
      <div class="clr-sr-only">{{commonStrings.keys.detailPaneEnd}}</div>
    </div>
    `
    })
], ClrDatagridDetail);
export { ClrDatagridDetail };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZGV0YWlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNsci9hbmd1bGFyLyIsInNvdXJjZXMiOlsiZGF0YS9kYXRhZ3JpZC9kYXRhZ3JpZC1kZXRhaWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7O0dBSUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBa0JuRSxJQUFhLGlCQUFpQixHQUE5QixNQUFhLGlCQUFpQjtJQUc1QixZQUFtQixhQUE0QixFQUFTLGFBQXNDO1FBQTNFLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQVMsa0JBQWEsR0FBYixhQUFhLENBQXlCO0lBQUcsQ0FBQztJQUdsRyxVQUFVO1FBQ1IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixDQUFDO0NBQ0YsQ0FBQTs7WUFObUMsYUFBYTtZQUF3Qix1QkFBdUI7O0FBRnZEO0lBQXRDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQztpREFBd0M7QUFLOUU7SUFEQyxZQUFZLENBQUMsb0JBQW9CLENBQUM7bURBR2xDO0FBUlUsaUJBQWlCO0lBaEI3QixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsZUFBZTtRQUN6QixJQUFJLEVBQUU7WUFDSiw4QkFBOEIsRUFBRSxNQUFNO1NBQ3ZDO1FBQ0QsOEVBQThFO1FBQzlFLHNHQUFzRztRQUN0RyxRQUFRLEVBQUU7Ozs7Ozs7S0FPUDtLQUNKLENBQUM7R0FDVyxpQkFBaUIsQ0FTN0I7U0FUWSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBDb21wb25lbnQsIENvbnRlbnRDaGlsZCwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEZXRhaWxTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGV0YWlsLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyRGF0YWdyaWREZXRhaWxIZWFkZXIgfSBmcm9tICcuL2RhdGFncmlkLWRldGFpbC1oZWFkZXInO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItZGctZGV0YWlsJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuZGF0YWdyaWQtZGV0YWlsLXBhbmVdJzogJ3RydWUnLFxuICB9LFxuICAvLyBXZSBwdXQgdGhlICpuZ0lmIG9uIHRoZSBjbHJGb2N1c1RyYXAgc28gaXQgZG9lc24ndCBhbHdheXMgZXhpc3Qgb24gdGhlIHBhZ2VcbiAgLy8gaGF2ZSB0byB0ZXN0IGZvciBwcmVzZW5jZSBvZiBoZWFkZXIgZm9yIGFyaWEtZGVzY3JpYmVkYnkgYmVjYXVzZSBpdCB3YXMgY2F1c2luZyB1bml0IHRlc3RzIHRvIGNyYXNoXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xyRm9jdXNUcmFwXT1cIntzdHJpY3Q6IGZhbHNlfVwiIGNsYXNzPVwiZGF0YWdyaWQtZGV0YWlsLXBhbmUtY29udGVudFwiICpuZ0lmPVwiZGV0YWlsU2VydmljZS5pc09wZW5cIiByb2xlPVwiZGlhbG9nXCJcbiAgICAgICAgIFtpZF09XCJkZXRhaWxTZXJ2aWNlLmlkXCIgYXJpYS1tb2RhbD1cInRydWVcIiBbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XT1cImhlYWRlciA/IGhlYWRlci50aXRsZUlkIDogJydcIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2xyLXNyLW9ubHlcIj57e2NvbW1vblN0cmluZ3Mua2V5cy5kZXRhaWxQYW5lU3RhcnR9fTwvZGl2PlxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgPGRpdiBjbGFzcz1cImNsci1zci1vbmx5XCI+e3tjb21tb25TdHJpbmdzLmtleXMuZGV0YWlsUGFuZUVuZH19PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgYCxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRGF0YWdyaWREZXRhaWwge1xuICBAQ29udGVudENoaWxkKENsckRhdGFncmlkRGV0YWlsSGVhZGVyKSBwdWJsaWMgaGVhZGVyOiBDbHJEYXRhZ3JpZERldGFpbEhlYWRlcjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGV0YWlsU2VydmljZTogRGV0YWlsU2VydmljZSwgcHVibGljIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlKSB7fVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OmtleXVwLmVzYycpXG4gIGNsb3NlQ2hlY2soKTogdm9pZCB7XG4gICAgdGhpcy5kZXRhaWxTZXJ2aWNlLmNsb3NlKCk7XG4gIH1cbn1cbiJdfQ==