/*
* Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
* This software is released under MIT license.
* The full license information can be found in LICENSE in the root directory of this project.
*/
import { KeyCodes, IEKeyCodes } from './../../enums/key-codes.enum';
export function keyValidator(key) {
    if (key === KeyCodes.ArrowUp || key === IEKeyCodes.ArrowUp) {
        return KeyCodes.ArrowUp;
    }
    else if (key === KeyCodes.ArrowDown || key === IEKeyCodes.ArrowDown) {
        return KeyCodes.ArrowDown;
    }
    else if (key === KeyCodes.ArrowRight || key === IEKeyCodes.ArrowRight) {
        return KeyCodes.ArrowRight;
    }
    else if (key === KeyCodes.ArrowLeft || key === IEKeyCodes.ArrowLeft) {
        return KeyCodes.ArrowLeft;
    }
    else if (key === KeyCodes.Space || key === IEKeyCodes.Space) {
        return KeyCodes.Space;
    }
    else if (key === KeyCodes.Escape || key === IEKeyCodes.Escape) {
        return KeyCodes.Escape;
    }
    else {
        return key;
    }
}
export function preventArrowKeyScroll(event) {
    const validKey = keyValidator(event.key);
    if (validKey === KeyCodes.ArrowUp ||
        validKey === KeyCodes.ArrowDown ||
        validKey === KeyCodes.ArrowLeft ||
        validKey === KeyCodes.ArrowRight) {
        // prevent element container scroll
        // MDN references this is really the only way to prevent native browser interactions
        // https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets
        event.preventDefault();
    }
}
export function getKeyCodes(event) {
    // IE does not properly follow the spec for `event.key` so we need to return a different enum for the key events
    // We use `event.key` for optimal browser support, to detect IE/Edge check if `event.code` is undefined
    const isIEKeyboardEvent = event.code === undefined;
    return isIEKeyboardEvent ? IEKeyCodes : KeyCodes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjbHIvYW5ndWxhci8iLCJzb3VyY2VzIjpbInV0aWxzL2ZvY3VzL2tleS1mb2N1cy91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0VBSUU7QUFFRixPQUFPLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXBFLE1BQU0sVUFBVSxZQUFZLENBQUMsR0FBVztJQUN0QyxJQUFJLEdBQUcsS0FBSyxRQUFRLENBQUMsT0FBTyxJQUFJLEdBQUcsS0FBSyxVQUFVLENBQUMsT0FBTyxFQUFFO1FBQzFELE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQztLQUN6QjtTQUFNLElBQUksR0FBRyxLQUFLLFFBQVEsQ0FBQyxTQUFTLElBQUksR0FBRyxLQUFLLFVBQVUsQ0FBQyxTQUFTLEVBQUU7UUFDckUsT0FBTyxRQUFRLENBQUMsU0FBUyxDQUFDO0tBQzNCO1NBQU0sSUFBSSxHQUFHLEtBQUssUUFBUSxDQUFDLFVBQVUsSUFBSSxHQUFHLEtBQUssVUFBVSxDQUFDLFVBQVUsRUFBRTtRQUN2RSxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUM7S0FDNUI7U0FBTSxJQUFJLEdBQUcsS0FBSyxRQUFRLENBQUMsU0FBUyxJQUFJLEdBQUcsS0FBSyxVQUFVLENBQUMsU0FBUyxFQUFFO1FBQ3JFLE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQztLQUMzQjtTQUFNLElBQUksR0FBRyxLQUFLLFFBQVEsQ0FBQyxLQUFLLElBQUksR0FBRyxLQUFLLFVBQVUsQ0FBQyxLQUFLLEVBQUU7UUFDN0QsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO0tBQ3ZCO1NBQU0sSUFBSSxHQUFHLEtBQUssUUFBUSxDQUFDLE1BQU0sSUFBSSxHQUFHLEtBQUssVUFBVSxDQUFDLE1BQU0sRUFBRTtRQUMvRCxPQUFPLFFBQVEsQ0FBQyxNQUFNLENBQUM7S0FDeEI7U0FBTTtRQUNMLE9BQU8sR0FBRyxDQUFDO0tBQ1o7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQixDQUFDLEtBQW9CO0lBQ3hELE1BQU0sUUFBUSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFekMsSUFDRSxRQUFRLEtBQUssUUFBUSxDQUFDLE9BQU87UUFDN0IsUUFBUSxLQUFLLFFBQVEsQ0FBQyxTQUFTO1FBQy9CLFFBQVEsS0FBSyxRQUFRLENBQUMsU0FBUztRQUMvQixRQUFRLEtBQUssUUFBUSxDQUFDLFVBQVUsRUFDaEM7UUFDQSxtQ0FBbUM7UUFDbkMsb0ZBQW9GO1FBQ3BGLG1HQUFtRztRQUNuRyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7S0FDeEI7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLFdBQVcsQ0FBQyxLQUFvQjtJQUM5QyxnSEFBZ0g7SUFDaEgsdUdBQXVHO0lBQ3ZHLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLElBQUksS0FBSyxTQUFTLENBQUM7SUFDbkQsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7QUFDbkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4qL1xuXG5pbXBvcnQgeyBLZXlDb2RlcywgSUVLZXlDb2RlcyB9IGZyb20gJy4vLi4vLi4vZW51bXMva2V5LWNvZGVzLmVudW0nO1xuXG5leHBvcnQgZnVuY3Rpb24ga2V5VmFsaWRhdG9yKGtleTogc3RyaW5nKSB7XG4gIGlmIChrZXkgPT09IEtleUNvZGVzLkFycm93VXAgfHwga2V5ID09PSBJRUtleUNvZGVzLkFycm93VXApIHtcbiAgICByZXR1cm4gS2V5Q29kZXMuQXJyb3dVcDtcbiAgfSBlbHNlIGlmIChrZXkgPT09IEtleUNvZGVzLkFycm93RG93biB8fCBrZXkgPT09IElFS2V5Q29kZXMuQXJyb3dEb3duKSB7XG4gICAgcmV0dXJuIEtleUNvZGVzLkFycm93RG93bjtcbiAgfSBlbHNlIGlmIChrZXkgPT09IEtleUNvZGVzLkFycm93UmlnaHQgfHwga2V5ID09PSBJRUtleUNvZGVzLkFycm93UmlnaHQpIHtcbiAgICByZXR1cm4gS2V5Q29kZXMuQXJyb3dSaWdodDtcbiAgfSBlbHNlIGlmIChrZXkgPT09IEtleUNvZGVzLkFycm93TGVmdCB8fCBrZXkgPT09IElFS2V5Q29kZXMuQXJyb3dMZWZ0KSB7XG4gICAgcmV0dXJuIEtleUNvZGVzLkFycm93TGVmdDtcbiAgfSBlbHNlIGlmIChrZXkgPT09IEtleUNvZGVzLlNwYWNlIHx8IGtleSA9PT0gSUVLZXlDb2Rlcy5TcGFjZSkge1xuICAgIHJldHVybiBLZXlDb2Rlcy5TcGFjZTtcbiAgfSBlbHNlIGlmIChrZXkgPT09IEtleUNvZGVzLkVzY2FwZSB8fCBrZXkgPT09IElFS2V5Q29kZXMuRXNjYXBlKSB7XG4gICAgcmV0dXJuIEtleUNvZGVzLkVzY2FwZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ga2V5O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50QXJyb3dLZXlTY3JvbGwoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgY29uc3QgdmFsaWRLZXkgPSBrZXlWYWxpZGF0b3IoZXZlbnQua2V5KTtcblxuICBpZiAoXG4gICAgdmFsaWRLZXkgPT09IEtleUNvZGVzLkFycm93VXAgfHxcbiAgICB2YWxpZEtleSA9PT0gS2V5Q29kZXMuQXJyb3dEb3duIHx8XG4gICAgdmFsaWRLZXkgPT09IEtleUNvZGVzLkFycm93TGVmdCB8fFxuICAgIHZhbGlkS2V5ID09PSBLZXlDb2Rlcy5BcnJvd1JpZ2h0XG4gICkge1xuICAgIC8vIHByZXZlbnQgZWxlbWVudCBjb250YWluZXIgc2Nyb2xsXG4gICAgLy8gTUROIHJlZmVyZW5jZXMgdGhpcyBpcyByZWFsbHkgdGhlIG9ubHkgd2F5IHRvIHByZXZlbnQgbmF0aXZlIGJyb3dzZXIgaW50ZXJhY3Rpb25zXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQWNjZXNzaWJpbGl0eS9LZXlib2FyZC1uYXZpZ2FibGVfSmF2YVNjcmlwdF93aWRnZXRzXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0S2V5Q29kZXMoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgLy8gSUUgZG9lcyBub3QgcHJvcGVybHkgZm9sbG93IHRoZSBzcGVjIGZvciBgZXZlbnQua2V5YCBzbyB3ZSBuZWVkIHRvIHJldHVybiBhIGRpZmZlcmVudCBlbnVtIGZvciB0aGUga2V5IGV2ZW50c1xuICAvLyBXZSB1c2UgYGV2ZW50LmtleWAgZm9yIG9wdGltYWwgYnJvd3NlciBzdXBwb3J0LCB0byBkZXRlY3QgSUUvRWRnZSBjaGVjayBpZiBgZXZlbnQuY29kZWAgaXMgdW5kZWZpbmVkXG4gIGNvbnN0IGlzSUVLZXlib2FyZEV2ZW50ID0gZXZlbnQuY29kZSA9PT0gdW5kZWZpbmVkO1xuICByZXR1cm4gaXNJRUtleWJvYXJkRXZlbnQgPyBJRUtleUNvZGVzIDogS2V5Q29kZXM7XG59XG4iXX0=