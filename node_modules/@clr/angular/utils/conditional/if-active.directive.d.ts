import { EventEmitter, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';
import { IfActiveService } from './if-active.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrIfActive implements OnDestroy {
    private ifActiveService;
    private id;
    private template;
    private container;
    private subscription;
    private wasActive;
    constructor(ifActiveService: IfActiveService, id: number, template: TemplateRef<any>, container: ViewContainerRef);
    private checkAndUpdateView;
    /*********
     *
     * @description
     * A setter that updates IfActiveService.active with value.
     *
     * @param value
     */
    set active(value: boolean);
    /**********
     * @property activeChange
     *
     * @description
     * An event emitter that emits when the active property is set to allow for 2way binding when the directive is
     * used with de-structured / de-sugared syntax.
     *
     */
    activeChange: EventEmitter<boolean>;
    /********
     *
     * @description
     * A getter that returns the current IfActiveService.active value.
     */
    get active(): boolean;
    /*********
     *
     * @description
     * Function that takes a any value and either created an embedded view for the associated ViewContainerRef or,
     * Clears all views from the ViewContainerRef
     * @param value
     */
    updateView(value: boolean): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrIfActive>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ClrIfActive, "[clrIfActive]", never, {
    "active": "clrIfActive";
}, {
    "activeChange": "clrIfActiveChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWYtYWN0aXZlLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJpZi1hY3RpdmUuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uRGVzdHJveSwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElmQWN0aXZlU2VydmljZSB9IGZyb20gJy4vaWYtYWN0aXZlLnNlcnZpY2UnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xySWZBY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgaWZBY3RpdmVTZXJ2aWNlO1xuICAgIHByaXZhdGUgaWQ7XG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZTtcbiAgICBwcml2YXRlIGNvbnRhaW5lcjtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIHdhc0FjdGl2ZTtcbiAgICBjb25zdHJ1Y3RvcihpZkFjdGl2ZVNlcnZpY2U6IElmQWN0aXZlU2VydmljZSwgaWQ6IG51bWJlciwgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4sIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZik7XG4gICAgcHJpdmF0ZSBjaGVja0FuZFVwZGF0ZVZpZXc7XG4gICAgLyoqKioqKioqKlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSBzZXR0ZXIgdGhhdCB1cGRhdGVzIElmQWN0aXZlU2VydmljZS5hY3RpdmUgd2l0aCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pO1xuICAgIC8qKioqKioqKioqXG4gICAgICogQHByb3BlcnR5IGFjdGl2ZUNoYW5nZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQW4gZXZlbnQgZW1pdHRlciB0aGF0IGVtaXRzIHdoZW4gdGhlIGFjdGl2ZSBwcm9wZXJ0eSBpcyBzZXQgdG8gYWxsb3cgZm9yIDJ3YXkgYmluZGluZyB3aGVuIHRoZSBkaXJlY3RpdmUgaXNcbiAgICAgKiB1c2VkIHdpdGggZGUtc3RydWN0dXJlZCAvIGRlLXN1Z2FyZWQgc3ludGF4LlxuICAgICAqXG4gICAgICovXG4gICAgYWN0aXZlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgLyoqKioqKioqXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBBIGdldHRlciB0aGF0IHJldHVybnMgdGhlIGN1cnJlbnQgSWZBY3RpdmVTZXJ2aWNlLmFjdGl2ZSB2YWx1ZS5cbiAgICAgKi9cbiAgICBnZXQgYWN0aXZlKCk6IGJvb2xlYW47XG4gICAgLyoqKioqKioqKlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogRnVuY3Rpb24gdGhhdCB0YWtlcyBhIGFueSB2YWx1ZSBhbmQgZWl0aGVyIGNyZWF0ZWQgYW4gZW1iZWRkZWQgdmlldyBmb3IgdGhlIGFzc29jaWF0ZWQgVmlld0NvbnRhaW5lclJlZiBvcixcbiAgICAgKiBDbGVhcnMgYWxsIHZpZXdzIGZyb20gdGhlIFZpZXdDb250YWluZXJSZWZcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGVWaWV3KHZhbHVlOiBib29sZWFuKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19