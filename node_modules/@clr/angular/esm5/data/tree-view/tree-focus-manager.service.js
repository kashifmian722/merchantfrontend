import { __decorate } from "tslib";
/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
var TreeFocusManagerService = /** @class */ (function () {
    function TreeFocusManagerService() {
        this._focusRequest = new Subject();
        this._focusChange = new Subject();
    }
    Object.defineProperty(TreeFocusManagerService.prototype, "focusRequest", {
        get: function () {
            return this._focusRequest.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TreeFocusManagerService.prototype, "focusChange", {
        get: function () {
            return this._focusChange.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    TreeFocusManagerService.prototype.findSiblings = function (model) {
        // the method will return not only sibling models but also itself among them
        if (model.parent) {
            return model.parent.children;
        }
        else {
            return this.rootNodeModels;
        }
    };
    TreeFocusManagerService.prototype.findLastVisibleInNode = function (model) {
        // the method will traverse through until it finds the last visible node from the given node
        if (!model) {
            return;
        }
        if (model.expanded && model.children.length > 0) {
            var children = model.children;
            var lastChild = children[children.length - 1];
            return this.findLastVisibleInNode(lastChild);
        }
        else {
            return model;
        }
    };
    TreeFocusManagerService.prototype.findNextFocusable = function (model) {
        if (!model) {
            return;
        }
        var siblings = this.findSiblings(model);
        var selfIndex = siblings.indexOf(model);
        if (selfIndex < siblings.length - 1) {
            return siblings[selfIndex + 1];
        }
        else if (selfIndex === siblings.length - 1) {
            return this.findNextFocusable(model.parent);
        }
    };
    TreeFocusManagerService.prototype.findLastVisibleInTree = function () {
        var lastRootNode = this.rootNodeModels && this.rootNodeModels.length && this.rootNodeModels[this.rootNodeModels.length - 1];
        return this.findLastVisibleInNode(lastRootNode);
    };
    TreeFocusManagerService.prototype.findNodeAbove = function (model) {
        if (!model) {
            return;
        }
        var siblings = this.findSiblings(model);
        var selfIndex = siblings.indexOf(model);
        if (selfIndex === 0) {
            return model.parent;
        }
        else if (selfIndex > 0) {
            return this.findLastVisibleInNode(siblings[selfIndex - 1]);
        }
    };
    TreeFocusManagerService.prototype.findNodeBelow = function (model) {
        if (!model) {
            return;
        }
        if (model.expanded && model.children.length > 0) {
            return model.children[0];
        }
        else {
            return this.findNextFocusable(model);
        }
    };
    TreeFocusManagerService.prototype.focusNode = function (model) {
        if (model) {
            this._focusRequest.next(model.nodeId);
        }
    };
    TreeFocusManagerService.prototype.broadcastFocusedNode = function (nodeId) {
        if (this.focusedNodeId !== nodeId) {
            this.focusedNodeId = nodeId;
            this._focusChange.next(nodeId);
        }
    };
    TreeFocusManagerService.prototype.focusParent = function (model) {
        if (model) {
            this.focusNode(model.parent);
        }
    };
    TreeFocusManagerService.prototype.focusFirstVisibleNode = function () {
        var focusModel = this.rootNodeModels && this.rootNodeModels[0];
        this.focusNode(focusModel);
    };
    TreeFocusManagerService.prototype.focusLastVisibleNode = function () {
        this.focusNode(this.findLastVisibleInTree());
    };
    TreeFocusManagerService.prototype.focusNodeAbove = function (model) {
        this.focusNode(this.findNodeAbove(model));
    };
    TreeFocusManagerService.prototype.focusNodeBelow = function (model) {
        this.focusNode(this.findNodeBelow(model));
    };
    TreeFocusManagerService = __decorate([
        Injectable()
    ], TreeFocusManagerService);
    return TreeFocusManagerService;
}());
export { TreeFocusManagerService };
//# sourceMappingURL=data:application/json;base64,