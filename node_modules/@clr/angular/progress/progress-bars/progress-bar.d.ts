import { ClrAriaLiveService, ClrAriaLivePoliteness } from '../../utils/a11y/aria-live.service';
import * as ɵngcc0 from '@angular/core';
export declare class ClrProgressBar {
    private ariaLiveService;
    constructor(ariaLiveService: ClrAriaLiveService);
    /**
     * Handle component ID
     */
    private _ID;
    externalId: string;
    set id(value: string);
    get id(): string;
    max: number;
    displayval: string;
    private _value;
    get value(): number;
    set value(value: number);
    get progressClass(): boolean;
    private _labeled;
    get labeledClass(): boolean;
    set clrLabeled(value: boolean | string);
    private _fade;
    get fadeClass(): boolean;
    set clrFade(value: boolean | string);
    private _loop;
    get loopClass(): boolean;
    set clrLoop(value: boolean | string);
    private _success;
    get successClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrSuccess(value: boolean | string);
    private _danger;
    get dangerClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrDanger(value: boolean | string);
    private _flash;
    get flashClass(): boolean;
    set clrFlash(value: boolean | string);
    private _flashDanger;
    get flashDangerClass(): boolean;
    /** @deprecated since 2.0, remove in 4.0 */
    set clrFlashDanger(value: boolean | string);
    /** @deprecated since 3.0, remove in 4.0 */
    assertive: boolean;
    /** @deprecated since 3.0, remove in 4.0 */
    off: boolean;
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     */
    get displayValue(): string;
    /**
     * Display aria-live only when there is value and it's not 0 or equal to the max value
     */
    displayAriaLive(): boolean;
    get ariaLive(): ClrAriaLivePoliteness;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrProgressBar>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrProgressBar, "clr-progress-bar", never, {
    "max": "clrMax";
    "id": "id";
    "value": "clrValue";
    "clrLabeled": "clrLabeled";
    "clrFade": "clrFade";
    "clrLoop": "clrLoop";
    "clrSuccess": "clrSuccess";
    "clrDanger": "clrDanger";
    "clrFlash": "clrFlash";
    "clrFlashDanger": "clrFlashDanger";
    "displayval": "clrDisplayval";
    "assertive": "clrAssertive";
    "off": "clrOff";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmQudHMiLCJzb3VyY2VzIjpbInByb2dyZXNzLWJhci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsckFyaWFMaXZlU2VydmljZSwgQ2xyQXJpYUxpdmVQb2xpdGVuZXNzIH0gZnJvbSAnLi4vLi4vdXRpbHMvYTExeS9hcmlhLWxpdmUuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBDbHJQcm9ncmVzc0JhciB7XG4gICAgcHJpdmF0ZSBhcmlhTGl2ZVNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoYXJpYUxpdmVTZXJ2aWNlOiBDbHJBcmlhTGl2ZVNlcnZpY2UpO1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBjb21wb25lbnQgSURcbiAgICAgKi9cbiAgICBwcml2YXRlIF9JRDtcbiAgICBleHRlcm5hbElkOiBzdHJpbmc7XG4gICAgc2V0IGlkKHZhbHVlOiBzdHJpbmcpO1xuICAgIGdldCBpZCgpOiBzdHJpbmc7XG4gICAgbWF4OiBudW1iZXI7XG4gICAgZGlzcGxheXZhbDogc3RyaW5nO1xuICAgIHByaXZhdGUgX3ZhbHVlO1xuICAgIGdldCB2YWx1ZSgpOiBudW1iZXI7XG4gICAgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpO1xuICAgIGdldCBwcm9ncmVzc0NsYXNzKCk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfbGFiZWxlZDtcbiAgICBnZXQgbGFiZWxlZENsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsckxhYmVsZWQodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2ZhZGU7XG4gICAgZ2V0IGZhZGVDbGFzcygpOiBib29sZWFuO1xuICAgIHNldCBjbHJGYWRlKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBwcml2YXRlIF9sb29wO1xuICAgIGdldCBsb29wQ2xhc3MoKTogYm9vbGVhbjtcbiAgICBzZXQgY2xyTG9vcCh2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyk7XG4gICAgcHJpdmF0ZSBfc3VjY2VzcztcbiAgICBnZXQgc3VjY2Vzc0NsYXNzKCk6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDIuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIHNldCBjbHJTdWNjZXNzKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBwcml2YXRlIF9kYW5nZXI7XG4gICAgZ2V0IGRhbmdlckNsYXNzKCk6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDIuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIHNldCBjbHJEYW5nZXIodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIHByaXZhdGUgX2ZsYXNoO1xuICAgIGdldCBmbGFzaENsYXNzKCk6IGJvb2xlYW47XG4gICAgc2V0IGNsckZsYXNoKHZhbHVlOiBib29sZWFuIHwgc3RyaW5nKTtcbiAgICBwcml2YXRlIF9mbGFzaERhbmdlcjtcbiAgICBnZXQgZmxhc2hEYW5nZXJDbGFzcygpOiBib29sZWFuO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAyLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBzZXQgY2xyRmxhc2hEYW5nZXIodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcpO1xuICAgIC8qKiBAZGVwcmVjYXRlZCBzaW5jZSAzLjAsIHJlbW92ZSBpbiA0LjAgKi9cbiAgICBhc3NlcnRpdmU6IGJvb2xlYW47XG4gICAgLyoqIEBkZXByZWNhdGVkIHNpbmNlIDMuMCwgcmVtb3ZlIGluIDQuMCAqL1xuICAgIG9mZjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBNYWtlIHN1cmUgdGhhdCB3ZSBhbHdheXMgd2lsbCBoYXZlIHNvbWV0aGluZyB0aGF0IGlzIHJlYWRhYmxlXG4gICAgICogZm9yIHRoZSBzY3JlZW4gcmVhZGVyXG4gICAgICovXG4gICAgZ2V0IGRpc3BsYXlWYWx1ZSgpOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogRGlzcGxheSBhcmlhLWxpdmUgb25seSB3aGVuIHRoZXJlIGlzIHZhbHVlIGFuZCBpdCdzIG5vdCAwIG9yIGVxdWFsIHRvIHRoZSBtYXggdmFsdWVcbiAgICAgKi9cbiAgICBkaXNwbGF5QXJpYUxpdmUoKTogYm9vbGVhbjtcbiAgICBnZXQgYXJpYUxpdmUoKTogQ2xyQXJpYUxpdmVQb2xpdGVuZXNzO1xufVxuIl19