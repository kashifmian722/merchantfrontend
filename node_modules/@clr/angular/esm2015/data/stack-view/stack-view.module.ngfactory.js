/**
 * @fileoverview This file was generated by the Angular template compiler. Do not edit.
 * /*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.

 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride,checkTypes}
 * tslint:disable
 */ 
import * as i0 from "@angular/core";
import * as i1 from "./stack-view.module";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "../../icon/icon.module";
import * as i5 from "../../utils/animations/expandable-animation/expandable-animation.module";
var ClrStackViewModuleNgFactory = i0.ɵcmf(i1.ClrStackViewModule, [], function (_l) { return i0.ɵmod([i0.ɵmpd(512, i0.ComponentFactoryResolver, i0.ɵCodegenComponentFactoryResolver, [[8, []], [3, i0.ComponentFactoryResolver], i0.NgModuleRef]), i0.ɵmpd(4608, i2.NgLocalization, i2.NgLocaleLocalization, [i0.LOCALE_ID]), i0.ɵmpd(4608, i3.ɵangular_packages_forms_forms_n, i3.ɵangular_packages_forms_forms_n, []), i0.ɵmpd(1073742336, i2.CommonModule, i2.CommonModule, []), i0.ɵmpd(1073742336, i3.ɵangular_packages_forms_forms_d, i3.ɵangular_packages_forms_forms_d, []), i0.ɵmpd(1073742336, i3.FormsModule, i3.FormsModule, []), i0.ɵmpd(1073742336, i4.ClrIconModule, i4.ClrIconModule, []), i0.ɵmpd(1073742336, i5.ClrExpandableAnimationModule, i5.ClrExpandableAnimationModule, []), i0.ɵmpd(1073742336, i1.ClrStackViewModule, i1.ClrStackViewModule, [])]); });
export { ClrStackViewModuleNgFactory as ClrStackViewModuleNgFactory };
//# sourceMappingURL=data:application/json;base64,