import { EventEmitter, Injector, OnDestroy, OnInit } from '@angular/core';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ClrSelectedState } from './models/selected-state.enum';
import { TreeNodeModel } from './models/tree-node.model';
import { TreeFeaturesService } from './tree-features.service';
import { TreeFocusManagerService } from './tree-focus-manager.service';
import { ClrTreeNodeLink } from './tree-node-link';
import * as ɵngcc0 from '@angular/core';
export declare class ClrTreeNode<T> implements OnInit, OnDestroy {
    nodeId: string;
    private platformId;
    featuresService: TreeFeaturesService<T>;
    expandService: IfExpandService;
    commonStrings: ClrCommonStringsService;
    private focusManager;
    STATES: typeof ClrSelectedState;
    private skipEmitChange;
    constructor(nodeId: string, platformId: Object, parent: ClrTreeNode<T>, featuresService: TreeFeaturesService<T>, expandService: IfExpandService, commonStrings: ClrCommonStringsService, focusManager: TreeFocusManagerService<T>, injector: Injector);
    _model: TreeNodeModel<T>;
    isExpandable(): boolean;
    get selected(): ClrSelectedState | boolean;
    set selected(value: ClrSelectedState | boolean);
    selectedChange: EventEmitter<ClrSelectedState>;
    get ariaSelected(): boolean;
    expandable: boolean | undefined;
    get expanded(): boolean;
    set expanded(value: boolean);
    expandedChange: EventEmitter<boolean>;
    private subscriptions;
    contentContainerTabindex: number;
    private contentContainer;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private treeNodeLinkList;
    get treeNodeLink(): ClrTreeNodeLink;
    private setTabIndex;
    private checkTabIndex;
    focusTreeNode(): void;
    broadcastFocusOnContainer(): void;
    onKeyDown(event: KeyboardEvent): void;
    private expandOrFocusFirstChild;
    private collapseOrFocusParent;
    private triggerDefaultAction;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ClrTreeNode<any>>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ClrTreeNode<any>, "clr-tree-node", never, {
    "selected": "clrSelected";
    "expanded": "clrExpanded";
    "expandable": "clrExpandable";
}, {
    "selectedChange": "clrSelectedChange";
    "expandedChange": "clrExpandedChange";
}, ["treeNodeLinkList"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLmQudHMiLCJzb3VyY2VzIjpbInRyZWUtbm9kZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElmRXhwYW5kU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmRpdGlvbmFsL2lmLWV4cGFuZGVkLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyU2VsZWN0ZWRTdGF0ZSB9IGZyb20gJy4vbW9kZWxzL3NlbGVjdGVkLXN0YXRlLmVudW0nO1xuaW1wb3J0IHsgVHJlZU5vZGVNb2RlbCB9IGZyb20gJy4vbW9kZWxzL3RyZWUtbm9kZS5tb2RlbCc7XG5pbXBvcnQgeyBUcmVlRmVhdHVyZXNTZXJ2aWNlIH0gZnJvbSAnLi90cmVlLWZlYXR1cmVzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJlZUZvY3VzTWFuYWdlclNlcnZpY2UgfSBmcm9tICcuL3RyZWUtZm9jdXMtbWFuYWdlci5zZXJ2aWNlJztcbmltcG9ydCB7IENsclRyZWVOb2RlTGluayB9IGZyb20gJy4vdHJlZS1ub2RlLWxpbmsnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2xyVHJlZU5vZGU8VD4gaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgbm9kZUlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xuICAgIGZlYXR1cmVzU2VydmljZTogVHJlZUZlYXR1cmVzU2VydmljZTxUPjtcbiAgICBleHBhbmRTZXJ2aWNlOiBJZkV4cGFuZFNlcnZpY2U7XG4gICAgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2U7XG4gICAgcHJpdmF0ZSBmb2N1c01hbmFnZXI7XG4gICAgU1RBVEVTOiB0eXBlb2YgQ2xyU2VsZWN0ZWRTdGF0ZTtcbiAgICBwcml2YXRlIHNraXBFbWl0Q2hhbmdlO1xuICAgIGNvbnN0cnVjdG9yKG5vZGVJZDogc3RyaW5nLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHBhcmVudDogQ2xyVHJlZU5vZGU8VD4sIGZlYXR1cmVzU2VydmljZTogVHJlZUZlYXR1cmVzU2VydmljZTxUPiwgZXhwYW5kU2VydmljZTogSWZFeHBhbmRTZXJ2aWNlLCBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSwgZm9jdXNNYW5hZ2VyOiBUcmVlRm9jdXNNYW5hZ2VyU2VydmljZTxUPiwgaW5qZWN0b3I6IEluamVjdG9yKTtcbiAgICBfbW9kZWw6IFRyZWVOb2RlTW9kZWw8VD47XG4gICAgaXNFeHBhbmRhYmxlKCk6IGJvb2xlYW47XG4gICAgZ2V0IHNlbGVjdGVkKCk6IENsclNlbGVjdGVkU3RhdGUgfCBib29sZWFuO1xuICAgIHNldCBzZWxlY3RlZCh2YWx1ZTogQ2xyU2VsZWN0ZWRTdGF0ZSB8IGJvb2xlYW4pO1xuICAgIHNlbGVjdGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Q2xyU2VsZWN0ZWRTdGF0ZT47XG4gICAgZ2V0IGFyaWFTZWxlY3RlZCgpOiBib29sZWFuO1xuICAgIGV4cGFuZGFibGU6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gICAgZ2V0IGV4cGFuZGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGV4cGFuZGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBleHBhbmRlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xuICAgIHByaXZhdGUgc3Vic2NyaXB0aW9ucztcbiAgICBjb250ZW50Q29udGFpbmVyVGFiaW5kZXg6IG51bWJlcjtcbiAgICBwcml2YXRlIGNvbnRlbnRDb250YWluZXI7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByaXZhdGUgdHJlZU5vZGVMaW5rTGlzdDtcbiAgICBnZXQgdHJlZU5vZGVMaW5rKCk6IENsclRyZWVOb2RlTGluaztcbiAgICBwcml2YXRlIHNldFRhYkluZGV4O1xuICAgIHByaXZhdGUgY2hlY2tUYWJJbmRleDtcbiAgICBmb2N1c1RyZWVOb2RlKCk6IHZvaWQ7XG4gICAgYnJvYWRjYXN0Rm9jdXNPbkNvbnRhaW5lcigpOiB2b2lkO1xuICAgIG9uS2V5RG93bihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBleHBhbmRPckZvY3VzRmlyc3RDaGlsZDtcbiAgICBwcml2YXRlIGNvbGxhcHNlT3JGb2N1c1BhcmVudDtcbiAgICBwcml2YXRlIHRyaWdnZXJEZWZhdWx0QWN0aW9uO1xufVxuIl19